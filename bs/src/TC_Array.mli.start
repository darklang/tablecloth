val flatten : 'a array array -> 'a array

val repeat : int -> 'a -> 'a array

val empty : 'a array

val initialize : int -> f:(int -> 'a) -> 'a array

val repeat  : int -> 'a -> 'a array

val sum : int array -> int

val floatSum : float array -> float

val float_sum : float array -> float

val last : 'a array -> 'a option

val map : f:('a -> 'b) -> 'a array -> 'b array

val indexedMap : f:(int -> 'a -> 'b) -> 'a array -> 'b array

val indexed_map : f:(int -> 'a -> 'b) -> 'a array -> 'b array

val mapi : f:(int -> 'a -> 'b) -> 'a array -> 'b array

val map2 : f:('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array

val getBy : f:('a -> bool) -> 'a array -> 'a option

val get_by : f:('a -> bool) -> 'a array -> 'a option

val find : f:('a -> bool) -> 'a array -> 'a option

val elemIndex : value:'a -> 'a array -> int option

val elem_index : value:'a -> 'a array -> int option

val member : value:'a -> 'a array -> bool

val uniqueBy : f:('a -> string) -> 'a array -> 'a array

val unique_by : f:('a -> string) -> 'a array -> 'a array

val getAt : index:int -> 'a array -> 'a option

val get_at : index:int -> 'a array -> 'a option

val any : f:('a -> bool) -> 'a array -> bool

val head : 'a array -> 'a option

val drop : count:int -> 'a array -> 'a array

val init : 'a array -> 'a array option

val filterMap : f:('a -> 'b option) -> 'a array -> 'b array

val filter_map : f:('a -> 'b option) -> 'a array -> 'b array

val filter : f:('a -> bool) -> 'a array -> 'a array

val concat : 'a array array -> 'a array

val partition : f:('a -> bool) -> 'a array -> 'a array * 'a array

val foldr : f:('a -> 'b -> 'b) -> init:'b -> 'a array -> 'b

val foldl : f:('a -> 'b -> 'b) -> init:'b -> 'a array -> 'b

val findIndex : f:('a -> bool) -> 'a array -> int option

val find_index : f:('a -> bool) -> 'a array -> int option

val take : count:int -> 'a array -> 'a array

val updateAt : index:int -> f:('a -> 'a) -> 'a array -> 'a array

val update_at : index:int -> f:('a -> 'a) -> 'a array -> 'a array

val length : 'a array -> int

val reverse : 'a array -> 'a array

val dropWhile : f:('a -> bool) -> 'a array -> 'a array

val drop_while : f:('a -> bool) -> 'a array -> 'a array

val isEmpty : 'a array -> bool

val is_empty : 'a array -> bool

val cons : 'a -> 'a array -> 'a array

val takeWhile : f:('a -> bool) -> 'a array -> 'a array

val take_while : f:('a -> bool) -> 'a array -> 'a array

val all : f:('a -> bool) -> 'a array -> bool

val tail : 'a array -> 'a array option

val append : 'a array -> 'a array -> 'a array

val removeAt : index:int -> 'a array -> 'a array

val remove_at : index:int -> 'a array -> 'a array

val minimumBy : f:('a -> 'comparable) -> 'a array -> 'a option

val minimum_by : f:('a -> 'comparable) -> 'a array -> 'a option

val maximumBy : f:('a -> 'comparable) -> 'a array -> 'a option

val maximum_by : f:('a -> 'comparable) -> 'a array -> 'a option

val maximum : 'comparable array -> 'comparable option

val sortBy : f:('a -> 'b) -> 'a array -> 'a array

val sort_by : f:('a -> 'b) -> 'a array -> 'a array

val span : f:('a -> bool) -> 'a array -> 'a array * 'a array

val groupWhile : f:('a -> 'a -> bool) -> 'a array -> 'a array array

val group_while : f:('a -> 'a -> bool) -> 'a array -> 'a array array

val splitAt : index:int -> 'a array -> 'a array * 'a array

val split_at : index:int -> 'a array -> 'a array * 'a array

val insertAt : index:int -> value:'a -> 'a array -> 'a array

val insert_at : index:int -> value:'a -> 'a array -> 'a array

val splitWhen : f:('a -> bool) -> 'a array -> ('a array * 'a array) option

val split_when : f:('a -> bool) -> 'a array -> ('a array * 'a array) option

val intersperse : 'a -> 'a array -> 'a array

val initialize : int -> (int -> 'a) -> 'a array

val sortWith : ('a -> 'a -> int) -> 'a array -> 'a array

val sort_with : ('a -> 'a -> int) -> 'a array -> 'a array

val iter : f:('a -> unit) -> 'a array -> unit
