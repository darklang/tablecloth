open Tablecloth
open AlcoJest

let suite= suite("Float", () => {
   open Float
test ("absolute(8.)", () => expect(Float.absolute(8.)) |> toEqual(Eq.float, 8.)) 
test ("absolute(-7.)", () => expect(Float.absolute(-7.)) |> toEqual(Eq.float, 7.)) 
test ("absolute(0.)", () => expect(Float.absolute(0.)) |> toEqual(Eq.float, 0.)) 
test ("add(3.14,3.14)", () => expect(Float.add(3.14,3.14)) |> toEqual(Eq.float, 6.28)) 
test ("clamp(5.,~lower=0.,~upper=8.)", () => expect(Float.clamp(5.,~lower=0.,~upper=8.)) |> toEqual(Eq.float, 5.)) 
test ("clamp(9.,~lower=0.,~upper=8.)", () => expect(Float.clamp(9.,~lower=0.,~upper=8.)) |> toEqual(Eq.float, 8.)) 
test ("clamp(1.,~lower=2.,~upper=8.)", () => expect(Float.clamp(1.,~lower=2.,~upper=8.)) |> toEqual(Eq.float, 2.)) 
test ("clamp(5.,~lower=-10.,~upper=-5.)", () => expect(Float.clamp(5.,~lower=-10.,~upper=-5.)) |> toEqual(Eq.float, -5.)) 
test ("clamp(-15.,~lower=-10.,~upper=-5.)", () => expect(Float.clamp(-15.,~lower=-10.,~upper=-5.)) |> toEqual(Eq.float, -10.)) 
test ("clamp(-6.6,~lower=-7.9,~upper=nan)", () => expect(Float.clamp(-6.6,~lower=-7.9,~upper=nan)) |> toEqual(Eq.float, NaN)) 
test ("clamp(-6.6,~lower=nan,~upper=0.)", () => expect(Float.clamp(-6.6,~lower=nan,~upper=0.)) |> toEqual(Eq.float, NaN)) 
test ("clamp(nan,~lower=2.,~upper=8.)", () => expect(Float.clamp(nan,~lower=2.,~upper=8.)) |> toEqual(Eq.float, NaN)) 
test ("clamp(3.,~lower=7.,~upper= 1.)", () => expect(() => Float.clamp(3.,~lower=7.,~upper= 1.)) |> toThrow) 
test ("atan(0.)", () => expect(Float.atan(0.)) |> toEqual(Eq.radians, 0.)) 
test ("atan(1. /. 1.)", () => expect(Float.atan(1. /. 1.)) |> toEqual(Eq.radians, 0.7853981633974483)) 
test ("atan(1. /. -1.)", () => expect(Float.atan(1. /. -1.)) |> toEqual(Eq.radians, -0.7853981633974483)) 
test ("atan(-1. /. -1.)", () => expect(Float.atan(-1. /. -1.)) |> toEqual(Eq.radians, 0.7853981633974483)) 
test ("atan(-1. /. 1.)", () => expect(Float.atan(-1. /. 1.)) |> toEqual(Eq.radians, -0.7853981633974483)) 
test ("atan2(~y=0.,~x=0.)", () => expect(Float.atan2(~y=0.,~x=0.)) |> toEqual(Eq.radians, 0.)) 
test ("atan2(~y=1.,~x=1.)", () => expect(Float.atan2(~y=1.,~x=1.)) |> toEqual(Eq.radians, 0.7853981633974483)) 
test ("atan2(~y=1.,~x=-1.)", () => expect(Float.atan2(~y=1.,~x=-1.)) |> toEqual(Eq.radians, 2.356194490192345)) 
test ("atan2(~y=-1.,~x=-1.)", () => expect(Float.atan2(~y=-1.,~x=-1.)) |> toEqual(Eq.radians, -2.356194490192345)) 
test ("atan2(~y=-1.,~x=1.)", () => expect(Float.atan2(~y=-1.,~x=1.)) |> toEqual(Eq.radians, -0.7853981633974483)) 
test ("ceiling(1.2)", () => expect(Float.ceiling(1.2)) |> toEqual(Eq.float, 2.)) 
test ("ceiling(1.5)", () => expect(Float.ceiling(1.5)) |> toEqual(Eq.float, 2.)) 
test ("ceiling(1.8)", () => expect(Float.ceiling(1.8)) |> toEqual(Eq.float, 2.)) 
test ("ceiling(-1.2)", () => expect(Float.ceiling(-1.2)) |> toEqual(Eq.float, -1.)) 
test ("ceiling(-1.5)", () => expect(Float.ceiling(-1.5)) |> toEqual(Eq.float, -1.)) 
test ("ceiling(-1.8)", () => expect(Float.ceiling(-1.8)) |> toEqual(Eq.float, -1.)) 
test ("cos(degrees(60.))", () => expect(Float.cos(degrees(60.))) |> toEqual(Eq.float, 0.5)) 
test ("cos(radians(pi /. 3.))", () => expect(Float.cos(radians(pi /. 3.))) |> toEqual(Eq.float, 0.5)) 
test ("degrees(180.)", () => expect(Float.degrees(180.)) |> toEqual(Eq.radians, pi)) 
test ("divide(3.14,~by=2.)", () => expect(Float.divide(3.14,~by=2.)) |> toEqual(Eq.float, 1.57)) 
test ("divide(3.14,~by=0.)", () => expect(Float.divide(3.14,~by=0.)) |> toEqual(Eq.float, infinity)) 
test ("divide(3.14,~by=-0.)", () => expect(Float.divide(3.14,~by=-0.)) |> toEqual(Eq.float, negativeInfinity)) 
test ("floor(1.2)", () => expect(Float.floor(1.2)) |> toEqual(Eq.float, 1.)) 
test ("floor(1.5)", () => expect(Float.floor(1.5)) |> toEqual(Eq.float, 1.)) 
test ("floor(1.8)", () => expect(Float.floor(1.8)) |> toEqual(Eq.float, 1.)) 
test ("floor(-1.2)", () => expect(Float.floor(-1.2)) |> toEqual(Eq.float, -2.)) 
test ("floor(-1.5)", () => expect(Float.floor(-1.5)) |> toEqual(Eq.float, -2.)) 
test ("floor(-1.8)", () => expect(Float.floor(-1.8)) |> toEqual(Eq.float, -2.)) 
test ("fromInt(5)", () => expect(Float.fromInt(5)) |> toEqual(Eq.float, 5.0)) 
test ("fromInt(0)", () => expect(Float.fromInt(0)) |> toEqual(Eq.float, 0.0)) 
test ("fromInt(-7)", () => expect(Float.fromInt(-7)) |> toEqual(Eq.float, -7.0)) 
test ("fromString(NaN)", () => expect(Float.fromString("NaN")) |> toEqual({open Eq
option(float)}, Some(Js.Float._NaN),)) 
test ("fromString(nan)", () => expect(Float.fromString("nan")) |> toEqual({open Eq
option(float)}, Some(Js.Float._NaN))) 
test ("fromString(Infinity)", () => expect(Float.fromString("Infinity")) |> toEqual({open Eq
option(float)}, Some(infinity))) 
test ("fromString(infinity)", () => expect(Float.fromString("infinity")) |> toEqual({open Eq
option(float)}, None)) 
test ("fromString(55)", () => expect(Float.fromString("55")) |> toEqual({open Eq
option(float)}, Some(55.))) 
test ("fromString(-100)", () => expect(Float.fromString("-100")) |> toEqual({open Eq
option(float)}, Some(-100.))) 
test ("fromString(not number)", () => expect(Float.fromString("not number")) |> toEqual({open Eq
option(float)}, None)) 
test ("hypotenuse(3.,4.)", () => expect(Float.hypotenuse(3.,4.)) |> toEqual(Eq.float, 5.)) 
test ("inRange(3.,~lower=2.,~upper=4.)", () => expect(Float.inRange(3.,~lower=2.,~upper=4.)) |> toEqual(Eq.bool, true)) 
test ("inRange(8.,~lower=2.,~upper=4.)", () => expect(Float.inRange(8.,~lower=2.,~upper=4.)) |> toEqual(Eq.bool, false)) 
test ("inRange(1.,~lower= 2.,~upper=4.)", () => expect(Float.inRange(1.,~lower= 2.,~upper=4.)) |> toEqual(Eq.bool, false)) 
test ("inRange(2.,~lower=1.,~upper=2.)", () => expect(Float.inRange(2.,~lower=1.,~upper=2.)) |> toEqual(Eq.bool, false)) 
test ("inRange(-6.6,~lower=-7.9,~upper=-5.2)", () => expect(Float.inRange(-6.6,~lower=-7.9,~upper=-5.2)) |> toEqual(Eq.bool, true)) 
test ("inRange(-6.6,~lower=-7.9,~upper=nan)", () => expect(Float.inRange(-6.6,~lower=-7.9,~upper=nan)) |> toEqual(Eq.bool, false)) 
test ("inRange(-6.6,~lower=nan,~upper=0.)", () => expect(Float.inRange(-6.6,~lower=nan,~upper=0.)) |> toEqual(Eq.bool, false)) 
test ("inRange(nan,~lower=2.,~upper=8.)", () => expect(Float.inRange(nan,~lower=2.,~upper=8.)) |> toEqual(Eq.bool, false)) 
test ("inRange(3.,~lower=7.,~upper=1.)", () => expect(() => Float.inRange(3.,~lower=7.,~upper=1.)) |> toThrow) 
test ("isFinite(infinity)", () => expect(Float.isFinite(infinity)) |> toEqual(Eq.bool, false)) 
test ("isFinite(negativeInfinity)", () => expect(Float.isFinite(negativeInfinity)) |> toEqual(Eq.bool, false)) 
test ("isFinite(nan)", () => expect(Float.isFinite(nan)) |> toEqual(Eq.bool, false)) 
test ("isFinite(-5.)", () => expect(Float.isFinite(-5.)) |> toEqual(Eq.bool, true)) 
test ("isFinite(-0.314)", () => expect(Float.isFinite(-0.314)) |> toEqual(Eq.bool, true)) 
test ("isFinite(0.)", () => expect(Float.isFinite(0.)) |> toEqual(Eq.bool, true)) 
test ("isFinite(3.14)", () => expect(Float.isFinite(3.14)) |> toEqual(Eq.bool, true)) 
test ("isInfinite(infinity)", () => expect(Float.isInfinite(infinity)) |> toEqual(Eq.bool, true)) 
test ("isInfinite(negativeInfinity)", () => expect(Float.isInfinite(negativeInfinity)) |> toEqual(Eq.bool, true)) 
test ("isInfinite(nan)", () => expect(Float.isInfinite(nan)) |> toEqual(Eq.bool, false)) 
test ("isInfinite(-5.)", () => expect(Float.isInfinite(-5.)) |> toEqual(Eq.bool, false)) 
test ("isInfinite(-0.314)", () => expect(Float.isInfinite(-0.314)) |> toEqual(Eq.bool, false)) 
test ("isInfinite(0.)", () => expect(Float.isInfinite(0.)) |> toEqual(Eq.bool, false)) 
test ("isInfinite(3.14)", () => expect(Float.isInfinite(3.14)) |> toEqual(Eq.bool, false)) 
test ("isInteger(5.0)", () => expect(Float.isInteger(5.0)) |> toEqual(Eq.bool, true)) 
test ("isInteger(pi)", () => expect(Float.isInteger(pi)) |> toEqual(Eq.bool, false)) 
test ("isNaN(nan)", () => expect(Float.isNaN(nan)) |> toEqual(Eq.bool, true)) 
test ("isNaN(91.4)", () => expect(Float.isNaN(91.4)) |> toEqual(Eq.bool, false)) 
test ("log(100.,~base=10.)", () => expect(Float.log(100.,~base=10.)) |> toEqual(Eq.float, 2.)) 
test ("log(256.,~base=2.)", () => expect(Float.log(256.,~base=2.)) |> toEqual(Eq.float, 8.)) 
test ("log(0.,~base=10.)", () => expect(Float.log(0.,~base=10.)) |> toEqual(Eq.float, negativeInfinity)) 
test ("maximum(7.,9.)", () => expect(Float.maximum(7.,9.)) |> toEqual(Eq.float, 9.)) 
test ("maximum(-4.,-1.)", () => expect(Float.maximum(-4.,-1.)) |> toEqual(Eq.float, -1.)) 
test ("maximum(7.,nan)", () => expect(Float.maximum(7.,nan)) |> toEqual(Eq.float, NaN)) 
test ("maximum(7.,infinity)", () => expect(Float.maximum(7.,infinity)) |> toEqual(Eq.float, infinity)) 
test ("maximum(7.,negativeInfinity)", () => expect(Float.maximum(7.,negativeInfinity)) |> toEqual(Eq.float, 7.)) 
test ("minimum(7.,9.)", () => expect(Float.minimum(7.,9.)) |> toEqual(Eq.float, 7.)) 
test ("minimum(-4.,-1.)", () => expect(Float.minimum(-4.,-1.)) |> toEqual(Eq.float, -4.)) 
test ("minimum(7.,nan)", () => expect(Float.minimum(7.,nan)) |> toEqual(Eq.float, NaN)) 
test ("minimum(7.,infinity)", () => expect(Float.minimum(7.,infinity)) |> toEqual(Eq.float, 7.)) 
test ("minimum(7.,negativeInfinity)", () => expect(Float.minimum(7.,negativeInfinity)) |> toEqual(Eq.float, negativeInfinity)) 
test ("multiply(2.,7.)", () => expect(Float.multiply(2.,7.)) |> toEqual(Eq.float, 14.)) 
test ("negate(8.)", () => expect(Float.negate(8.)) |> toEqual(Eq.float, -8.)) 
test ("negate(-7.)", () => expect(Float.negate(-7.)) |> toEqual(Eq.float, 7.)) 
test ("negate(0.)", () => expect(Float.negate(0.)) |> toEqual(Eq.float, -0.)) 
test ("power(~base=7.,~exponent=3.)", () => expect(Float.power(~base=7.,~exponent=3.)) |> toEqual(Eq.float, 343.)) 
test ("power(~base=0.,~exponent=3.)", () => expect(Float.power(~base=0.,~exponent=3.)) |> toEqual(Eq.float, 0.)) 
test ("power(~base=7.,~exponent=0.)", () => expect(Float.power(~base=7.,~exponent=0.)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Zero,1.2)", () => expect(Float.round(~direction=#Zero,1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Zero,1.5)", () => expect(Float.round(~direction=#Zero,1.5)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Zero,1.8)", () => expect(Float.round(~direction=#Zero,1.8)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Zero,-1.2)", () => expect(Float.round(~direction=#Zero,-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Zero,-1.5)", () => expect(Float.round(~direction=#Zero,-1.5)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Zero,-1.8)", () => expect(Float.round(~direction=#Zero,-1.8)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#AwayFromZero,1.2)", () => expect(Float.round(~direction=#AwayFromZero,1.2)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#AwayFromZero,1.5)", () => expect(Float.round(~direction=#AwayFromZero,1.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#AwayFromZero,1.8)", () => expect(Float.round(~direction=#AwayFromZero,1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#AwayFromZero,-1.2)", () => expect(Float.round(~direction=#AwayFromZero,-1.2)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#AwayFromZero,-1.5)", () => expect(Float.round(~direction=#AwayFromZero,-1.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#AwayFromZero,-1.8)", () => expect(Float.round(~direction=#AwayFromZero,-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Up,1.2)", () => expect(Float.round(~direction=#Up,1.2)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Up,1.5)", () => expect(Float.round(~direction=#Up,1.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Up,1.8)", () => expect(Float.round(~direction=#Up,1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Up,-1.2)", () => expect(Float.round(~direction=#Up,-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Up,-1.5)", () => expect(Float.round(~direction=#Up,-1.5)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Up,-1.8)", () => expect(Float.round(~direction=#Up,-1.8)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Down,1.2)", () => expect(Float.round(~direction=#Down,1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Down,1.5)", () => expect(Float.round(~direction=#Down,1.5)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Down,1.8)", () => expect(Float.round(~direction=#Down,1.8)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Down,-1.2)", () => expect(Float.round(~direction=#Down,-1.2)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Down,-1.5)", () => expect(Float.round(~direction=#Down,-1.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Down,-1.8)", () => expect(Float.round(~direction=#Down,-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#Zero),1.2)", () => expect(Float.round(~direction=#Closest(#Zero),1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#Zero),1.5)", () => expect(Float.round(~direction=#Closest(#Zero),1.5)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#Zero),1.8)", () => expect(Float.round(~direction=#Closest(#Zero),1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#Zero),-1.2)", () => expect(Float.round(~direction=#Closest(#Zero),-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#Zero),-1.5)", () => expect(Float.round(~direction=#Closest(#Zero),-1.5)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#Zero),-1.8)", () => expect(Float.round(~direction=#Closest(#Zero),-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#AwayFromZero),1.2)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#AwayFromZero),1.5)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),1.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#AwayFromZero),1.8)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#AwayFromZero),-1.2)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#AwayFromZero),-1.5)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),-1.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#AwayFromZero),-1.8)", () => expect(Float.round(~direction=#Closest(#AwayFromZero),-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#Up),1.2)", () => expect(Float.round(~direction=#Closest(#Up),1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#Up),1.5)", () => expect(Float.round(~direction=#Closest(#Up),1.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#Up),1.8)", () => expect(Float.round(~direction=#Closest(#Up),1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#Up),-1.2)", () => expect(Float.round(~direction=#Closest(#Up),-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#Up),-1.5)", () => expect(Float.round(~direction=#Closest(#Up),-1.5)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#Up),-1.8)", () => expect(Float.round(~direction=#Closest(#Up),-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#Down),1.2)", () => expect(Float.round(~direction=#Closest(#Down),1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#Down),1.5)", () => expect(Float.round(~direction=#Closest(#Down),1.5)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#Down),1.8)", () => expect(Float.round(~direction=#Closest(#Down),1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#Down),-1.2)", () => expect(Float.round(~direction=#Closest(#Down),-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#Down),-1.5)", () => expect(Float.round(~direction=#Closest(#Down),-1.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#Down),-1.8)", () => expect(Float.round(~direction=#Closest(#Down),-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#ToEven),1.2)", () => expect(Float.round(~direction=#Closest(#ToEven),1.2)) |> toEqual(Eq.float, 1.)) 
test ("round(~direction=#Closest(#ToEven),1.5)", () => expect(Float.round(~direction=#Closest(#ToEven),1.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#ToEven),1.8)", () => expect(Float.round(~direction=#Closest(#ToEven),1.8)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#ToEven),2.2)", () => expect(Float.round(~direction=#Closest(#ToEven),2.2)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#ToEven),2.5)", () => expect(Float.round(~direction=#Closest(#ToEven),2.5)) |> toEqual(Eq.float, 2.)) 
test ("round(~direction=#Closest(#ToEven),2.8)", () => expect(Float.round(~direction=#Closest(#ToEven),2.8)) |> toEqual(Eq.float, 3.)) 
test ("round(~direction=#Closest(#ToEven),-1.2)", () => expect(Float.round(~direction=#Closest(#ToEven),-1.2)) |> toEqual(Eq.float, -1.)) 
test ("round(~direction=#Closest(#ToEven),-1.5)", () => expect(Float.round(~direction=#Closest(#ToEven),-1.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#ToEven),-1.8)", () => expect(Float.round(~direction=#Closest(#ToEven),-1.8)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#ToEven),-2.2)", () => expect(Float.round(~direction=#Closest(#ToEven),-2.2)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#ToEven),-2.5)", () => expect(Float.round(~direction=#Closest(#ToEven),-2.5)) |> toEqual(Eq.float, -2.)) 
test ("round(~direction=#Closest(#ToEven),-2.8)", () => expect(Float.round(~direction=#Closest(#ToEven),-2.8)) |> toEqual(Eq.float, -3.)) 
test ("radians(pi)", () => expect(Float.radians(pi)) |> toEqual(Eq.radians, pi)) 
test ("sin(degrees(30.))", () => expect(Float.sin(degrees(30.))) |> toEqual(Eq.float, 0.5)) 
test ("sin(radians(pi /. 6.))", () => expect(Float.sin(radians(pi /. 6.))) |> toEqual(Eq.float, 0.5)) 
test ("squareRoot(4.)", () => expect(Float.squareRoot(4.)) |> toEqual(Eq.float, 2.)) 
test ("squareRoot(20.25)", () => expect(Float.squareRoot(20.25)) |> toEqual(Eq.float, 4.5)) 
test ("squareRoot(-1.)", () => expect(Float.squareRoot(-1.)) |> toEqual(Eq.float, NaN)) 
test ("subtract(4.,3.)", () => expect(Float.subtract(4.,3.)) |> toEqual(Eq.float, 1.)) 
test ("tan(degrees(45.))", () => expect(Float.tan(degrees(45.))) |> toEqual(Eq.float, 0.9999999999999999)) 
test ("tan(radians(pi /. 4.))", () => expect(Float.tan(radians(pi /. 4.))) |> toEqual(Eq.float, 0.9999999999999999)) 
test ("tan(0.)", () => expect(Float.tan(0.)) |> toEqual(Eq.float, 0.)) 
test ("toInt(5.)", () => expect(Float.toInt(5.)) |> toEqual({open Eq
option(int)}, Some(5))) 
test ("toInt(5.3)", () => expect(Float.toInt(5.3)) |> toEqual({open Eq
option(int)}, Some(5))) 
test ("toInt(0.)", () => expect(Float.toInt(0.)) |> toEqual({open Eq
option(int)}, Some(0))) 
test ("toInt(-7.)", () => expect(Float.toInt(-7.)) |> toEqual({open Eq
option(int)}, Some(-7))) 
test ("toInt(nan)", () => expect(Float.toInt(nan)) |> toEqual({open Eq
option(int)}, None)) 
test ("toInt(infinity)", () => expect(Float.toInt(infinity)) |> toEqual({open Eq
option(int)}, None)) 
test ("toInt(negativeInfinity)", () => expect(Float.toInt(negativeInfinity)) |> toEqual({open Eq
option(int)}, None)) 
test ("truncate(1.2)", () => expect(Float.truncate(1.2)) |> toEqual(Eq.float, 1.)) 
test ("truncate(1.5)", () => expect(Float.truncate(1.5)) |> toEqual(Eq.float, 1.)) 
test ("truncate(1.8)", () => expect(Float.truncate(1.8)) |> toEqual(Eq.float, 1.)) 
test ("truncate(-1.2)", () => expect(Float.truncate(-1.2)) |> toEqual(Eq.float, -1.)) 
test ("truncate(-1.5)", () => expect(Float.truncate(-1.5)) |> toEqual(Eq.float, -1.)) 
test ("truncate(-1.8)", () => expect(Float.truncate(-1.8)) |> toEqual(Eq.float, -1.)) 
test ("turns(1.)", () => expect(Float.turns(1.)) |> toEqual(Eq.radians, 2. *. pi)) 
})