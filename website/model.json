{
    "entry_point": {
      "tag": "Module",
      "value": {
        "name": "Tablecloth",
        "kind": {
          "tag": "ModuleStruct",
          "value": [
            {
              "tag": "Module",
              "value": {
                "name": "Bool",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Bool"
                  }
                },
                "info": null
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Char",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothChar"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with single characters."
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "String",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothString"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with "
                      },
                      {
                        "tag": "Code",
                        "value": "\"strings\""
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Int",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Int"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Fixed precision integers"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Float",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Float"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with floating point numbers."
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Container",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Container"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Interfaces for use with container types like "
                      },
                      {
                        "tag": "Ref",
                        "value": {
                          "name": "Tablecloth.Array",
                          "reference": {
                            "kind": "MODULE",
                            "target": "Tablecloth.Array",
                            "content": [
                              {
                                "tag": "Code",
                                "value": "Tablecloth.Array"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Raw",
                        "value": " or "
                      },
                      {
                        "tag": "Ref",
                        "value": {
                          "name": "Tablecloth.List",
                          "reference": {
                            "kind": "MODULE",
                            "target": "Tablecloth.List",
                            "content": [
                              {
                                "tag": "Code",
                                "value": "Tablecloth.List"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Array",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothArray"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "A fixed lenfth collection of values"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "List",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothList"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Arbitrary length, singly linked lists"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Option",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothOption"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with optional values."
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Result",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothResult"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with computations which may fail."
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Tuple2",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Tuple2"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for manipulating tuples of length two"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Tuple3",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Tuple3"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for manipulating tuples of length three"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Comparator",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Comparator"
                  }
                },
                "info": null
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Set",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothSet"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "A collection of unique values"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Map",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "TableclothMap"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "A collection of key-value pairs"
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            },
            {
              "tag": "Module",
              "value": {
                "name": "Fun",
                "kind": {
                  "tag": "ModuleAlias",
                  "value": {
                    "father": "Tablecloth",
                    "name": "Fun"
                  }
                },
                "info": {
                  "deprecated": null,
                  "description": {
                    "tag": "Text",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Functions for working with functions."
                      }
                    ]
                  },
                  "version": null,
                  "before": [
                  ],
                  "since": null,
                  "exceptions": [
                  ],
                  "return": null,
                  "see": [
                  ],
                  "custom": [
                  ]
                }
              }
            }
          ]
        },
        "info": {
          "deprecated": null,
          "description": {
            "tag": "Text",
            "value": [
              {
                "tag": "Raw",
                "value": "Functions for working with boolean ("
              },
              {
                "tag": "Code",
                "value": "true"
              },
              {
                "tag": "Raw",
                "value": " or "
              },
              {
                "tag": "Code",
                "value": "false"
              },
              {
                "tag": "Raw",
                "value": ") values."
              }
            ]
          },
          "version": null,
          "before": [
          ],
          "since": null,
          "exceptions": [
          ],
          "return": null,
          "see": [
          ],
          "custom": [
          ]
        }
      }
    },
    "modules": {
      "Tuple3": {
        "tag": "Module",
        "value": {
          "name": "Tuple3",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for manipulating trios of values"
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('a, 'b, 'c)",
                  "is_private": false,
                  "father": "Tuple3",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "'a * 'b * 'c"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "make",
                  "qualified_name": "Tuple3.make",
                  "type": {
                    "rendered": "'a -> 'b -> 'c -> 'a * 'b * 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.create 3 \"cat\" false = (3, \"cat\", false)",
                            "reason": "Tuple3.create(3, \"cat\", false) == (3, \"cat\", false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.map3 ~f:Tuple3.create [1;2;3] ['a'; 'b'; 'c'] [4.; 5.; 6.] =\n        [(1, 'a', 4.), (2, 'b', 5.), (3, 'c', 6.)]\n    ",
                            "reason": "List.map3(~f=Tuple3.create, [1, 2, 3], ['a', 'b', 'c'], [4., 5., 6.])\n== [((1, 'a', 4.), (2, 'b', 5.), (3, 'c', 6.))];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "Tuple3.fromArray",
                  "type": {
                    "rendered": "'a array -> ('a * 'a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a tuple from the first two elements of an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the array is longer than two elements, the extra elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the array is less than two elements, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromArray [|1; 2;3 |] = Some (1, 2, 3)",
                            "reason": "Tuple3.fromArray([|1, 2, 3|]) == Some((1, 2, 3));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromArray [|1; 2|] = None",
                            "reason": "Tuple3.fromArray([|1, 2|]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromArray [|4;5;6;7|] = Some (4, 5, 6)",
                            "reason": "Tuple3.fromArray([|4, 5, 6, 7|]) == Some((4, 5, 6));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "Tuple3.fromList",
                  "type": {
                    "rendered": "'a list -> ('a * 'a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a tuple from the first two elements of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is longer than two elements, the extra elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is less than two elements, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromList [1; 2; 3] = Some (1, 2, 3)",
                            "reason": "Tuple3.fromList([1, 2, 3]) == Some((1, 2, 3));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromList [1; 2] = None",
                            "reason": "Tuple3.fromList([1, 2]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.fromList [4; 5; 6; 7] = Some (4, 5, 6)",
                            "reason": "Tuple3.fromList([4, 5, 6, 7]) == Some((4, 5, 6));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "first",
                  "qualified_name": "Tuple3.first",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the first value from a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.first (3, 4, 5) = 3",
                            "reason": "Tuple3.first((3, 4, 5)) == 3;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.first (\"john\", \"danger\", \"doe\") = \"john\"",
                            "reason": "Tuple3.first((\"john\", \"danger\", \"doe\")) == \"john\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "second",
                  "qualified_name": "Tuple3.second",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the second value from a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.second (3, 4, 5) = 4",
                            "reason": "Tuple3.second((3, 4, 5)) == 4;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.second (\"john\", \"danger\", \"doe\") = \"danger\"",
                            "reason": "Tuple3.second((\"john\", \"danger\", \"doe\")) == \"danger\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "third",
                  "qualified_name": "Tuple3.third",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the third value from a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.third (3, 4, 5) = 5",
                            "reason": "Tuple3.third((3, 4, 5)) == 5;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.third (\"john\", \"danger\", \"doe\") = \"doe\"",
                            "reason": "Tuple3.third((\"john\", \"danger\", \"doe\")) == \"doe\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "initial",
                  "qualified_name": "Tuple3.initial",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'a * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the first and second values of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " as a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple2",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.initial (3, \"stressed\", false) = (3, \"stressed\")",
                            "reason": "Tuple3.initial((3, \"stressed\", false)) == (3, \"stressed\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.initial (\"john\", 16, true) = (\"john\", 16)",
                            "reason": "Tuple3.initial((\"john\", 16, true)) == (\"john\", 16);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tail",
                  "qualified_name": "Tuple3.tail",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'b * 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the second and third values of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " as a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple2",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.tail (3, \"stressed\", false) = (\"stressed\", false)",
                            "reason": "Tuple3.tail((3, \"stressed\", false)) == (\"stressed\", false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.tail (\"john\", 16, true) = (16, true)",
                            "reason": "Tuple3.tail((\"john\", 16, true)) == (16, true);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Modify"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "rotateLeft",
                  "qualified_name": "Tuple3.rotateLeft",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'b * 'c * 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Move each value in the tuple one position to the left, moving the value in the first position into the last position."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.rotateLeft (3, 4, 5) = (4, 5, 3)",
                            "reason": "Tuple3.rotateLeft((3, 4, 5)) == (4, 5, 3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.rotateLeft (\"was\", \"stressed\", \"then\") = (\"stressed\", \"then\", \"was\")",
                            "reason": "Tuple3.rotateLeft((\"was\", \"stressed\", \"then\")) == (\"stressed\", \"then\", \"was\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "rotateRight",
                  "qualified_name": "Tuple3.rotateRight",
                  "type": {
                    "rendered": "'a * 'b * 'c -> 'c * 'a * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Move each value in the tuple one position to the right, moving the value in the last position into the first position."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.rotateRight (3, 4, 5) = (5, 3, 4)",
                            "reason": "Tuple3.rotateRight((3, 4, 5)) == (5, 3, 4);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.rotateRight (\"was\", \"stressed\", \"then\") = (\"then\", \"was\", \"stressed\")",
                            "reason": "Tuple3.rotateRight((\"was\", \"stressed\", \"then\"))\n== (\"then\", \"was\", \"stressed\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapFirst",
                  "qualified_name": "Tuple3.mapFirst",
                  "type": {
                    "rendered": "'a * 'b * 'c -> f:('a -> 'x) -> 'x * 'b * 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the first value in a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapFirst ~f:String.reverse (\"stressed\", 16, false) = (\"desserts\", 16, false)",
                            "reason": "Tuple3.mapFirst(~f=String.reverse, (\"stressed\", 16, false))\n== (\"desserts\", 16, false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapFirst ~f:String.length (\"stressed\", 16, false) = (8, 16, false)",
                            "reason": "Tuple3.mapFirst(~f=String.length, (\"stressed\", 16, false)) == (8, 16, false);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapSecond",
                  "qualified_name": "Tuple3.mapSecond",
                  "type": {
                    "rendered": "'a * 'b * 'c -> f:('b -> 'y) -> 'a * 'y * 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the second value in a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapSecond ~f:Float.squareRoot (\"stressed\", 16., false) = (\"stressed\", 4., false)",
                            "reason": "Tuple3.mapSecond(~f=Float.squareRoot, (\"stressed\", 16., false))\n== (\"stressed\", 4., false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapSecond ~f:(~-) (\"stressed\", 16, false) = (\"stressed\", -16, false)",
                            "reason": "Tuple3.mapSecond(~f=(~-), (\"stressed\", 16, false))\n== (\"stressed\", (-16), false);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapThird",
                  "qualified_name": "Tuple3.mapThird",
                  "type": {
                    "rendered": "'a * 'b * 'c -> f:('c -> 'z) -> 'a * 'b * 'z"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the third value in a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapThird ~f:not (\"stressed\", 16, false) (\"stressed\", 16, true)",
                            "reason": "Tuple3.mapThird(~f=(!), (\"stressed\", 16, false), (\"stressed\", 16, true));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapEach",
                  "qualified_name": "Tuple3.mapEach",
                  "type": {
                    "rendered": "'a * 'b * 'c -> f:('a -> 'x) -> g:('b -> 'y) -> h:('c -> 'z) -> 'x * 'y * 'z"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform each value in a tuple by applying "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3.first",
                            "reference": {
                              "kind": "VAL",
                              "target": "Tuple3.first",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3.first"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " value, "
                        },
                        {
                          "tag": "Code",
                          "value": "g"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3.second",
                            "reference": {
                              "kind": "VAL",
                              "target": "Tuple3.second",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3.second"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " value and "
                        },
                        {
                          "tag": "Code",
                          "value": "h"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3.third",
                            "reference": {
                              "kind": "VAL",
                              "target": "Tuple3.third",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3.third"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Tuple3.mapEach\n        ~f:String.reverse\n        ~g:Float.squareRoot\n        ~h:Bool.not\n        (\"stressed\", 16., false) = (\"desserts\", 4., true)\n    ",
                            "reason": "Tuple3.mapEach(\n  ~f=String.reverse,\n  ~g=Float.squareRoot,\n  ~h=Bool.(!),\n  (\"stressed\", 16., false),\n)\n== (\"desserts\", 4., true);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapAll",
                  "qualified_name": "Tuple3.mapAll",
                  "type": {
                    "rendered": "'a * 'a * 'a -> f:('a -> 'b) -> 'b * 'b * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform all the values of a tuple using the same function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "mapAll"
                        },
                        {
                          "tag": "Raw",
                          "value": " can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapAll ~f:Float.squareRoot (9., 16., 25.) = (3., 4., 5.)",
                            "reason": "Tuple3.mapAll(~f=Float.squareRoot, (9., 16., 25.)) == (3., 4., 5.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.mapAll ~f:String.length (\"was\", \"stressed\", \"then\") = (3, 8, 4)",
                            "reason": "Tuple3.mapAll(~f=String.length, (\"was\", \"stressed\", \"then\")) == (3, 8, 4);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "Tuple3.toArray",
                  "type": {
                    "rendered": "'a * 'a * 'a -> 'a array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Turns a tuple into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of length three."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This function can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.toArray (3, 4, 5) = [3; 4; 5]",
                            "reason": "Tuple3.toArray((3, 4, 5)) == [3, 4, 5];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.toArray (\"was\", \"stressed\", \"then\") = [\"was\"; \"stressed\"; \"then\"]",
                            "reason": "Tuple3.toArray((\"was\", \"stressed\", \"then\")) == [\"was\", \"stressed\", \"then\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "Tuple3.toList",
                  "type": {
                    "rendered": "'a * 'a * 'a -> 'a list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Turns a tuple into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of length three."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This function can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.toList (3, 4, 5) = [3; 4; 5]",
                            "reason": "Tuple3.toList((3, 4, 5)) == [3, 4, 5];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.toList (\"was\", \"stressed\", \"then\") = [\"was\"; \"stressed\"; \"then\"]",
                            "reason": "Tuple3.toList((\"was\", \"stressed\", \"then\")) == [\"was\", \"stressed\", \"then\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "Tuple3.equal",
                  "type": {
                    "rendered": "('a -> 'a -> bool) ->\n  ('b -> 'b -> bool) ->\n  ('c -> 'c -> bool) -> ('a, 'b, 'c) Tuple3.t -> ('a, 'b, 'c) Tuple3.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s for equality, using the provided functions to test the\n    first, second and third components."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.equal Int.equal String.equal Char.equal (1, \"Fox\", 'j') (1, \"Fox\", 'k') = true",
                            "reason": "Tuple3.equal(\n  Int.equal,\n  String.equal,\n  Char.equal,\n  (1, \"Fox\", 'j'),\n  (1, \"Fox\", 'k'),\n)\n== true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.equal Int.equal String.equal Char.equal (1, \"Fox\", 'j') (2, \"Hen\", 'j') = false",
                            "reason": "Tuple3.equal(\n  Int.equal,\n  String.equal,\n  Char.equal,\n  (1, \"Fox\", 'j'),\n  (2, \"Hen\", 'j'),\n)\n== false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "Tuple3.compare",
                  "type": {
                    "rendered": "('a -> 'a -> int) ->\n  ('b -> 'b -> int) ->\n  ('c -> 'c -> int) -> ('a, 'b, 'c) Tuple3.t -> ('a, 'b, 'c) Tuple3.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s, using the provided functions to compare the first\n    components then, if the first components are equal, the second components,\n    then the third components"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.compare Int.compare String.compare Char.compare (1, \"Fox\", 'j') (1, \"Fox\", 'j') = 0",
                            "reason": "Tuple3.compare(\n  Int.compare,\n  String.compare,\n  Char.compare,\n  (1, \"Fox\", 'j'),\n  (1, \"Fox\", 'j'),\n)\n== 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.compare Int.compare String.compare Char.compare (1, \"Fox\", 'j') (1, \"Eel\", 'j') = 1",
                            "reason": "Tuple3.compare(\n  Int.compare,\n  String.compare,\n  Char.compare,\n  (1, \"Fox\", 'j'),\n  (1, \"Eel\", 'j'),\n)\n== 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple3.compare Int.compare String.compare Char.compare (1, \"Fox\", 'j') (2, \"Fox\", 'm') = -1",
                            "reason": "Tuple3.compare(\n  Int.compare,\n  String.compare,\n  Char.compare,\n  (1, \"Fox\", 'j'),\n  (2, \"Fox\", 'm'),\n)\n== (-1);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Tuple2": {
        "tag": "Module",
        "value": {
          "name": "Tuple2",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for manipulating pairs of values"
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('a, 'b)",
                  "is_private": false,
                  "father": "Tuple2",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "'a * 'b"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "make",
                  "qualified_name": "Tuple2.make",
                  "type": {
                    "rendered": "'a -> 'b -> 'a * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a two-tuple with the given values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The values do not have to be of the same type."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.make 3 \"Clementine\" = (3, \"Clementine\")",
                            "reason": "Tuple2.make(3, \"Clementine\") == (3, \"Clementine\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "Tuple2.fromArray",
                  "type": {
                    "rendered": "'a array -> ('a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a tuple from the first two elements of an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the array is longer than two elements, the extra elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the array is less than two elements, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromArray [|1; 2|] = Some (1, 2)",
                            "reason": "Tuple2.fromArray([|1, 2|]) == Some((1, 2));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromArray [|1|] = None",
                            "reason": "Tuple2.fromArray([|1|]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromArray [|4; 5; 6|] = Some (4, 5)",
                            "reason": "Tuple2.fromArray([|4, 5, 6|]) == Some((4, 5));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_array",
                  "qualified_name": "Tuple2.from_array",
                  "type": {
                    "rendered": "'a array -> ('a * 'a) option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "Tuple2.fromList",
                  "type": {
                    "rendered": "'a list -> ('a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a tuple from the first two elements of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is longer than two elements, the extra elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is less than two elements, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromList [1; 2] = Some (1, 2)",
                            "reason": "Tuple2.fromList([1, 2]) == Some((1, 2));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromList [1] = None",
                            "reason": "Tuple2.fromList([1]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.fromList [4; 5; 6] = Some (4, 5)",
                            "reason": "Tuple2.fromList([4, 5, 6]) == Some((4, 5));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_list",
                  "qualified_name": "Tuple2.from_list",
                  "type": {
                    "rendered": "'a list -> ('a * 'a) option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "first",
                  "qualified_name": "Tuple2.first",
                  "type": {
                    "rendered": "'a * 'b -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the first value from a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.first (3, 4) = 3",
                            "reason": "Tuple2.first((3, 4)) == 3;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.first (\"john\", \"doe\") = \"john\"",
                            "reason": "Tuple2.first((\"john\", \"doe\")) == \"john\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "second",
                  "qualified_name": "Tuple2.second",
                  "type": {
                    "rendered": "'a * 'b -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract the second value from a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.second (3, 4) = 4",
                            "reason": "Tuple2.second((3, 4)) == 4;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.second (\"john\", \"doe\") = \"doe\"",
                            "reason": "Tuple2.second((\"john\", \"doe\")) == \"doe\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapFirst",
                  "qualified_name": "Tuple2.mapFirst",
                  "type": {
                    "rendered": "'a * 'b -> f:('a -> 'x) -> 'x * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple2.first",
                            "reference": {
                              "kind": "VAL",
                              "target": "Tuple2.first",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple2.first"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " value in a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapFirst ~f:String.reverse (\"stressed\", 16) = (\"desserts\", 16)",
                            "reason": "Tuple2.mapFirst(~f=String.reverse, (\"stressed\", 16)) == (\"desserts\", 16);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapFirst ~f:String.length (\"stressed\", 16) = (8, 16)",
                            "reason": "Tuple2.mapFirst(~f=String.length, (\"stressed\", 16)) == (8, 16);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_first",
                  "qualified_name": "Tuple2.map_first",
                  "type": {
                    "rendered": "'a * 'b -> f:('a -> 'x) -> 'x * 'b"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapSecond",
                  "qualified_name": "Tuple2.mapSecond",
                  "type": {
                    "rendered": "'a * 'b -> f:('b -> 'c) -> 'a * 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the second value in a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapSecond ~f:Float.squareRoot (\"stressed\", 16.) = (\"stressed\", 4.)",
                            "reason": "Tuple2.mapSecond(~f=Float.squareRoot, (\"stressed\", 16.)) == (\"stressed\", 4.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapSecond ~f:(~-) (\"stressed\", 16) = (\"stressed\", -16)",
                            "reason": "Tuple2.mapSecond(~f=(~-), (\"stressed\", 16)) == (\"stressed\", (-16));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_second",
                  "qualified_name": "Tuple2.map_second",
                  "type": {
                    "rendered": "'a * 'b -> f:('b -> 'c) -> 'a * 'c"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapEach",
                  "qualified_name": "Tuple2.mapEach",
                  "type": {
                    "rendered": "'a * 'b -> f:('a -> 'x) -> g:('b -> 'y) -> 'x * 'y"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform both values of a tuple, using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " for the first value and "
                        },
                        {
                          "tag": "Code",
                          "value": "g"
                        },
                        {
                          "tag": "Raw",
                          "value": " for the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapEach ~f:String.reverse ~g:Float.squareRoot (\"stressed\", 16.) = (\"desserts\", 4.)",
                            "reason": "Tuple2.mapEach(~f=String.reverse, ~g=Float.squareRoot, (\"stressed\", 16.))\n== (\"desserts\", 4.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapEach ~f:String.length ~g:(~-) (\"stressed\", 16) = (8, -16)",
                            "reason": "Tuple2.mapEach(~f=String.length, ~g=(~-), (\"stressed\", 16)) == (8, (-16));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_each",
                  "qualified_name": "Tuple2.map_each",
                  "type": {
                    "rendered": "'a * 'b -> f:('a -> 'x) -> g:('b -> 'y) -> 'x * 'y"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapAll",
                  "qualified_name": "Tuple2.mapAll",
                  "type": {
                    "rendered": "'a * 'a -> f:('a -> 'b) -> 'b * 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform both of the values of a tuple using the same function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "mapAll"
                        },
                        {
                          "tag": "Raw",
                          "value": " can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapAll ~f:(Int.add 1) (3, 4, 5) = (4, 5, 6)",
                            "reason": "Tuple2.mapAll(~f=Int.add(1), (3, 4, 5)) == (4, 5, 6);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.mapAll ~f:String.length (\"was\", \"stressed\") = (3, 8)",
                            "reason": "Tuple2.mapAll(~f=String.length, (\"was\", \"stressed\")) == (3, 8);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_all",
                  "qualified_name": "Tuple2.map_all",
                  "type": {
                    "rendered": "'a * 'a -> f:('a -> 'b) -> 'b * 'b"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "swap",
                  "qualified_name": "Tuple2.swap",
                  "type": {
                    "rendered": "'a * 'b -> 'b * 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Switches the first and second values of a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.swap (3, 4) = (4, 3)",
                            "reason": "Tuple2.swap((3, 4)) == (4, 3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.swap (\"stressed\", 16) = (16, \"stressed\")",
                            "reason": "Tuple2.swap((\"stressed\", 16)) == (16, \"stressed\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "Tuple2.toArray",
                  "type": {
                    "rendered": "'a * 'a -> 'a array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Turns a tuple into an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of length two."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This function can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.toArray (3, 4) = [|3; 4|]",
                            "reason": "Tuple2.toArray((3, 4)) == [|3, 4|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.toArray (\"was\", \"stressed\") = [|\"was\"; \"stressed\"|]",
                            "reason": "Tuple2.toArray((\"was\", \"stressed\")) == [|\"was\", \"stressed\"|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "Tuple2.to_array",
                  "type": {
                    "rendered": "'a * 'a -> 'a array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "Tuple2.toList",
                  "type": {
                    "rendered": "'a * 'a -> 'a list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Turns a tuple into a list of length two. This function can only be used on tuples which have the same type for each value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.toList (3, 4) = [3; 4]",
                            "reason": "Tuple2.toList((3, 4)) == [3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.toList (\"was\", \"stressed\") = [\"was\"; \"stressed\"]",
                            "reason": "Tuple2.toList((\"was\", \"stressed\")) == [\"was\", \"stressed\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "Tuple2.to_list",
                  "type": {
                    "rendered": "'a * 'a -> 'a list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "Tuple2.equal",
                  "type": {
                    "rendered": "('a -> 'a -> bool) ->\n  ('b -> 'b -> bool) -> ('a, 'b) Tuple2.t -> ('a, 'b) Tuple2.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple2",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s for equality, using the provided functions to test the\n    first and second components."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.equal Int.equal String.equal (1, \"Fox\") (1, \"Fox\") = true",
                            "reason": "Tuple2.equal(Int.equal, String.equal, (1, \"Fox\"), (1, \"Fox\")) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.equal Int.equal String.equal (1, \"Fox\") (2, \"Hen\") = false",
                            "reason": "Tuple2.equal(Int.equal, String.equal, (1, \"Fox\"), (2, \"Hen\")) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "Tuple2.compare",
                  "type": {
                    "rendered": "('a -> 'a -> int) ->\n  ('b -> 'b -> int) -> ('a, 'b) Tuple2.t -> ('a, 'b) Tuple2.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple2",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s, using the provided functions to compare the first\n    components then, if the first components are equal, the second components."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.compare Int.compare String.compare (1, \"Fox\") (1, \"Fox\") = 0",
                            "reason": "Tuple2.compare(Int.compare, String.compare, (1, \"Fox\"), (1, \"Fox\")) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.compare Int.compare String.compare (1, \"Fox\") (1, \"Eel\") = 1",
                            "reason": "Tuple2.compare(Int.compare, String.compare, (1, \"Fox\"), (1, \"Eel\")) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Tuple2.compare Int.compare String.compare (1, \"Fox\") (2, \"Hen\") = -1",
                            "reason": "Tuple2.compare(Int.compare, String.compare, (1, \"Fox\"), (2, \"Hen\")) == (-1);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothSet": {
        "tag": "Module",
        "value": {
          "name": "TableclothSet",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "A "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " represents a collection of unique values."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Code",
                    "value": "Set"
                  },
                  {
                    "tag": "Raw",
                    "value": " is an immutable data structure which means operations like "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.add",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.add",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.add"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.remove",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.remove",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.remove"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " do not modify the data structure, but return a new set with the desired changes."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Since sets of "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": "s and "
                  },
                  {
                    "tag": "Code",
                    "value": "string"
                  },
                  {
                    "tag": "Raw",
                    "value": "s are so common the specialised "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.Int",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.Int",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.Int"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.String",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.String",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.String"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " modules are available which offer a convenient way to construct new sets."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Custom data types can be used with sets as long as the module satisfies the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.S",
                      "reference": {
                        "kind": "MODULETYPE",
                        "target": "Comparator.S",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.S"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " interface."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      module Point = struct\n        type t = int * int\n        let compare = Tuple2.compare Int.compare Int.compare\n        include Comparator.Make(struct\n          type nonrec t = t\n          let compare = compare\n        end)\n      end\n\n      let points : Set.Of(Point).t = Set.fromList (module Points) [(0, 0); (3, 4); (6, 7)]\n    ",
                      "reason": "module Point = {\n  type t = (int, int);\n  let compare = Tuple2.compare(Int.compare, Int.compare);\n  include Comparator.Make({\n    type nonrec t = t;\n    let compare = compare;\n  });\n};\n\nlet points: Set.Of(Point).t = (\n  Set.fromList((module Points), [(0, 0), (3, 4), (6, 7)]): Set.Of(Point).t\n);\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    See the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator",
                      "reference": {
                        "kind": "MODULE",
                        "target": "Comparator",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " module for a more details."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('a, 'id)",
                  "is_private": false,
                  "father": "TableclothSet",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "('a, 'id) Base.Set.t"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Of",
                  "kind": {
                    "tag": "ModuleFunctor",
                    "value": {
                      "parameter": {
                        "tag": "ModuleParameter",
                        "value": {
                          "name": "M",
                          "kind": {
                            "tag": "ModuleTypeAlias",
                            "value": "Comparator.S"
                          }
                        }
                      },
                      "result": {
                        "tag": "ModuleStruct",
                        "value": [
                          {
                            "tag": "Type",
                            "value": {
                              "name": "t",
                              "parameters": "",
                              "is_private": false,
                              "father": "TableclothSet.Of",
                              "field_comment": null,
                              "kind": {
                                "tag": "TypeAbstract",
                                "value": null
                              },
                              "manifest": {
                                "tag": "Other",
                                "value": {
                                  "rendered": "(M.t, M.identity) TableclothSet.t"
                                }
                              },
                              "info": null
                            }
                          }
                        ]
                      }
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This functor lets you describe the type of Sets a little more concisely."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let names : Set.Of(String).t =\n        Set.fromList (module String) [\"Andrew\"; \"Tina\"]\n    ",
                            "reason": "let names: Set.Of(String).t = (\n  Set.fromList((module String), [\"Andrew\", \"Tina\"]): Set.Of(String).t\n);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Is the same as"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let names : (string, String.identity) Set.t =\n        Set.fromList (module String) [\"Andrew\"; \"Tina\"]\n    ",
                            "reason": "let names: Set.t(string, String.identity) = (\n  Set.fromList((module String), [\"Andrew\", \"Tina\"]):\n    Set.t(string, String.identity)\n);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "  "
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n  You can create a Set by providing a module conform to the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.S",
                      "reference": {
                        "kind": "MODULETYPE",
                        "target": "Comparator.S",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.S"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " signature by using "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.empty",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.empty",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.empty"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.singleton",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.singleton",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.singleton"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.fromList",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.fromList",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.fromList"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " or "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.fromArray",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.fromArray",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.fromArray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n  Specialised versions of the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.empty",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.empty",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.empty"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.singleton",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.singleton",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.singleton"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.fromList",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.fromList",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.fromList"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothSet.fromArray",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothSet.fromArray",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothSet.fromArray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " functions available in the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.Int",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.Int",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.Int"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.String",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.String",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.String"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " sub-modules."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "empty",
                  "qualified_name": "TableclothSet.empty",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A set with nothing in it. "
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Often used as an initial value for functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.fold",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.fold \n        [|'m'; 'i'; 's'; 's'; 'i'; 's'; 's';'i';'p';'p';'i'|] \n        ~intial:(Set.empty (module Char))\n        ~f:Set.add\n      |> Set.toArray\n      = [|'i'; 'm'; 'p'; 's'|] \n    ",
                            "reason": "Array.fold(\n  [|'m', 'i', 's', 's', 'i', 's', 's', 'i', 'p', 'p', 'i'|],\n  ~intial=Set.empty((module Char)),\n  ~f=Set.add,\n)\n|> Set.toArray == [|'i', 'm', 'p', 's'|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "singleton",
                  "qualified_name": "TableclothSet.singleton",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> 'a -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a set from a single "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.singleton (module Int) 7 |> Set.toList = [7]",
                            "reason": "Set.singleton((module Int), 7) |> Set.toList == [7];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "TableclothSet.fromArray",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> 'a array -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a set from an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.fromArray (module String) [|\"Ant\"; \"Bat\"; \"Bat\"; \"Goldfish\"|] |> Set.toArray = [|\"Ant\";\"Bat\";\"Goldfish\"|]",
                            "reason": "Set.fromArray((module String), [|\"Ant\", \"Bat\", \"Bat\", \"Goldfish\"|])\n|> Set.toArray == [|\"Ant\", \"Bat\", \"Goldfish\"|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_array",
                  "qualified_name": "TableclothSet.from_array",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> 'a array -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "TableclothSet.fromList",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> 'a list -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a set from a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.fromList (module Char) ['A'; 'B'; 'B'; 'G'] |> Set.toList = ['A';'B';'G']",
                            "reason": "Set.fromList((module Char), ['A', 'B', 'B', 'G'])\n|> Set.toList == ['A', 'B', 'G'];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_list",
                  "qualified_name": "TableclothSet.from_list",
                  "type": {
                    "rendered": "('a, 'identity) Comparator.s -> 'a list -> ('a, 'identity) TableclothSet.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "add",
                  "qualified_name": "TableclothSet.add",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t -> 'a -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Insert a value into a set."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.add (Set.Int.fromList [1; 2]) 3 |> Set.toList = [1; 2; 3]",
                            "reason": "Set.add(Set.Int.fromList([1, 2]), 3) |> Set.toList == [1, 2, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.add (Set.Int.fromList [1; 2]) 2 |> Set.toList = [1; 2]",
                            "reason": "Set.add(Set.Int.fromList([1, 2]), 2) |> Set.toList == [1, 2];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "remove",
                  "qualified_name": "TableclothSet.remove",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t -> 'a -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Remove a value from a set, if the set doesn't contain the value anyway, returns the original set"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.remove (Set.Int.fromList [1; 2]) 2 |> Set.toList = [1]",
                            "reason": "Set.remove(Set.Int.fromList([1, 2]), 2) |> Set.toList == [1];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let originalSet = Set.Int.fromList [1; 2] in\n      let newSet = Set.remove orignalSet 3 in\n      originalSet = newSet\n    ",
                            "reason": "{\n  let originalSet = Set.Int.fromList([1, 2]);\n  let newSet = Set.remove(orignalSet, 3);\n  originalSet == newSet;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "includes",
                  "qualified_name": "TableclothSet.includes",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> 'a -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if a value is in a set"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.includes (Set.String.fromList [\"Ant\"; \"Bat\"; \"Cat\"]) \"Bat\" = true",
                            "reason": "Set.includes(Set.String.fromList([\"Ant\", \"Bat\", \"Cat\"]), \"Bat\") == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(.?{})",
                  "qualified_name": "TableclothSet.(.?{})",
                  "type": {
                    "rendered": "('element, 'a) TableclothSet.t -> 'element -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://caml.inria.fr/pub/docs/manual-ocaml/indexops.html ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " index operator"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothSet.includes",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothSet.includes",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothSet.includes"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " Currently this is only supported by the OCaml syntax."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = Set.String.fromList [\"Ant\"; \"Bat\"; \"Cat\"] in\n\n      animals.Set.?{\"Emu\"} = false\n    ",
                            "reason": "{\n  let animals = Set.String.fromList([\"Ant\", \"Bat\", \"Cat\"]);\n\n  Set..?{}(animals, \"Emu\") == false;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "length",
                  "qualified_name": "TableclothSet.length",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine the number of elements in a set."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.length (Set.Int.fromList [1; 2; 3]) = 3",
                            "reason": "Set.length(Set.Int.fromList([1, 2, 3])) == 3;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find",
                  "qualified_name": "TableclothSet.find",
                  "type": {
                    "rendered": "('value, 'a) TableclothSet.t -> f:('value -> bool) -> 'value option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the first element for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " evaluates to "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": ". If "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " doesn't return "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for any of the elements "
                        },
                        {
                          "tag": "Code",
                          "value": "find"
                        },
                        {
                          "tag": "Raw",
                          "value": " will return "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.find ~f:Int.isEven (Set.Int.fromList [1; 3; 4; 8]) = Some 4",
                            "reason": "Set.find(~f=Int.isEven, Set.Int.fromList([1, 3, 4, 8])) == Some(4);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.find ~f:Int.isOdd (Set.Int.fromList [0; 2; 4; 8]) = None",
                            "reason": "Set.find(~f=Int.isOdd, Set.Int.fromList([0, 2, 4, 8])) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.find ~f:Int.isEven Set.Int.empty = None",
                            "reason": "Set.find(~f=Int.isEven, Set.Int.empty) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEmpty",
                  "qualified_name": "TableclothSet.isEmpty",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if a set is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.isEmpty (Set.Int.empty) = true",
                            "reason": "Set.isEmpty(Set.Int.empty) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.isEmpty (Set.Int.singleton 4) = false",
                            "reason": "Set.isEmpty(Set.Int.singleton(4)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_empty",
                  "qualified_name": "TableclothSet.is_empty",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "any",
                  "qualified_name": "TableclothSet.any",
                  "type": {
                    "rendered": "('value, 'a) TableclothSet.t -> f:('value -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "any"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a set."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.any (Set.Int.fromArray [|2;3|]) ~f:Int.isEven = true",
                            "reason": "Set.any(Set.Int.fromArray([|2, 3|]), ~f=Int.isEven) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.any (Set.Int.fromList [1;3]) ~f:Int.isEven = false",
                            "reason": "Set.any(Set.Int.fromList([1, 3]), ~f=Int.isEven) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.any (Set.Int.fromList []) ~f:Int.isEven = false",
                            "reason": "Set.any(Set.Int.fromList([]), ~f=Int.isEven) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "all",
                  "qualified_name": "TableclothSet.all",
                  "type": {
                    "rendered": "('value, 'a) TableclothSet.t -> f:('value -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "all"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a set."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.all ~f:Int.isEven (Set.Int.fromArray [|2;4|]) = true",
                            "reason": "Set.all(~f=Int.isEven, Set.Int.fromArray([|2, 4|])) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.all ~f:Int.isEven (Set.Int.fromLis [2;3]) = false",
                            "reason": "Set.all(~f=Int.isEven, Set.Int.fromLis([2, 3])) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.all ~f:Int.isEven Set.Int.empty = true",
                            "reason": "Set.all(~f=Int.isEven, Set.Int.empty) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Combine"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "difference",
                  "qualified_name": "TableclothSet.difference",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t ->\n  ('a, 'id) TableclothSet.t -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns a new set with the values from the first set which are not in the second set."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.difference (Set.Int.fromList [1;2;5]) (Set.Int.fromList [2;3;4]) |> Set.toList = [1;5]",
                            "reason": "Set.difference(Set.Int.fromList([1, 2, 5]), Set.Int.fromList([2, 3, 4]))\n|> Set.toList == [1, 5];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.difference (Set.Int.fromList [2;3;4]) (Set.Int.fromList [1;2;5]) |> Set.toList = [3;4]",
                            "reason": "Set.difference(Set.Int.fromList([2, 3, 4]), Set.Int.fromList([1, 2, 5]))\n|> Set.toList == [3, 4];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "intersection",
                  "qualified_name": "TableclothSet.intersection",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t ->\n  ('a, 'id) TableclothSet.t -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the intersection of two sets. Keeps values that appear in both sets."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.intersection (Set.Int.fromList [1;2;5]) (Set.Int.fromList [2;3;4]) |> Set.toList= [2]",
                            "reason": "Set.intersection(Set.Int.fromList([1, 2, 5]), Set.Int.fromList([2, 3, 4]))\n|> Set.toList == [2];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "union",
                  "qualified_name": "TableclothSet.union",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t ->\n  ('a, 'id) TableclothSet.t -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the union of two sets. Keep all values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.union (Set.Int.fromList [1;2;5]) (Set.Int.fromList [2;3;4]) |> Set.toList = [1;2;3;4;5]",
                            "reason": "Set.union(Set.Int.fromList([1, 2, 5]), Set.Int.fromList([2, 3, 4]))\n|> Set.toList == [1, 2, 3, 4, 5];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter",
                  "qualified_name": "TableclothSet.filter",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t -> f:('a -> bool) -> ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Keep elements that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.filter (Set.Int.fromList [1;2;3]) ~f:Int.isEven |> Set.toList = [2]",
                            "reason": "Set.filter(Set.Int.fromList([1, 2, 3]), ~f=Int.isEven) |> Set.toList == [2];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "partition",
                  "qualified_name": "TableclothSet.partition",
                  "type": {
                    "rendered": "('a, 'id) TableclothSet.t ->\n  f:('a -> bool) -> ('a, 'id) TableclothSet.t * ('a, 'id) TableclothSet.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divide a set into two according to "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": ". The first set will contain the values that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for, values that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Raw",
                          "value": " for will end up in the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = Set.Int.fromList [1; 1; 5; 6; 5; 7; 9; 8] in\n      let (evens, odds) = Set.partition numbers ~f:Int.isEven in\n      Set.toList evens = [6; 8]\n      Set.toList odds = [1; 5; 7; 9]\n    ",
                            "reason": "{\n  let numbers = Set.Int.fromList([1, 1, 5, 6, 5, 7, 9, 8]);\n  let (evens, odds) = Set.partition(numbers, ~f=Int.isEven);\n  Set.toList(evens) == [6, 8](Set.toList, odds) == [1, 5, 7, 9];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold",
                  "qualified_name": "TableclothSet.fold",
                  "type": {
                    "rendered": "('a, 'c) TableclothSet.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform a set into a value which is result of running each element in the set through "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": ", where each successive invocation is supplied the return value of the previous."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.fold",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for a more in-depth explanation."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Set.fold ~f:( * ) ~initial:1 (Set.Int.fromList [1;2;3;4]) = 24",
                            "reason": "Set.fold(~f=( * ), ~initial=1, Set.Int.fromList([1, 2, 3, 4])) == 24;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEach",
                  "qualified_name": "TableclothSet.forEach",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> f:('a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Runs a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " against each element of the set."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each",
                  "qualified_name": "TableclothSet.for_each",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> f:('a -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "TableclothSet.toArray",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> 'a array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a set into an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "TableclothSet.to_array",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> 'a array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "TableclothSet.toList",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> 'a list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a set into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "TableclothSet.to_list",
                  "type": {
                    "rendered": "('a, 'b) TableclothSet.t -> 'a list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Poly",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "identity",
                          "parameters": "",
                          "is_private": false,
                          "father": "TableclothSet.Poly",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": null,
                          "info": null
                        }
                      },
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "'a",
                          "is_private": false,
                          "father": "TableclothSet.Poly",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "('a, TableclothSet.Poly.identity) TableclothSet.t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothSet.Poly.empty",
                          "type": {
                            "rendered": "unit -> 'a TableclothSet.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "The empty set."
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      A great starting point."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothSet.Poly.singleton",
                          "type": {
                            "rendered": "'a -> 'a TableclothSet.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set of a single value"
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Int.singleton (5, \"Emu\") |> Set.toList = [(5, \"Emu\")]",
                                    "reason": "Set.Int.singleton((5, \"Emu\")) |> Set.toList == [(5, \"Emu\")];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothSet.Poly.fromArray",
                          "type": {
                            "rendered": "'a array -> 'a TableclothSet.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Poly.fromArray [(1, \"Ant\");(2, \"Bat\");(2, \"Bat\")] |> Set.toList = [(1, \"Ant\"); (2, \"Bat\")]",
                                    "reason": "Set.Poly.fromArray([(1, \"Ant\"), (2, \"Bat\"), (2, \"Bat\")])\n|> Set.toList == [(1, \"Ant\"), (2, \"Bat\")];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothSet.Poly.from_array",
                          "type": {
                            "rendered": "'a array -> 'a TableclothSet.Poly.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothSet.Poly.fromList",
                          "type": {
                            "rendered": "'a list -> 'a TableclothSet.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n    "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n    "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Poly.fromList [(1, \"Ant\");(2, \"Bat\");(2, \"Bat\")] |> Set.toList = [(1, \"Ant\"); (2, \"Bat\")]",
                                    "reason": "Set.Poly.fromList([(1, \"Ant\"), (2, \"Bat\"), (2, \"Bat\")])\n|> Set.toList == [(1, \"Ant\"), (2, \"Bat\")];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothSet.Poly.from_list",
                          "type": {
                            "rendered": "'a list -> 'a TableclothSet.Poly.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct sets which can hold any data type using the polymorphic "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Int",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "",
                          "is_private": false,
                          "father": "TableclothSet.Int",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "Of(Int).t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothSet.Int.empty",
                          "type": {
                            "rendered": "TableclothSet.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "A set with nothing in it."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothSet.Int.singleton",
                          "type": {
                            "rendered": "int -> TableclothSet.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from a single "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Int",
                                    "reference": {
                                      "kind": "MODULE",
                                      "target": "Int",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Int"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n    "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n    "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Int.singleton 5 |> Set.toList = [5]",
                                    "reason": "Set.Int.singleton(5) |> Set.toList == [5];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothSet.Int.fromArray",
                          "type": {
                            "rendered": "int array -> TableclothSet.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Int.fromArray [|1;2;3;3;2;1;7|] |> Set.toArray = [|1;2;3;7|]",
                                    "reason": "Set.Int.fromArray([|1, 2, 3, 3, 2, 1, 7|]) |> Set.toArray == [|1, 2, 3, 7|];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothSet.Int.from_array",
                          "type": {
                            "rendered": "int array -> TableclothSet.Int.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothSet.Int.fromList",
                          "type": {
                            "rendered": "int list -> TableclothSet.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.Int.fromList [1;2;3;3;2;1;7] |> Set.toList = [1;2;3;7]",
                                    "reason": "Set.Int.fromList([1, 2, 3, 3, 2, 1, 7]) |> Set.toList == [1, 2, 3, 7];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothSet.Int.from_list",
                          "type": {
                            "rendered": "int list -> TableclothSet.Int.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct sets of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "String",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "",
                          "is_private": false,
                          "father": "TableclothSet.String",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "Of(TableclothString).t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothSet.String.empty",
                          "type": {
                            "rendered": "TableclothSet.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "A set with nothing in it."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothSet.String.singleton",
                          "type": {
                            "rendered": "string -> TableclothSet.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set of a single "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "TableclothSet.String",
                                    "reference": {
                                      "kind": "MODULE",
                                      "target": "TableclothSet.String",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "TableclothSet.String"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.String.singleton \"Bat\" |> Set.toList = [\"Bat\"]",
                                    "reason": "Set.String.singleton(\"Bat\") |> Set.toList == [\"Bat\"];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothSet.String.fromArray",
                          "type": {
                            "rendered": "string array -> TableclothSet.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.String.fromArray [|\"a\";\"b\";\"g\";\"b\";\"g\";\"a\";\"a\"|] |> Set.toArray = [|\"a\";\"b\";\"g\"|]",
                                    "reason": "Set.String.fromArray([|\"a\", \"b\", \"g\", \"b\", \"g\", \"a\", \"a\"|])\n|> Set.toArray == [|\"a\", \"b\", \"g\"|];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothSet.String.from_array",
                          "type": {
                            "rendered": "string array -> TableclothSet.String.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothSet.String.fromList",
                          "type": {
                            "rendered": "string list -> TableclothSet.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a set from a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Set.String.fromList [|\"a\";\"b\";\"g\";\"b\";\"g\";\"a\";\"a\"|] |> Set.toList = [\"a\";\"b\";\"g\"]",
                                    "reason": "Set.String.fromList([|\"a\", \"b\", \"g\", \"b\", \"g\", \"a\", \"a\"|])\n|> Set.toList == [\"a\", \"b\", \"g\"];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothSet.String.from_list",
                          "type": {
                            "rendered": "string list -> TableclothSet.String.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct sets of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothSet.String",
                            "reference": {
                              "kind": "MODULE",
                              "target": "TableclothSet.String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothSet.String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothResult": {
        "tag": "Module",
        "value": {
          "name": "TableclothResult",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "A "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Result",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Result",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Result"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " is used to represent a computation which may fail."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    A "
                  },
                  {
                    "tag": "Code",
                    "value": "Result"
                  },
                  {
                    "tag": "Raw",
                    "value": " is a variant, which has a constructor for successful results\n    "
                  },
                  {
                    "tag": "Code",
                    "value": "(Ok 'ok)"
                  },
                  {
                    "tag": "Raw",
                    "value": ", and one for unsuccessful results ("
                  },
                  {
                    "tag": "Code",
                    "value": "(Error 'error)"
                  },
                  {
                    "tag": "Raw",
                    "value": ")."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      type ('ok, 'error) t =\n        | Ok of 'ok\n        | Error of 'error\n    ",
                      "reason": "type t('ok, 'error) =\n  | Ok('ok)\n  | Error('error);\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Here is how you would annotate a "
                  },
                  {
                    "tag": "Code",
                    "value": "Result"
                  },
                  {
                    "tag": "Raw",
                    "value": " variable whose "
                  },
                  {
                    "tag": "Code",
                    "value": "Ok"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    variant is an integer and whose "
                  },
                  {
                    "tag": "Code",
                    "value": "Error"
                  },
                  {
                    "tag": "Raw",
                    "value": " variant is a string:"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "let ok: (int, string) Result.t = Ok 3",
                      "reason": "let ok: Result.t(int, string) = (Ok(3): Result.t(int, string));\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "let error: (int, string) Result.t = Error \"This computation failed!\"",
                      "reason": "let error: Result.t(int, string) = (\n  Error(\"This computation failed!\"): Result.t(int, string)\n);\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Note"
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " The "
                  },
                  {
                    "tag": "Code",
                    "value": "'error"
                  },
                  {
                    "tag": "Raw",
                    "value": " case can be of "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "any"
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " type and while "
                  },
                  {
                    "tag": "Code",
                    "value": "string"
                  },
                  {
                    "tag": "Raw",
                    "value": " is very common you could also use:"
                  },
                  {
                    "tag": "List",
                    "value": [
                      [
                        {
                          "tag": "Code",
                          "value": "string List.t"
                        },
                        {
                          "tag": "Raw",
                          "value": " to allow errors to be accumulated"
                        }
                      ],
                      [
                        {
                          "tag": "Code",
                          "value": "exn"
                        },
                        {
                          "tag": "Raw",
                          "value": ", in which case the result type just makes exceptions explicit in the return type"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "A variant or polymorphic variant, with one case per possible error. This is means each error can be dealt with explicitly. See "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://keleshev.com/composable-error-handling-in-ocaml ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " this excellent article"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for mnore information on this approach."
                        }
                      ]
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    If the function you are writing can only fail in a single obvious way, maybe you want an "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Option",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Option",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Option"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " instead."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('ok, 'error)",
                  "is_private": false,
                  "father": "TableclothResult",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "('ok, 'error) Stdlib.result"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "ok",
                  "qualified_name": "TableclothResult.ok",
                  "type": {
                    "rendered": "'ok -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A function alternative to the "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " constructor which can be used in places where\n    the constructor isn't permitted such as at the of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.(|>)",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.(|>)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.(|>)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.map",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.reverse \"desserts\" |> Result.ok = Ok \"stressed\"",
                            "reason": "String.reverse(\"desserts\") |> Result.ok == Ok(\"stressed\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map [1; 2; 3] ~f:Result.ok = [Ok 1; Ok 2; Ok 3]",
                            "reason": "List.map([1, 2, 3], ~f=Result.ok) == [Ok(1), Ok(2), Ok(3)];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "error",
                  "qualified_name": "TableclothResult.error",
                  "type": {
                    "rendered": "'error -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A function alternative to the "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " constructor which can be used in places where\n    the constructor isn't permitted such as at the of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.pipe",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.pipe",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.pipe"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.map",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    When targetting the Bucklescript compiler you "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "can"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " use constructors with the fast pipe."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "5 |. Ok = (Ok 5)",
                            "reason": "5->Ok == Ok(5);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See the "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://reasonml.github.io/docs/en/pipe-first#pipe-into-variants",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " Reason docs "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for more."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.negate 3 |> Result.error 3 = Error (-3)",
                            "reason": "Int.negate(3) |> Result.error(3) == Error(-3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map [1; 2; 3] ~f:Result.error = [Error 1; Error 2; Error 3]",
                            "reason": "List.map([1, 2, 3], ~f=Result.error) == [Error(1), Error(2), Error(3)];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "attempt",
                  "qualified_name": "TableclothResult.attempt",
                  "type": {
                    "rendered": "(unit -> 'ok) -> ('ok, exn) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Run the provided function and wrap the returned value in a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", catching any exceptions raised."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.attempt (fun () -> 5 / 0) = Error Division_by_zero",
                            "reason": "Result.attempt(() => 5 / 0) == Error(Division_by_zero);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [|1,2,3|] in\n      Result.attempt (fun () -> numbers.(3)) =\n        Error (Invalid_argument \"index out of bounds\")\n    ",
                            "reason": "{\n  let numbers = [|(1, 2, 3)|];\n  Result.attempt(() => numbers[3])\n  == Error(Invalid_argument(\"index out of bounds\"));\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromOption",
                  "qualified_name": "TableclothResult.fromOption",
                  "type": {
                    "rendered": "'ok option -> error:'error -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " where a "
                        },
                        {
                          "tag": "Code",
                          "value": "(Some value)"
                        },
                        {
                          "tag": "Raw",
                          "value": " becomes "
                        },
                        {
                          "tag": "Code",
                          "value": "(Ok value)"
                        },
                        {
                          "tag": "Raw",
                          "value": " and a "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " becomes "
                        },
                        {
                          "tag": "Code",
                          "value": "(Error error)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.ofOption (Some 84) ~error:\"Greater than 100\" = Ok 8",
                            "reason": "Result.ofOption(Some(84), ~error=\"Greater than 100\") == Ok(8);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.ofOption None ~error:\"Greater than 100\" =\n        Error \"Greater than 100\"\n    ",
                            "reason": "Result.ofOption(None, ~error=\"Greater than 100\") == Error(\"Greater than 100\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_option",
                  "qualified_name": "TableclothResult.from_option",
                  "type": {
                    "rendered": "'ok option -> error:'error -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isOk",
                  "qualified_name": "TableclothResult.isOk",
                  "type": {
                    "rendered": "('a, 'b) TableclothResult.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Useful when you want to perform some side affect based on the presence of\n    an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " like logging."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " if you need access to the contained value rather than doing\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "Result.isOk"
                        },
                        {
                          "tag": "Raw",
                          "value": " followed by "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.unwrapUnsafe",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.unwrapUnsafe",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.unwrapUnsafe"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " its safer and just as\n    convenient to use pattern matching directly or use one of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.andThen",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.map",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.isOk (Ok 3) = true",
                            "reason": "Result.isOk(Ok(3)) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.isOk (Error 3) = false",
                            "reason": "Result.isOk(Error(3)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_ok",
                  "qualified_name": "TableclothResult.is_ok",
                  "type": {
                    "rendered": "('a, 'b) TableclothResult.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isError",
                  "qualified_name": "TableclothResult.isError",
                  "type": {
                    "rendered": "('a, 'b) TableclothResult.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Useful when you want to perform some side affect based on the presence of\n    an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " like logging."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " if you need access to the contained value rather than doing\n    "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.isOk",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.isOk",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.isOk"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " followed by "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.unwrapUnsafe",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.unwrapUnsafe",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.unwrapUnsafe"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " its safer and just as\n    convenient to use pattern matching directly or use one of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.andThen",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.map",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.isError (Ok 3) = false",
                            "reason": "Result.isError(Ok(3)) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.isError (Error 3) = true",
                            "reason": "Result.isError(Error(3)) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_error",
                  "qualified_name": "TableclothResult.is_error",
                  "type": {
                    "rendered": "('a, 'b) TableclothResult.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "and_",
                  "qualified_name": "TableclothResult.and_",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t ->\n  ('ok, 'error) TableclothResult.t -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the first argument if it "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothResult.isError",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothResult.isError",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothResult.isError"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", otherwise return the second argument."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Unlike the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Bool.(&&)",
                            "reference": {
                              "kind": "VAL",
                              "target": "Bool.(&&)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Bool.(&&)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " operator, the "
                        },
                        {
                          "tag": "Code",
                          "value": "and_"
                        },
                        {
                          "tag": "Raw",
                          "value": " function does not short-circuit.\n    When you call "
                        },
                        {
                          "tag": "Code",
                          "value": "and_"
                        },
                        {
                          "tag": "Raw",
                          "value": ", both arguments are evaluated before being passed to the function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.and_ (Ok \"Antelope\") (Ok \"Salmon\") = Ok \"Salmon\"",
                            "reason": "Result.and_(Ok(\"Antelope\"), Ok(\"Salmon\")) == Ok(\"Salmon\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.and_\n        (Error (`UnexpectedBird \"Finch\"))\n        (Ok \"Salmon\")\n        = Error (`UnexpectedBird \"Finch\")\n    ",
                            "reason": "Result.and_(Error(`UnexpectedBird(\"Finch\")), Ok(\"Salmon\"))\n== Error(`UnexpectedBird(\"Finch\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.and_\n        (Ok \"Antelope\")\n        (Error (`UnexpectedBird \"Finch\"))\n          = Error (`UnexpectedBird \"Finch\")\n    ",
                            "reason": "Result.and_(Ok(\"Antelope\"), Error(`UnexpectedBird(\"Finch\")))\n== Error(`UnexpectedBird(\"Finch\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.and_\n        (Error (`UnexpectedInvertabrate \"Honey bee\"))\n        (Error (`UnexpectedBird \"Finch\"))\n          = Error (`UnexpectedBird \"Honey Bee\")\n    ",
                            "reason": "Result.and_(\n  Error(`UnexpectedInvertabrate(\"Honey bee\")),\n  Error(`UnexpectedBird(\"Finch\")),\n)\n== Error(`UnexpectedBird(\"Honey Bee\"));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "or_",
                  "qualified_name": "TableclothResult.or_",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t ->\n  ('ok, 'error) TableclothResult.t -> ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return the first argument if it "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothResult.isOk",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothResult.isOk",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothResult.isOk"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", otherwise return the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  Unlike the built in "
                        },
                        {
                          "tag": "Code",
                          "value": "||"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator, the "
                        },
                        {
                          "tag": "Code",
                          "value": "or_"
                        },
                        {
                          "tag": "Raw",
                          "value": " function does not short-circuit.\n  When you call "
                        },
                        {
                          "tag": "Code",
                          "value": "or_"
                        },
                        {
                          "tag": "Raw",
                          "value": ", both arguments are evaluated before being passed to the function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.or_ (Ok \"Boar\") (Ok \"Gecko\") = (Ok \"Boar\")",
                            "reason": "Result.or_(Ok(\"Boar\"), Ok(\"Gecko\")) == Ok(\"Boar\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.or_ (Error (`UnexpectedInvertabrate \"Periwinkle\")) (Ok \"Gecko\") = (Ok \"Gecko\")",
                            "reason": "Result.or_(Error(`UnexpectedInvertabrate(\"Periwinkle\")), Ok(\"Gecko\"))\n== Ok(\"Gecko\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.or_ (Ok \"Boar\") (Error (`UnexpectedInvertabrate \"Periwinkle\")) = (Ok \"Boar\") ",
                            "reason": "Result.or_(Ok(\"Boar\"), Error(`UnexpectedInvertabrate(\"Periwinkle\")))\n== Ok(\"Boar\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.or_ (Error (`UnexpectedInvertabrate \"Periwinkle\")) (Error (`UnexpectedBird \"Robin\")) = (Error (`UnexpectedBird \"Robin\"))",
                            "reason": "Result.or_(\n  Error(`UnexpectedInvertabrate(\"Periwinkle\")),\n  Error(`UnexpectedBird(\"Robin\")),\n)\n== Error(`UnexpectedBird(\"Robin\"));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "both",
                  "qualified_name": "TableclothResult.both",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  ('b, 'error) TableclothResult.t -> ('a * 'b, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two results, if both are "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " containing a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If either is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": ", returns the "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The same as writing "
                        },
                        {
                          "tag": "Code",
                          "value": "Result.map2 ~f:Tuple.make"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.both (Ok \"Badger\") (Ok \"Rhino\") = Ok (\"Dog\", \"Rhino\")",
                            "reason": "Result.both(Ok(\"Badger\"), Ok(\"Rhino\"))\n== [@implicit_arity] Ok(\"Dog\", \"Rhino\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.both (Error (`UnexpectedBird \"Flamingo\")) (Ok \"Rhino\") =\n        (Error (`UnexpectedBird \"Flamingo\"))\n    ",
                            "reason": "Result.both(Error(`UnexpectedBird(\"Flamingo\")), Ok(\"Rhino\"))\n== Error(`UnexpectedBird(\"Flamingo\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.both\n        (Ok \"Badger\")\n        (Error (`UnexpectedInvertabrate \"Blue ringed octopus\")) =\n          (Error (`UnexpectedInvertabrate \"Blue ringed octopus\"))\n    ",
                            "reason": "Result.both(\n  Ok(\"Badger\"),\n  Error(`UnexpectedInvertabrate(\"Blue ringed octopus\")),\n)\n== Error(`UnexpectedInvertabrate(\"Blue ringed octopus\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.both\n        (Error (`UnexpectedBird \"Flamingo\"))\n        (Error (`UnexpectedInvertabrate \"Blue ringed octopus\")) =\n          (Error (`UnexpectedBird \"Flamingo\"))\n    ",
                            "reason": "Result.both(\n  Error(`UnexpectedBird(\"Flamingo\")),\n  Error(`UnexpectedInvertabrate(\"Blue ringed octopus\")),\n)\n== Error(`UnexpectedBird(\"Flamingo\"));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatten",
                  "qualified_name": "TableclothResult.flatten",
                  "type": {
                    "rendered": "(('ok, 'error) TableclothResult.t, 'error) TableclothResult.t ->\n  ('ok, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Collapse a nested result, removing one layer of nesting."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.flatten (Ok (Ok 2)) = Ok 2",
                            "reason": "Result.flatten(Ok(Ok(2))) == Ok(2);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.flatten (Ok (Error (`UnexpectedBird \"Peregrin falcon\"))) =\n        (Error (`UnexpectedBird \"Peregrin falcon\"))\n    ",
                            "reason": "Result.flatten(Ok(Error(`UnexpectedBird(\"Peregrin falcon\"))))\n== Error(`UnexpectedBird(\"Peregrin falcon\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.flatten (Error (`UnexpectedInvertabrate \"Woodlouse\")) =\n        (Error (`UnexpectedInvertabrate \"Woodlouse\"))\n    ",
                            "reason": "Result.flatten(Error(`UnexpectedInvertabrate(\"Woodlouse\")))\n== Error(`UnexpectedInvertabrate(\"Woodlouse\"));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrap",
                  "qualified_name": "TableclothResult.unwrap",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t -> default:'ok -> 'ok"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Unwrap a Result using the "
                        },
                        {
                          "tag": "Code",
                          "value": "~default"
                        },
                        {
                          "tag": "Raw",
                          "value": " value in case of an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.unwrap ~default:0 (Ok 12) = 12",
                            "reason": "Result.unwrap(~default=0, Ok(12)) == 12;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.unwrap ~default:0 ((Error (`UnexpectedBird \"Ostrich\"))) = 0",
                            "reason": "Result.unwrap(~default=0, Error(`UnexpectedBird(\"Ostrich\"))) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrapUnsafe",
                  "qualified_name": "TableclothResult.unwrapUnsafe",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> 'ok"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Unwrap a Result, raising an exception in case of an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Emphasize",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Exceptions"
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument \"Result.unwrapUnsafe called with an Error\""
                        },
                        {
                          "tag": "Raw",
                          "value": " exception."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.unwrapUnsafe (Ok 12) = 12",
                            "reason": "Result.unwrapUnsafe(Ok(12)) == 12;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.unwrapUnsafe (Error \"bad\") ",
                            "reason": "Result.unwrapUnsafe(Error(\"bad\"));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrap_unsafe",
                  "qualified_name": "TableclothResult.unwrap_unsafe",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> 'ok"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrapError",
                  "qualified_name": "TableclothResult.unwrapError",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t -> default:'error -> 'error"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.unwrap",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.unwrap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.unwrap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but unwraps an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " value instead"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.unwrapError\n        (Error (`UnexpectedBird \"Swallow\"))\n        ~default:(`UnexpectedInvertabrate \"Ladybird\") =\n          `UnexpectedBird \"Swallow\"\n    ",
                            "reason": "Result.unwrapError(\n  Error(`UnexpectedBird(\"Swallow\")),\n  ~default=`UnexpectedInvertabrate(\"Ladybird\"),\n)\n== `UnexpectedBird(\"Swallow\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.unwrapError\n        (Ok 5)\n        ~default:(`UnexpectedInvertabrate \"Ladybird\") =\n          `UnexpectedInvertabrate \"Ladybird\"\n    ",
                            "reason": "Result.unwrapError(Ok(5), ~default=`UnexpectedInvertabrate(\"Ladybird\"))\n== `UnexpectedInvertabrate(\"Ladybird\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrap_error",
                  "qualified_name": "TableclothResult.unwrap_error",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t -> default:'error -> 'error"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map2",
                  "qualified_name": "TableclothResult.map2",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  ('b, 'error) TableclothResult.t ->\n  f:('a -> 'b -> 'c) -> ('c, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two results"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one of the results is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": ", that becomes the return result."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If both are "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " values, returns its first."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map2 (Ok 7) (Ok 3) ~f:Int.add = Ok 10",
                            "reason": "Result.map2(Ok(7), Ok(3), ~f=Int.add) == Ok(10);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map2 (Error \"A\") (Ok 3) ~f:Int.add = Error \"A\"",
                            "reason": "Result.map2(Error(\"A\"), Ok(3), ~f=Int.add) == Error(\"A\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map2 (Ok 7) (Error \"B\") ~f:Int.add = Error \"B\"",
                            "reason": "Result.map2(Ok(7), Error(\"B\"), ~f=Int.add) == Error(\"B\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map2 (Error \"A\") (Error \"B\") ~f:Int.add = Error \"A\"",
                            "reason": "Result.map2(Error(\"A\"), Error(\"B\"), ~f=Int.add) == Error(\"A\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "values",
                  "qualified_name": "TableclothResult.values",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t list ->\n  ('ok list, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "If all of the elements of a list are "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": ", returns an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " of the the list of unwrapped values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "any"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " of the elements are an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": ", the first one encountered is returned."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.values [Ok 1; Ok 2; Ok 3; Ok 4] = Ok [1; 2; 3; 4]",
                            "reason": "Result.values([Ok(1), Ok(2), Ok(3), Ok(4)]) == Ok([1, 2, 3, 4]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.values [Ok 1; Error \"two\"; Ok 3; Error \"four\"] = Error \"two\"",
                            "reason": "Result.values([Ok(1), Error(\"two\"), Ok(3), Error(\"four\")])\n== Error(\"two\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map",
                  "qualified_name": "TableclothResult.map",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  f:('a -> 'b) -> ('b, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transforms the "
                        },
                        {
                          "tag": "Code",
                          "value": "'ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " in a result using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": ". Leaves the "
                        },
                        {
                          "tag": "Code",
                          "value": "'error"
                        },
                        {
                          "tag": "Raw",
                          "value": " untouched."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map (Ok 3) ~f:(Int.add 1) = Ok 9",
                            "reason": "Result.map(Ok(3), ~f=Int.add(1)) == Ok(9);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.map (Error \"three\") ~f:(Int.add 1) = Error \"three\"",
                            "reason": "Result.map(Error(\"three\"), ~f=Int.add(1)) == Error(\"three\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapError",
                  "qualified_name": "TableclothResult.mapError",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> f:('a -> 'b) -> ('ok, 'b) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transforms the value in an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": ". Leaves an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " untouched."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.mapError (Ok 3) ~f:String.reverse = Ok 3",
                            "reason": "Result.mapError(Ok(3), ~f=String.reverse) == Ok(3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.mapError (Error \"bad\") ~f:(Int.add 1)  = Error \"bad\"",
                            "reason": "Result.mapError(Error(\"bad\"), ~f=Int.add(1)) == Error(\"bad\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_error",
                  "qualified_name": "TableclothResult.map_error",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> f:('a -> 'b) -> ('ok, 'b) TableclothResult.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "andThen",
                  "qualified_name": "TableclothResult.andThen",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  f:('a -> ('b, 'error) TableclothResult.t) -> ('b, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Run a function which may fail on a result."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Short-circuits of called with an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let reciprical (x:float) : (string, float) Standard.Result.t = (\n        if (x = 0.0) then\n          Error \"Divide by zero\"\n        else\n          Ok (1.0 /. x)\n      )\n\n      let root (x:float) : (string, float) Standard.Result.t = (\n        if (x < 0.0) then\n          Error \"Cannot be negative\"\n        else\n          Ok (Float.squareRoot x)\n      )\n    ",
                            "reason": "let reciprical = (x: float): Standard.Result.t(string, float) =>\n  if (x == 0.0) {\n    Error(\"Divide by zero\");\n  } else {\n    Ok(1.0 /. x);\n  };\n\nlet root = (x: float): Standard.Result.t(string, float) =>\n  if (x < 0.0) {\n    Error(\"Cannot be negative\");\n  } else {\n    Ok(Float.squareRoot(x));\n  };\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen ~f:reciprical (Ok 4.0) = Ok 0.25",
                            "reason": "Result.andThen(~f=reciprical, Ok(4.0)) == Ok(0.25);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen ~f:reciprical (Error \"Missing number!\") = Error \"Missing number!\"",
                            "reason": "Result.andThen(~f=reciprical, Error(\"Missing number!\"))\n== Error(\"Missing number!\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen ~f:reciprical (Ok 0.0) = Error \"Divide by zero\"",
                            "reason": "Result.andThen(~f=reciprical, Ok(0.0)) == Error(\"Divide by zero\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen (Ok 4.0) ~f:root  |> Result.andThen ~f:reciprical = Ok 0.5",
                            "reason": "Result.andThen(Ok(4.0), ~f=root)\n|> Result.andThen(~f=reciprical) == Ok(0.5);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen (Ok -2.0) ~f:root |> Result.andThen ~f:reciprical = Error \"Cannot be negative\"",
                            "reason": "Result.andThen(Ok - 2.0, ~f=root)\n|> Result.andThen(~f=reciprical) == Error(\"Cannot be negative\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.andThen (Ok 0.0) ~f:root |> Result.andThen ~f:reciprical = Error \"Divide by zero\"",
                            "reason": "Result.andThen(Ok(0.0), ~f=root)\n|> Result.andThen(~f=reciprical) == Error(\"Divide by zero\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "and_then",
                  "qualified_name": "TableclothResult.and_then",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  f:('a -> ('b, 'error) TableclothResult.t) -> ('b, 'error) TableclothResult.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tap",
                  "qualified_name": "TableclothResult.tap",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> f:('ok -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Run a function against an "
                        },
                        {
                          "tag": "Code",
                          "value": "(Ok value)"
                        },
                        {
                          "tag": "Raw",
                          "value": ", ignores "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": "s."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Result.tap (Ok \"Dog\") ~f:print_endline\n      (* prints \"Dog\" *)\n    ",
                            "reason": "Result.tap(Ok(\"Dog\"), ~f=print_endline);\n/* prints \"Dog\" */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toOption",
                  "qualified_name": "TableclothResult.toOption",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> 'ok option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    An "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok x"
                        },
                        {
                          "tag": "Raw",
                          "value": " becomes "
                        },
                        {
                          "tag": "Code",
                          "value": "Some x"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    An "
                        },
                        {
                          "tag": "Code",
                          "value": "Error _"
                        },
                        {
                          "tag": "Raw",
                          "value": " becomes "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.toOption (Ok 42) = Some 42",
                            "reason": "Result.toOption(Ok(42)) == Some(42);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.toOption (Error \"Missing number!\") = None",
                            "reason": "Result.toOption(Error(\"Missing number!\")) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_option",
                  "qualified_name": "TableclothResult.to_option",
                  "type": {
                    "rendered": "('ok, 'a) TableclothResult.t -> 'ok option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothResult.equal",
                  "type": {
                    "rendered": "('ok -> 'ok -> bool) ->\n  ('error -> 'error -> bool) ->\n  ('ok, 'error) TableclothResult.t -> ('ok, 'error) TableclothResult.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two results for equality using the provided functions."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.equal String.equal Int.equal (Ok 3) (Ok 3) = true",
                            "reason": "Result.equal(String.equal, Int.equal, Ok(3), Ok(3)) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.equal String.equal Int.equal (Ok 3) (Ok 4) = false",
                            "reason": "Result.equal(String.equal, Int.equal, Ok(3), Ok(4)) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.equal String.equal Int.equal (Error \"Fail\") (Error \"Fail\") = true",
                            "reason": "Result.equal(String.equal, Int.equal, Error(\"Fail\"), Error(\"Fail\")) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.equal String.equal Int.equal (Error \"Expected error\") (Error \"Unexpected error\") = false",
                            "reason": "Result.equal(\n  String.equal,\n  Int.equal,\n  Error(\"Expected error\"),\n  Error(\"Unexpected error\"),\n)\n== false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.equal String.equal Int.equal (Error \"Fail\") (Ok 4) = false",
                            "reason": "Result.equal(String.equal, Int.equal, Error(\"Fail\"), Ok(4)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothResult.compare",
                  "type": {
                    "rendered": "('ok -> 'ok -> int) ->\n  ('error -> 'error -> int) ->\n  ('ok, 'error) TableclothResult.t -> ('ok, 'error) TableclothResult.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare results for using the provided functions."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    In the case when one of the results is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " and one is "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": ", "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": "s  are considered 'less' then "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Ok 3) (Ok 3) = 0",
                            "reason": "Result.compare(String.compare, Int.compare, Ok(3), Ok(3)) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Ok 3) (Ok 4) = -1",
                            "reason": "Result.compare(String.compare, Int.compare, Ok(3), Ok(4)) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Error \"Fail\") (Error \"Fail\") = 0",
                            "reason": "Result.compare(String.compare, Int.compare, Error(\"Fail\"), Error(\"Fail\"))\n== 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Error \"Fail\") (Ok 4) = -1",
                            "reason": "Result.compare(String.compare, Int.compare, Error(\"Fail\"), Ok(4)) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Ok 4) (Error \"Fail\") = 1",
                            "reason": "Result.compare(String.compare, Int.compare, Ok(4), Error(\"Fail\")) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Result.compare String.compare Int.compare (Error \"Expected error\") (Error \"Unexpected error\") = -1",
                            "reason": "Result.compare(\n  String.compare,\n  Int.compare,\n  Error(\"Expected error\"),\n  Error(\"Unexpected error\"),\n)\n== (-1);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Operators"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    In functions that make heavy use of "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Result",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Result",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Result"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "s operators can make code significantly more\n    concise at the expense  of placing a greater cognitive burden on future readers."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(|?)",
                  "qualified_name": "TableclothResult.(|?)",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t -> 'a -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Result.unwrap",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Result.unwrap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Result.unwrap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " where the "
                        },
                        {
                          "tag": "Code",
                          "value": "default"
                        },
                        {
                          "tag": "Raw",
                          "value": " value goes to the right of the operator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The following eamples assume "
                        },
                        {
                          "tag": "Code",
                          "value": "open Result.Infix"
                        },
                        {
                          "tag": "Raw",
                          "value": " is in scope."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Ok 4 |? 8 = 4",
                            "reason": "Ok(4) |? 8 == 4;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Error \"Missing number!\" |? 8 = 8",
                            "reason": "Error(\"Missing number!\") |? 8 == 8;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(>>=)",
                  "qualified_name": "TableclothResult.(>>=)",
                  "type": {
                    "rendered": "('ok, 'error) TableclothResult.t ->\n  ('ok -> ('b, 'error) TableclothResult.t) -> ('b, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothResult.andThen",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothResult.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothResult.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The following examples assume"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      open Result.Infix\n\n      let reciprical (x:float) : (string, float) Standard.Result.t =\n        if (x = 0.0) then\n          Error \"Divide by zero\"\n        else\n          Ok (1.0 /. x)\n    ",
                            "reason": "open Result.Infix;\n\nlet reciprical = (x: float): Standard.Result.t(string, float) =>\n  if (x == 0.0) {\n    Error(\"Divide by zero\");\n  } else {\n    Ok(1.0 /. x);\n  };\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Is in scope."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Ok 4. >>= reciprical = Ok 0.25",
                            "reason": "Ok(4.) >>= reciprical == Ok(0.25);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Error \"Missing number!\" >>= reciprical = Error \"Missing number!\"",
                            "reason": "Error(\"Missing number!\") >>= reciprical == Error(\"Missing number!\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Ok 0. >>= reciprical = Error \"Divide by zero\"",
                            "reason": "Ok(0.) >>= reciprical == Error(\"Divide by zero\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(>>|)",
                  "qualified_name": "TableclothResult.(>>|)",
                  "type": {
                    "rendered": "('a, 'error) TableclothResult.t ->\n  ('a -> 'b) -> ('b, 'error) TableclothResult.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothResult.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothResult.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothResult.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The following examples assume "
                        },
                        {
                          "tag": "Code",
                          "value": "open Result.Infix"
                        },
                        {
                          "tag": "Raw",
                          "value": " is in scope."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Ok 4 >>| Int.add(1) = Ok 5",
                            "reason": "Ok(4) >>| Int.add(1) == Ok(5);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Error \"Its gone bad\" >>| Int.add(1) = Error \"Its gone bad\"",
                            "reason": "Error(\"Its gone bad\") >>| Int.add(1) == Error(\"Its gone bad\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "pp",
                  "qualified_name": "TableclothResult.pp",
                  "type": {
                    "rendered": "(Stdlib.Format.formatter -> 'ok -> unit) ->\n  (Stdlib.Format.formatter -> 'error -> unit) ->\n  Stdlib.Format.formatter -> ('ok, 'error) TableclothResult.t -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Code",
                          "value": "Result.pp errFormat okFormat destFormat result"
                        },
                        {
                          "tag": "Raw",
                          "value": " \"pretty-prints\"\n    the "
                        },
                        {
                          "tag": "Code",
                          "value": "result"
                        },
                        {
                          "tag": "Raw",
                          "value": ", using "
                        },
                        {
                          "tag": "Code",
                          "value": "errFormat"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the "
                        },
                        {
                          "tag": "Code",
                          "value": "result"
                        },
                        {
                          "tag": "Raw",
                          "value": " is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Error"
                        },
                        {
                          "tag": "Raw",
                          "value": " value or\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "okFormat"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the "
                        },
                        {
                          "tag": "Code",
                          "value": "result"
                        },
                        {
                          "tag": "Raw",
                          "value": " is an "
                        },
                        {
                          "tag": "Code",
                          "value": "Ok"
                        },
                        {
                          "tag": "Raw",
                          "value": " value. "
                        },
                        {
                          "tag": "Code",
                          "value": "destFormat"
                        },
                        {
                          "tag": "Raw",
                          "value": " is a formatter\n    that tells where to send the output."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let good: (int, string) Result.t = Ok 42 in\n      let not_good: (int, string) Tablecloth.Result.t = Error \"bad\" in\n      Result.pp Format.pp_print_int Format.pp_print_string Format.std_formatter good;\n      Result.pp Format.pp_print_int Format.pp_print_string Format.std_formatter not_good;\n      Format.pp_print_newline Format.std_formatter ();\n      (* prints <ok: 42><error: bad>*)\n    ",
                            "reason": "{\n  let good: Result.t(int, string) = (Ok(42): Result.t(int, string));\n  let not_good: Tablecloth.Result.t(int, string) = (\n    Error(\"bad\"): Tablecloth.Result.t(int, string)\n  );\n  Result.pp(\n    Format.pp_print_int,\n    Format.pp_print_string,\n    Format.std_formatter,\n    good,\n  );\n  Result.pp(\n    Format.pp_print_int,\n    Format.pp_print_string,\n    Format.std_formatter,\n    not_good,\n  );\n  Format.pp_print_newline(Format.std_formatter, ());\n};\n/* prints <ok: 42><error: bad>*/\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothList": {
        "tag": "Module",
        "value": {
          "name": "TableclothList",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Immutable singly-linked list of elements which must have the same type."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Lists can have any number of elements."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    They are fast (O(1)) when:"
                  },
                  {
                    "tag": "List",
                    "value": [
                      [
                        {
                          "tag": "Raw",
                          "value": "Getting the first element using "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.head",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.head",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.head"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Getting the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.tail",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.tail",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.tail"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Creating a new list by adding an element to the front using "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.cons",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.cons",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.cons"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    They also support exhaustive pattern matching"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      match aList with\n      | [] -> \"Empty\"\n      | [a] -> \"Exactly one element\"\n      | [a, b] -> \"Exactly two elements\"\n      | a :: b :: cs -> \"More than two elements\"\n    ",
                      "reason": "switch (aList) {\n| [] => \"Empty\"\n| [a] => \"Exactly one element\"\n| [(a, b)] => \"Exactly two elements\"\n| [a, b, ...cs] => \"More than two elements\"\n};\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Lists are slow when:"
                  },
                  {
                    "tag": "List",
                    "value": [
                      [
                        {
                          "tag": "Raw",
                          "value": "You need to access an element that isn't at the front of the list"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Counting how many elements are in the list"
                        }
                      ]
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    As they have inefficent ("
                  },
                  {
                    "tag": "Code",
                    "value": "O(n)"
                  },
                  {
                    "tag": "Raw",
                    "value": ") "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothList.getAt",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothList.getAt",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothList.getAt"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothList.length",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothList.length",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothList.length"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " operations."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    If those are important to your use-case, perhaps you need an "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Array",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Array",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Array"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "'a",
                  "is_private": false,
                  "father": "TableclothList",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "'a list"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    You can create a "
                  },
                  {
                    "tag": "Code",
                    "value": "list"
                  },
                  {
                    "tag": "Raw",
                    "value": " with the "
                  },
                  {
                    "tag": "Code",
                    "value": "[1;2;3]"
                  },
                  {
                    "tag": "Raw",
                    "value": " syntax."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "empty",
                  "qualified_name": "TableclothList.empty",
                  "type": {
                    "rendered": "'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An empty list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.empty = []",
                            "reason": "List.empty == [];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.length List.empty = 0",
                            "reason": "List.length(List.empty) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "singleton",
                  "qualified_name": "TableclothList.singleton",
                  "type": {
                    "rendered": "'a -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a list with only one element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.singleton 1234 = [1234]",
                            "reason": "List.singleton(1234) == [1234];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.singleton \"hi\" = [\"hi\"]",
                            "reason": "List.singleton(\"hi\") == [\"hi\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "repeat",
                  "qualified_name": "TableclothList.repeat",
                  "type": {
                    "rendered": "'a -> times:int -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates a list of length "
                        },
                        {
                          "tag": "Code",
                          "value": "times"
                        },
                        {
                          "tag": "Raw",
                          "value": " with the value "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " populated at each index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.repeat ~times:5 'a' = ['a'; 'a'; 'a'; 'a'; 'a']",
                            "reason": "List.repeat(~times=5, 'a') == ['a', 'a', 'a', 'a', 'a'];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.repeat ~times:0 7 = []",
                            "reason": "List.repeat(~times=0, 7) == [];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.repeat ~times:(-1) \"Why?\" = []",
                            "reason": "List.repeat(~times=-1, \"Why?\") == [];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "range",
                  "qualified_name": "TableclothList.range",
                  "type": {
                    "rendered": "?from:int -> int -> int TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates a list containing all of the integers from "
                        },
                        {
                          "tag": "Code",
                          "value": "from"
                        },
                        {
                          "tag": "Raw",
                          "value": " if it is provided or "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " if not, up to but not including "
                        },
                        {
                          "tag": "Code",
                          "value": "to"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.range 5 = [0; 1; 2; 3; 4] ",
                            "reason": "List.range(5) == [0, 1, 2, 3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.range ~from:2 5 = [2; 3; 4] ",
                            "reason": "List.range(~from=2, 5) == [2, 3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.range ~from:(-2) 3 = [-2; -1; 0; 1; 2] ",
                            "reason": "List.range(~from=-2, 3) == [(-2), (-1), 0, 1, 2];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "initialize",
                  "qualified_name": "TableclothList.initialize",
                  "type": {
                    "rendered": "int -> f:(int -> 'a) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Initialize a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "List.initialize n ~f"
                        },
                        {
                          "tag": "Raw",
                          "value": " creates a list of length "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " by setting the element at position "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " to be "
                        },
                        {
                          "tag": "Code",
                          "value": "f(index)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.initialize 4 ~f:identity = [0; 1; 2; 3]",
                            "reason": "List.initialize(4, ~f=identity) == [0, 1, 2, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.initialize 4 ~f:(fun index -> index * index) = [0; 1; 4; 9]",
                            "reason": "List.initialize(4, ~f=index => index * index) == [0, 1, 4, 9];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "TableclothList.fromArray",
                  "type": {
                    "rendered": "'a array -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a list from an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.fromArray [|1;2;3|] = [1;2;3]",
                            "reason": "List.fromArray([|1, 2, 3|]) == [1, 2, 3];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_array",
                  "qualified_name": "TableclothList.from_array",
                  "type": {
                    "rendered": "'a array -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "head",
                  "qualified_name": "TableclothList.head",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the first element of a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is empty, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.head [1;2;3] = Some 1",
                            "reason": "List.head([1, 2, 3]) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.head [] = None",
                            "reason": "List.head([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tail",
                  "qualified_name": "TableclothList.tail",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a TableclothList.t option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", a list without its first element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the list is empty, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.tail [1;2;3] = Some [2;3]",
                            "reason": "List.tail([1, 2, 3]) == Some([2, 3]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.tail [1] = Some []",
                            "reason": "List.tail([1]) == Some([]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.tail [] = None",
                            "reason": "List.tail([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "cons",
                  "qualified_name": "TableclothList.cons",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Prepend a value to the front of a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The "
                        },
                        {
                          "tag": "Code",
                          "value": "::"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can also be used, in Reason you use the spread syntax\n    instead."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.cons [2;3;4] 1 = [1;2;3;4]",
                            "reason": "List.cons([2, 3, 4], 1) == [1, 2, 3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "1 :: [2;3;4] = [1;2;3;4]",
                            "reason": "[1, 2, 3, 4] == [1, 2, 3, 4];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "take",
                  "qualified_name": "TableclothList.take",
                  "type": {
                    "rendered": "'a TableclothList.t -> count:int -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Attempt to take the first "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements of a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   If the list has fewer than "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.take [1;2;3] ~count:2 = Some [1;2]",
                            "reason": "List.take([1, 2, 3], ~count=2) == Some([1, 2]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.take [] ~count:2 = None",
                            "reason": "List.take([], ~count=2) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n   "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.take [1;2;3;4] ~count:8 = None",
                            "reason": "List.take([1, 2, 3, 4], ~count=8) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "takeWhile",
                  "qualified_name": "TableclothList.takeWhile",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Take elements from a list until "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.takeWhile ~f:Int.isEven [2; 4; 6; 7; 8; 9] = [2; 4; 6]\n      List.takeWhile ~f:Int.isEven [2; 4; 6] = [2; 4; 6]\n      List.takeWhile ~f:Int.isEven [1; 2; 3] = []\n    ",
                            "reason": "List.takeWhile(~f=Int.isEven, [2, 4, 6, 7, 8, 9])\n== [2, 4, 6](List.takeWhile, ~f=Int.isEven, [2, 4, 6])\n== [2, 4, 6](List.takeWhile, ~f=Int.isEven, [1, 2, 3])\n== [];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "take_while",
                  "qualified_name": "TableclothList.take_while",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "drop",
                  "qualified_name": "TableclothList.drop",
                  "type": {
                    "rendered": "'a TableclothList.t -> count:int -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Drop the first "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements from the front of a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.drop [1;2;3;4] ~count:2 = [3;4]",
                            "reason": "List.drop([1, 2, 3, 4], ~count=2) == [3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.drop [1;2;3;4] ~count:6 = []",
                            "reason": "List.drop([1, 2, 3, 4], ~count=6) == [];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "dropWhile",
                  "qualified_name": "TableclothList.dropWhile",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Drop elements from a list until "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.dropWhile ~f:Int.isEven [2; 4; 6; 7; 8; 9] = [7; 8; 9]",
                            "reason": "List.dropWhile(~f=Int.isEven, [2, 4, 6, 7, 8, 9]) == [7, 8, 9];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.dropWhile ~f:Int.isEven [2; 4; 6; 8] = []",
                            "reason": "List.dropWhile(~f=Int.isEven, [2, 4, 6, 8]) == [];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.dropWhile ~f:Int.isEven [1; 2; 3] = [1; 2; 3]",
                            "reason": "List.dropWhile(~f=Int.isEven, [1, 2, 3]) == [1, 2, 3];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "drop_while",
                  "qualified_name": "TableclothList.drop_while",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "initial",
                  "qualified_name": "TableclothList.initial",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a TableclothList.t option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "As an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " get of all of the elements of a list except the last one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the list is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.initial [1;2;3] = Some [1;2]",
                            "reason": "List.initial([1, 2, 3]) == Some([1, 2]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.initial [1] = Some []",
                            "reason": "List.initial([1]) == Some([]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.initial [] = None",
                            "reason": "List.initial([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "last",
                  "qualified_name": "TableclothList.last",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the last element of a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the list is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Warning"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This will iterate through the entire list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.last [1;2;3] = Some 3",
                            "reason": "List.last([1, 2, 3]) == Some(3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.last [1] = Some 1",
                            "reason": "List.last([1]) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.last [] = None",
                            "reason": "List.last([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "getAt",
                  "qualified_name": "TableclothList.getAt",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the element at position "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " in the list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside of the bounds of the list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.getAt [1;2;3] ~index:1 = Some 2",
                            "reason": "List.getAt([1, 2, 3], ~index=1) == Some(2);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.getAt [] ~index:2 = None",
                            "reason": "List.getAt([], ~index=2) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.getAt [1;2;3] ~index:100 = None",
                            "reason": "List.getAt([1, 2, 3], ~index=100) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get_at",
                  "qualified_name": "TableclothList.get_at",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "insertAt",
                  "qualified_name": "TableclothList.insertAt",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> value:'a -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Insert a new element at the specified index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The element previously occupying "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " will now be at "
                        },
                        {
                          "tag": "Code",
                          "value": "index + 1"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is greater than then length of the list, it will be appended:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Emphasize",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Exceptions"
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is negative"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.insertAt\n        ~index:2\n        ~value:999\n        [100; 101; 102; 103] =\n          [100; 101; 999; 102; 103]\n    ",
                            "reason": "List.insertAt(~index=2, ~value=999, [100, 101, 102, 103])\n== [100, 101, 999, 102, 103];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.insertAt ~index:0 ~value:999 [100; 101; 102; 103] = [999; 100; 101; 102; 103]",
                            "reason": "List.insertAt(~index=0, ~value=999, [100, 101, 102, 103])\n== [999, 100, 101, 102, 103];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.insertAt ~index:4 ~value:999 [100; 101; 102; 103] = [100; 101; 102; 103; 999]",
                            "reason": "List.insertAt(~index=4, ~value=999, [100, 101, 102, 103])\n== [100, 101, 102, 103, 999];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.insertAt ~index:(-1) ~value:999 [100; 101; 102; 103] = [999]",
                            "reason": "List.insertAt(~index=-1, ~value=999, [100, 101, 102, 103]) == [999];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.insertAt ~index:5 ~value:999 [100; 101; 102; 103] = [999]",
                            "reason": "List.insertAt(~index=5, ~value=999, [100, 101, 102, 103]) == [999];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "insert_at",
                  "qualified_name": "TableclothList.insert_at",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> value:'a -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "updateAt",
                  "qualified_name": "TableclothList.updateAt",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> f:('a -> 'a) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns a new list with the value at "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " updated to be the result of applying "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside of the bounds of the list, returns the list as-is."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.updateAt [1; 2; 3] ~index:1 ~f:(Int.add 3) = [1; 5; 3]",
                            "reason": "List.updateAt([1, 2, 3], ~index=1, ~f=Int.add(3)) == [1, 5, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = [\"Ant\"; \"Bat\"; \"Cat\"] in\n      animals = List.updateAt animals ~index:4 ~f:String.reverse\n    ",
                            "reason": "{\n  let animals = [\"Ant\", \"Bat\", \"Cat\"];\n  animals == List.updateAt(animals, ~index=4, ~f=String.reverse);\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "update_at",
                  "qualified_name": "TableclothList.update_at",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> f:('a -> 'a) -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "removeAt",
                  "qualified_name": "TableclothList.removeAt",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates a new list without the element at "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside of the bounds of the list, returns the list as-is."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.removeAt [1; 2; 3] ~index:2 = [1; 2]",
                            "reason": "List.removeAt([1, 2, 3], ~index=2) == [1, 2];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = [\"Ant\"; \"Bat\"; \"Cat\"] in\n      List.equal String.equal animals (List.removeAt animals ~index:4) = true\n    ",
                            "reason": "{\n  let animals = [\"Ant\", \"Bat\", \"Cat\"];\n  List.equal(String.equal, animals, List.removeAt(animals, ~index=4)) == true;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "remove_at",
                  "qualified_name": "TableclothList.remove_at",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "reverse",
                  "qualified_name": "TableclothList.reverse",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Reverse the elements in a list"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.reverse [1; 2; 3] = [3; 2; 1]",
                            "reason": "List.reverse([1, 2, 3]) == [3, 2, 1];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sort",
                  "qualified_name": "TableclothList.sort",
                  "type": {
                    "rendered": "'a TableclothList.t -> compare:('a -> 'a -> int) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Sort using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    On native it uses "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Merge_sort ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " merge sort"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " which means the sort is stable,\n    runs in linear heap space, logarithmic stack space and n * log (n) time."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    When targeting javascript the time and space complexity of the sort cannot be guaranteed as it depends on the implementation."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sort [5;6;8;3;6] ~compare:Int.compare = [3;5;6;6;8]",
                            "reason": "List.sort([5, 6, 8, 3, 6], ~compare=Int.compare) == [3, 5, 6, 6, 8];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEmpty",
                  "qualified_name": "TableclothList.isEmpty",
                  "type": {
                    "rendered": "'a TableclothList.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if a list is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.isEmpty List.empty = true",
                            "reason": "List.isEmpty(List.empty) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.isEmpty [||] = true",
                            "reason": "List.isEmpty([||]) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.isEmpty [|1; 2; 3|] = false",
                            "reason": "List.isEmpty([|1, 2, 3|]) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_empty",
                  "qualified_name": "TableclothList.is_empty",
                  "type": {
                    "rendered": "'a TableclothList.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "length",
                  "qualified_name": "TableclothList.length",
                  "type": {
                    "rendered": "'a TableclothList.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return the number of elements in a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Warning"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "List.length"
                        },
                        {
                          "tag": "Raw",
                          "value": " needs to access the "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "entire"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " list in order to calculate its result."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If you need fast access to the length, perhaps you need an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    A common mistake is to have something like the following:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      if (List.length someList) = 0 then (\n        () (* It will take longer than you think to reach here *)\n      ) else (\n        () (* But it doesn't need to *)\n      )\n    ",
                            "reason": "if (List.length(someList) == 0) {\n  (); /* It will take longer than you think to reach here */\n} else {\n  (); /* But it doesn't need to */\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    instead you should do"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      if (List.isEmpty someList) then (\n        () (* This happens instantly *)\n      ) else (\n        () (* Since List.isEmpty takes the same amount of time for all lists *)\n      )\n    ",
                            "reason": "if (List.isEmpty(someList)) {\n  (); /* This happens instantly */\n} else {\n  (); /* Since List.isEmpty takes the same amount of time for all lists */\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Or"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      match someList with\n      | [] -> () (* Spoilers *)\n      | _ -> () (* This is how isEmptu is implemented *)\n    ",
                            "reason": "switch (someList) {\n| [] => () /* Spoilers */\n| _ => ()\n}; /* This is how isEmptu is implemented */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.length [] = 0",
                            "reason": "List.length([]) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.length [7; 8; 9] = 3",
                            "reason": "List.length([7, 8, 9]) == 3;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "any",
                  "qualified_name": "TableclothList.any",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "any"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Stops iteration as soon as "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.any ~f:isEven [|2;3|] = true",
                            "reason": "List.any(~f=isEven, [|2, 3|]) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.any ~f:isEven [|1;3|] = false",
                            "reason": "List.any(~f=isEven, [|1, 3|]) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.any ~f:isEven [||] = false",
                            "reason": "List.any(~f=isEven, [||]) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "all",
                  "qualified_name": "TableclothList.all",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "all"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Stops iteration as soon as "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns false."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.all ~f:Int.isEven [|2;4|] = true",
                            "reason": "List.all(~f=Int.isEven, [|2, 4|]) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.all ~f:Int.isEven [|2;3|] = false",
                            "reason": "List.all(~f=Int.isEven, [|2, 3|]) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.all ~f:Int.isEven [||] = true",
                            "reason": "List.all(~f=Int.isEven, [||]) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "count",
                  "qualified_name": "TableclothList.count",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Count the number of elements which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.count [7;5;8;6] ~f:Int.isEven = 2",
                            "reason": "List.count([7, 5, 8, 6], ~f=Int.isEven) == 2;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find",
                  "qualified_name": "TableclothList.find",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an option, the first element for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " evaluates to true."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  If "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " doesn't return "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for any of the elements "
                        },
                        {
                          "tag": "Code",
                          "value": "find"
                        },
                        {
                          "tag": "Raw",
                          "value": " will return "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.find ~f:Int.isEven [|1; 3; 4; 8;|] = Some 4",
                            "reason": "List.find(~f=Int.isEven, [|1, 3, 4, 8|]) == Some(4);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.find ~f:Int.isOdd [|0; 2; 4; 8;|] = None",
                            "reason": "List.find(~f=Int.isOdd, [|0, 2, 4, 8|]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.find ~f:Int.isEven [||] = None",
                            "reason": "List.find(~f=Int.isEven, [||]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "findIndex",
                  "qualified_name": "TableclothList.findIndex",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> bool) -> (int * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an option, a tuple of the first element and its index for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " evaluates to true."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " doesnt return "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for any "
                        },
                        {
                          "tag": "Code",
                          "value": "(index, element)"
                        },
                        {
                          "tag": "Raw",
                          "value": " pair, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.findIndex ~f:(fun index number -> index > 2 && Int.isEven number) [|1; 3; 4; 8;|] = Some (3, 8)",
                            "reason": "List.findIndex(\n  ~f=(index, number) => index > 2 && Int.isEven(number),\n  [|1, 3, 4, 8|],\n)\n== Some((3, 8));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find_index",
                  "qualified_name": "TableclothList.find_index",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> bool) -> (int * 'a) option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "includes",
                  "qualified_name": "TableclothList.includes",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a -> equal:('a -> 'a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test if a list contains the specified element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "equal"
                        },
                        {
                          "tag": "Raw",
                          "value": " to test for equality."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This function may iterate the entire list, so if your code needs to\n    repeatedly perform this check, maybe you want a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Set",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Set",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Set"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " instead."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.includes [1; 3; 5; 7] 3 ~equal:Int.equal = true",
                            "reason": "List.includes([1, 3, 5, 7], 3, ~equal=Int.equal) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.includes [1; 3; 5; 7] 4 ~equal:Int.equal = false",
                            "reason": "List.includes([1, 3, 5, 7], 4, ~equal=Int.equal) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.includes [] 5 ~equal:Int.equal = false",
                            "reason": "List.includes([], 5, ~equal=Int.equal) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum",
                  "qualified_name": "TableclothList.minimum",
                  "type": {
                    "rendered": "'a TableclothList.t -> compare:('a -> 'a -> int) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find the smallest element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.minimum [|7; 5; 8; 6|] ~compare:Int.compare = Some 5",
                            "reason": "List.minimum([|7, 5, 8, 6|], ~compare=Int.compare) == Some(5);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum",
                  "qualified_name": "TableclothList.maximum",
                  "type": {
                    "rendered": "'a TableclothList.t -> compare:('a -> 'a -> int) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find the largest element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.maximum [|7; 5; 8; 6|] ~compare:compare = Some 8",
                            "reason": "List.maximum([|7, 5, 8, 6|], ~compare) == Some(8);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "extent",
                  "qualified_name": "TableclothList.extent",
                  "type": {
                    "rendered": "'a TableclothList.t -> compare:('a -> 'a -> int) -> ('a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the "
                        },
                        {
                          "tag": "Code",
                          "value": "(minimum, maximum)"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.extent [|7; 5; 8; 6|] ~compare:compare = Some (5, 8)",
                            "reason": "List.extent([|7, 5, 8, 6|], ~compare) == Some((5, 8));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sum",
                  "qualified_name": "TableclothList.sum",
                  "type": {
                    "rendered": "'a TableclothList.t -> (module Container.Sum with type t = 'a) -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Calculate the sum of a list using the provided modules "
                        },
                        {
                          "tag": "Code",
                          "value": "zero"
                        },
                        {
                          "tag": "Raw",
                          "value": " value and "
                        },
                        {
                          "tag": "Code",
                          "value": "add"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sum [1;2;3] (module Int) = 6",
                            "reason": "List.sum([1, 2, 3], (module Int)) == 6;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sum [4.0;4.5;5.0] (module Float) = 13.5",
                            "reason": "List.sum([4.0, 4.5, 5.0], (module Float)) == 13.5;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.sum\n        [\"a\"; \"b\"; \"c\"]\n        (\n          module struct\n            type t = string\n            let zero = \"\"\n            let add = (^)\n          end\n        )\n        = \"abc\"\n    ",
                            "reason": "List.sum(\n  [\"a\", \"b\", \"c\"],\n  (module\n   {\n     type t = string;\n     let zero = \"\";\n     let add = (++);\n   }),\n)\n== \"abc\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map",
                  "qualified_name": "TableclothList.map",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> 'b) -> 'b TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a new list which is the result of applying a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map ~f:Float.squareRoot [|1.0; 4.0; 9.0|] = [|1.0; 2.0; 3.0|]",
                            "reason": "List.map(~f=Float.squareRoot, [|1.0, 4.0, 9.0|]) == [|1.0, 2.0, 3.0|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapWithIndex",
                  "qualified_name": "TableclothList.mapWithIndex",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> 'b) -> 'b TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Apply a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element and its index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.mapWithIndex\n        [\"zero\"; \"one\"; \"two\"]\n        ~f:(fun index element ->\n          (Int.toString index) ^ \": \" ^ element)\n        = [\"0: zero\"; \"1: one\"; \"2: two\"]\n    ",
                            "reason": "List.mapWithIndex([\"zero\", \"one\", \"two\"], ~f=(index, element) =>\n  Int.toString(index) ++ \": \" ++ element\n)\n== [\"0: zero\", \"1: one\", \"2: two\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_with_index",
                  "qualified_name": "TableclothList.map_with_index",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> 'b) -> 'b TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter",
                  "qualified_name": "TableclothList.filter",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> bool) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Keep elements that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.filter ~f:Int.isEven [1; 2; 3; 4; 5; 6] = [2; 4; 6]",
                            "reason": "List.filter(~f=Int.isEven, [1, 2, 3, 4, 5, 6]) == [2, 4, 6];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filterWithIndex",
                  "qualified_name": "TableclothList.filterWithIndex",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> bool) -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.filter",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with each elements index."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter_with_index",
                  "qualified_name": "TableclothList.filter_with_index",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> bool) -> 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filterMap",
                  "qualified_name": "TableclothList.filterMap",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> 'b option) -> 'b TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Allows you to combine "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.filter",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into a single pass."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The output list only contains elements for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Why "
                        },
                        {
                          "tag": "Code",
                          "value": "filterMap"
                        },
                        {
                          "tag": "Raw",
                          "value": " and not just "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.filter",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " then "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "?"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.filterMap",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.filterMap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.filterMap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " removes the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " layer automatically.\n    If your mapping is already returning an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and you want to skip over Nones, then "
                        },
                        {
                          "tag": "Code",
                          "value": "filterMap"
                        },
                        {
                          "tag": "Raw",
                          "value": " is much nicer to use."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let characters = ['a'; '9'; '6'; ' '; '2'; 'z'] in\n      List.filterMap characters ~f:Char.toDigit = [9; 6; 2]\n    ",
                            "reason": "{\n  let characters = ['a', '9', '6', ' ', '2', 'z'];\n  List.filterMap(characters, ~f=Char.toDigit) == [9, 6, 2];\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.filterMap [3; 4; 5; 6] ~f:(fun number ->\n        if Int.isEven number then\n          Some (number * number)\n        else\n          None\n      ) = [16; 36]\n    ",
                            "reason": "List.filterMap([3, 4, 5, 6], ~f=number =>\n  if (Int.isEven(number)) {\n    Some(number * number);\n  } else {\n    None;\n  }\n)\n== [16, 36];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter_map",
                  "qualified_name": "TableclothList.filter_map",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> 'b option) -> 'b TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatMap",
                  "qualified_name": "TableclothList.flatMap",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> 'b TableclothList.t) -> 'b TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Apply a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " onto a list and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.flatten",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.flatten",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.flatten"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " the resulting list of lists."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.flatMap ~f xs = List.map ~f xs |> List.flatten",
                            "reason": "List.flatMap(~f, xs) == List.map(~f, xs) |> List.flatten;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.flatMap ~f:(fun n -> [|n; n|]) [|1; 2; 3|] = [|1; 1; 2; 2; 3; 3|]",
                            "reason": "List.flatMap(~f=n => [|n, n|], [|1, 2, 3|]) == [|1, 1, 2, 2, 3, 3|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flat_map",
                  "qualified_name": "TableclothList.flat_map",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> 'b TableclothList.t) -> 'b TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold",
                  "qualified_name": "TableclothList.fold",
                  "type": {
                    "rendered": "'a TableclothList.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform a list into a value"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    After applying "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element of the list, "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns the accumulator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " iterates over the elements of the list from first to last."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For examples if we have:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [1, 2, 3] in\n      let sum =\n        List.fold numbers ~initial:0 ~f:(fun accumulator element -> accumulator + element)\n      in\n      sum = 6\n    ",
                            "reason": "{\n  let numbers = [(1, 2, 3)];\n  let sum =\n    List.fold(numbers, ~initial=0, ~f=(accumulator, element) =>\n      accumulator + element\n    );\n\n  sum == 6;\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Walking though each iteration step by step:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Enum",
                          "value": [
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 0, element: 1, result: 1"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 1, element: 2, result: 3"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 3, element: 3, result: 6"
                              }
                            ]
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    And so the final result is "
                        },
                        {
                          "tag": "Code",
                          "value": "6"
                        },
                        {
                          "tag": "Raw",
                          "value": ". (Note that in this case you probably want to use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.sum",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.sum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.sum"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ")"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Examples continued"
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.fold [|1; 2; 3|] ~initial:[] ~f:(List.cons) = [3; 2; 1]",
                            "reason": "List.fold([|1, 2, 3|], ~initial=[], ~f=List.cons) == [3, 2, 1];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let unique integers =\n        List.fold integers ~initial:Set.Int.empty ~f:Set.add |> Set.toList\n      in\n      unique [|1; 1; 2; 3; 2|] = [|1; 2; 3|]\n    ",
                            "reason": "{\n  let unique = integers =>\n    List.fold(integers, ~initial=Set.Int.empty, ~f=Set.add) |> Set.toList;\n\n  unique([|1, 1, 2, 3, 2|]) == [|1, 2, 3|];\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let lastEven integers =\n        List.fold integers ~initial:None ~f:(fun last int ->\n          if Int.isEven then\n            Some int\n          else\n            last\n        )\n      in\n      lastEven [|1;2;3;4;5|] = Some 4\n    ",
                            "reason": "{\n  let lastEven = integers =>\n    List.fold(integers, ~initial=None, ~f=(last, int) =>\n      if (Int.isEven) {\n        Some(int);\n      } else {\n        last;\n      }\n    );\n\n  lastEven([|1, 2, 3, 4, 5|]) == Some(4);\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "foldRight",
                  "qualified_name": "TableclothList.foldRight",
                  "type": {
                    "rendered": "'a TableclothList.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This method is like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.fold",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " except that it iterates over the elements of the list from last to first."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold_right",
                  "qualified_name": "TableclothList.fold_right",
                  "type": {
                    "rendered": "'a TableclothList.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Combine"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "append",
                  "qualified_name": "TableclothList.append",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a TableclothList.t -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates a new list which is the result of appending the second list onto the end of the first."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let fortyTwos = List.repeat ~length:2 42 in\n      let eightyOnes = List.repeat ~length:3 81 in\n      List.append fourtyTwos eightyOnes = [42; 42; 81; 81; 81];\n    ",
                            "reason": "{\n  let fortyTwos = List.repeat(~length=2, 42);\n  let eightyOnes = List.repeat(~length=3, 81);\n  List.append(fourtyTwos, eightyOnes) == [42, 42, 81, 81, 81];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatten",
                  "qualified_name": "TableclothList.flatten",
                  "type": {
                    "rendered": "'a TableclothList.t TableclothList.t -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Concatenate a list of lists into a single list:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.flatten [[1; 2]; [3]; [4; 5]] = [1; 2; 3; 4; 5]",
                            "reason": "List.flatten([[1, 2], [3], [4, 5]]) == [1, 2, 3, 4, 5];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "zip",
                  "qualified_name": "TableclothList.zip",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'b TableclothList.t -> ('a * 'b) TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two lists by merging each pair of elements into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one list is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The same as "
                        },
                        {
                          "tag": "Code",
                          "value": "List.map2 ~f:Tuple.make"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.zip [|1;2;3;4;5|] [|\"Dog\"; \"Eagle\"; \"Ferret\"|] = [|(1, \"Dog\"); (2, \"Eagle\"); (3, \"Ferret\")|]",
                            "reason": "List.zip([|1, 2, 3, 4, 5|], [|\"Dog\", \"Eagle\", \"Ferret\"|])\n== [|(1, \"Dog\"), (2, \"Eagle\"), (3, \"Ferret\")|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map2",
                  "qualified_name": "TableclothList.map2",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  'b TableclothList.t -> f:('a -> 'b -> 'c) -> 'c TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two lists, using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to combine each pair of elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one list is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map2 [|1;2;3|] [|4;5;6|] ~f:(+) = [|5;7;9|]",
                            "reason": "List.map2([|1, 2, 3|], [|4, 5, 6|], ~f=(+)) == [|5, 7, 9|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.map2\n        [|\"alice\"; \"bob\"; \"chuck\"|]\n        [|3; 5; 7; 9; 11; 13; 15; 17; 19|]\n        ~f:Tuple.create\n          = [|(\"alice\", 3); (\"bob\", 5); (\"chuck\", 7)|]\n    ",
                            "reason": "List.map2(\n  [|\"alice\", \"bob\", \"chuck\"|],\n  [|3, 5, 7, 9, 11, 13, 15, 17, 19|],\n  ~f=Tuple.create,\n)\n== [|(\"alice\", 3), (\"bob\", 5), (\"chuck\", 7)|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map3",
                  "qualified_name": "TableclothList.map3",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  'b TableclothList.t ->\n  'c TableclothList.t -> f:('a -> 'b -> 'c -> 'd) -> 'd TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine three lists, using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to combine each trio of elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one list is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.map3\n        ~f:Tuple3.create\n        [|\"alice\"; \"bob\"; \"chuck\"|]\n        [|2; 5; 7; 8;|]\n        [|true; false; true; false|] =\n          [|(\"alice\", 2, true); (\"bob\", 5, false); (\"chuck\", 7, true)|]\n    ",
                            "reason": "List.map3(\n  ~f=Tuple3.create,\n  [|\"alice\", \"bob\", \"chuck\"|],\n  [|2, 5, 7, 8|],\n  [|true, false, true, false|],\n)\n== [|(\"alice\", 2, true), (\"bob\", 5, false), (\"chuck\", 7, true)|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Deconstruct"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "partition",
                  "qualified_name": "TableclothList.partition",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  f:('a -> bool) -> 'a TableclothList.t * 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Split a list into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of lists. Values which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for will end up in "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple.first",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple.first",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple.first"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.partition [1;2;3;4;5;6] ~f:Int.isOdd = ([1;3;5], [2;4;6])",
                            "reason": "List.partition([1, 2, 3, 4, 5, 6], ~f=Int.isOdd) == ([1, 3, 5], [2, 4, 6]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "splitAt",
                  "qualified_name": "TableclothList.splitAt",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a TableclothList.t * 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divides a list into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of lists."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Elements which have index upto (but not including) "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be in the first component of the tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Elements with an index greater than or equal to "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be in the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside of the bounds of the list, all elements will be in the first component of the tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.splitAt [1;2;3;4;5] ~index:2 = ([1;2], [3;4;5])",
                            "reason": "List.splitAt([1, 2, 3, 4, 5], ~index=2) == ([1, 2], [3, 4, 5]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "split_at",
                  "qualified_name": "TableclothList.split_at",
                  "type": {
                    "rendered": "'a TableclothList.t -> index:int -> 'a TableclothList.t * 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "splitWhen",
                  "qualified_name": "TableclothList.splitWhen",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  f:('a -> bool) -> 'a TableclothList.t * 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divides a list into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " at the first element "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Elements up to (but not including) the first element "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for\n    will be in the first component of the tuple, the remaining elements will be\n    in the second"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.splitWhen [2; 4; 5; 6; 7] ~f:Int.isEven = ([2; 4], [5; 6; 7])",
                            "reason": "List.splitWhen([2, 4, 5, 6, 7], ~f=Int.isEven) == ([2, 4], [5, 6, 7]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.splitWhen [2; 4; 5; 6; 7] ~f:(Fun.constant false) = ([2; 4; 5; 6; 7], [])",
                            "reason": "List.splitWhen([2, 4, 5, 6, 7], ~f=Fun.constant(false))\n== ([2, 4, 5, 6, 7], []);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "split_when",
                  "qualified_name": "TableclothList.split_when",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  f:('a -> bool) -> 'a TableclothList.t * 'a TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unzip",
                  "qualified_name": "TableclothList.unzip",
                  "type": {
                    "rendered": "('a * 'b) TableclothList.t -> 'a TableclothList.t * 'b TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Decompose a list of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of lists."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.unzip [(0, true); (17, false); (1337, true)] = ([0;17;1337], [true; false; true])",
                            "reason": "List.unzip([(0, true), (17, false), (1337, true)])\n== ([0, 17, 1337], [true, false, true]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Iterate"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEach",
                  "qualified_name": "TableclothList.forEach",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Iterates over the elements of invokes "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " for each element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The function you provide must return "
                        },
                        {
                          "tag": "Code",
                          "value": "unit"
                        },
                        {
                          "tag": "Raw",
                          "value": ", and the "
                        },
                        {
                          "tag": "Code",
                          "value": "forEach"
                        },
                        {
                          "tag": "Raw",
                          "value": " call itself also returns "
                        },
                        {
                          "tag": "Code",
                          "value": "unit"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You use "
                        },
                        {
                          "tag": "Code",
                          "value": "List.forEach"
                        },
                        {
                          "tag": "Raw",
                          "value": " when you want to process a list only for side effects."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.forEach [|1; 2; 3|] ~f:(fun int -> print (Int.toString int))\n      (*\n        Prints\n        1\n        2\n        3\n      *)\n    ",
                            "reason": "List.forEach([|1, 2, 3|], ~f=int => print(Int.toString(int)));\n/*\n   Prints\n   1\n   2\n   3\n */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each",
                  "qualified_name": "TableclothList.for_each",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:('a -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEachWithIndex",
                  "qualified_name": "TableclothList.forEachWithIndex",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothList.forEach",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothList.forEach",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothList.forEach"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with the elements index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.forEachI [1; 2; 3] ~f:(fun index int -> printf \"%d: %d\" index int)\n      (*\n        Prints\n        0: 1\n        1: 2\n        2: 3\n      *)\n    ",
                            "reason": "List.forEachI([1, 2, 3], ~f=(index, int) => printf(\"%d: %d\", index, int));\n/*\n   Prints\n   0: 1\n   1: 2\n   2: 3\n */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each_with_index",
                  "qualified_name": "TableclothList.for_each_with_index",
                  "type": {
                    "rendered": "'a TableclothList.t -> f:(int -> 'a -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "intersperse",
                  "qualified_name": "TableclothList.intersperse",
                  "type": {
                    "rendered": "'a TableclothList.t -> sep:'a -> 'a TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Places "
                        },
                        {
                          "tag": "Code",
                          "value": "sep"
                        },
                        {
                          "tag": "Raw",
                          "value": " between all the elements of the given list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.intersperse ~sep:\"on\" [|\"turtles\"; \"turtles\"; \"turtles\"|] = [|\"turtles\"; \"on\"; \"turtles\"; \"on\"; \"turtles\"|]",
                            "reason": "List.intersperse(~sep=\"on\", [|\"turtles\", \"turtles\", \"turtles\"|])\n== [|\"turtles\", \"on\", \"turtles\", \"on\", \"turtles\"|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.intersperse ~sep:0 [||] = [||]",
                            "reason": "List.intersperse(~sep=0, [||]) == [||];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "chunksOf",
                  "qualified_name": "TableclothList.chunksOf",
                  "type": {
                    "rendered": "'a TableclothList.t -> size:int -> 'a TableclothList.t TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Split a list into equally sized chunks."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If there aren't enough elements to make the last 'chunk', those elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.chunksOf ~size:2 [\"#FFBA49\"; \"#9984D4\"; \"#20A39E\"; \"#EF5B5B\"; \"#23001E\"] =  [\n        [\"#FFBA49\"; \"#9984D4\"];\n        [\"#20A39E\"; \"#EF5B5B\"];\n      ]\n    ",
                            "reason": "List.chunksOf(\n  ~size=2,\n  [\"#FFBA49\", \"#9984D4\", \"#20A39E\", \"#EF5B5B\", \"#23001E\"],\n)\n== [[\"#FFBA49\", \"#9984D4\"], [\"#20A39E\", \"#EF5B5B\"]];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "chunks_of",
                  "qualified_name": "TableclothList.chunks_of",
                  "type": {
                    "rendered": "'a TableclothList.t -> size:int -> 'a TableclothList.t TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sliding",
                  "qualified_name": "TableclothList.sliding",
                  "type": {
                    "rendered": "?step:int ->\n  'a TableclothList.t -> size:int -> 'a TableclothList.t TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Provides a sliding 'window' of sub-lists over a list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The first sub-list starts at the head of the list and takes the first "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The sub-list then advances "
                        },
                        {
                          "tag": "Code",
                          "value": "step"
                        },
                        {
                          "tag": "Raw",
                          "value": " (which defaults to 1) positions before taking the next "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The sub-lists are guaranteed to always be of length "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " and iteration stops once a sub-list would extend beyond the end of the list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:1 = [[1]; [2]; [3]; [4]; [5]] ",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=1) == [[1], [2], [3], [4], [5]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:2 = [[1;2]; [2;3]; [3;4]; [4;5]] ",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=2)\n== [[1, 2], [2, 3], [3, 4], [4, 5]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:3 = [[1;2;3]; [2;3;4]; [3;4;5]] ",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=3)\n== [[1, 2, 3], [2, 3, 4], [3, 4, 5]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:2 ~step:2 = [[1;2]; [3;4]] ",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=2, ~step=2) == [[1, 2], [3, 4]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:1 ~step:3 = [[1]; [4]] ",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=1, ~step=3) == [[1], [4]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:2 ~step:3 = [[1; 2]; [4; 5]]",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=2, ~step=3) == [[1, 2], [4, 5]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.sliding [1;2;3;4;5] ~size:7 = []",
                            "reason": "List.sliding([1, 2, 3, 4, 5], ~size=7) == [];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "groupWhile",
                  "qualified_name": "TableclothList.groupWhile",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  f:('a -> 'a -> bool) -> 'a TableclothList.t TableclothList.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divide a list into groups."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is called with consecutive elements, when "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Raw",
                          "value": " a new group is started."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.groupWhile [1; 2; 3;] ~f:(Fun.constant false) = [[1]; [2]; [3]]\n    ",
                            "reason": "List.groupWhile([1, 2, 3], ~f=Fun.constant(false)) == [[1], [2], [3]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.groupWhile [1; 2; 3;] ~f:(Fun.constant true) = [[1; 2; 3]]\n    ",
                            "reason": "List.groupWhile([1, 2, 3], ~f=Fun.constant(true)) == [[1, 2, 3]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.groupWhile\n        ~f:String.equal\n        [\"a\"; \"b\"; \"b\"; \"a\"; \"a\"; \"a\"; \"b\"; \"a\"] =\n          [[\"a\"]; [\"b\"; \"b\"]; [\"a\"; \"a\"; \"a\";] [\"b\"]; [\"a\"]]\n    ",
                            "reason": "List.groupWhile(~f=String.equal, [\"a\", \"b\", \"b\", \"a\", \"a\", \"a\", \"b\", \"a\"])\n== [[\"a\"], [\"b\", \"b\"], [\"a\", \"a\", \"a\"]([\"b\"]), [\"a\"]];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.groupWhile\n        ~f:(fun x y -> x mod 2 = y mod 2)\n        [2; 4; 6; 5; 3; 1; 8; 7; 9] =\n          [[2; 4; 6]; [5; 3; 1]; [8]; [7; 9]]\n    ",
                            "reason": "List.groupWhile(\n  ~f=(x, y) => x mod 2 == y mod 2,\n  [2, 4, 6, 5, 3, 1, 8, 7, 9],\n)\n== [[2, 4, 6], [5, 3, 1], [8], [7, 9]];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "group_while",
                  "qualified_name": "TableclothList.group_while",
                  "type": {
                    "rendered": "'a TableclothList.t ->\n  f:('a -> 'a -> bool) -> 'a TableclothList.t TableclothList.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "join",
                  "qualified_name": "TableclothList.join",
                  "type": {
                    "rendered": "string TableclothList.t -> sep:string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a list of strings into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", placing "
                        },
                        {
                          "tag": "Code",
                          "value": "sep"
                        },
                        {
                          "tag": "Raw",
                          "value": " between each string in the result."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.join [\"Ant\"; \"Bat\"; \"Cat\"] ~sep:\", \" = \"Ant, Bat, Cat\"",
                            "reason": "List.join([\"Ant\", \"Bat\", \"Cat\"], ~sep=\", \") == \"Ant, Bat, Cat\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "groupBy",
                  "qualified_name": "TableclothList.groupBy",
                  "type": {
                    "rendered": "'value TableclothList.t ->\n  ('key, 'id) Comparator.s ->\n  f:('value -> 'key) -> ('key, 'value list, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Collect elements which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " produces the same key for"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Produces a map from "
                        },
                        {
                          "tag": "Code",
                          "value": "'key"
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all elements which produce the same "
                        },
                        {
                          "tag": "Code",
                          "value": "'key"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = [|\"Ant\"; \"Bear\"; \"Cat\"; \"Dewgong\"|] in\n      Array.groupBy animals (module Int) ~f:String.length = Map.Int.fromList [\n        (3, [\"Cat\"; \"Ant\"]);\n        (4, [\"Bear\"]);\n        (7, [\"Dewgong\"]);\n      ]\n    ",
                            "reason": "{\n  let animals = [|\"Ant\", \"Bear\", \"Cat\", \"Dewgong\"|];\n  Array.groupBy(animals, (module Int), ~f=String.length)\n  == Map.Int.fromList([\n       (3, [\"Cat\", \"Ant\"]),\n       (4, [\"Bear\"]),\n       (7, [\"Dewgong\"]),\n     ]);\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "group_by",
                  "qualified_name": "TableclothList.group_by",
                  "type": {
                    "rendered": "'value TableclothList.t ->\n  ('key, 'id) Comparator.s ->\n  f:('value -> 'key) -> ('key, 'value list, 'id) TableclothMap.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "TableclothList.toArray",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a list to an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "TableclothList.to_array",
                  "type": {
                    "rendered": "'a TableclothList.t -> 'a array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothList.equal",
                  "type": {
                    "rendered": "('a -> 'a -> bool) -> 'a TableclothList.t -> 'a TableclothList.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two lists for equality using the provided function to test elements."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothList.compare",
                  "type": {
                    "rendered": "('a -> 'a -> int) -> 'a TableclothList.t -> 'a TableclothList.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two lists using the provided function to compare elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    A shorter list is 'less' than a longer one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.compare Int.compare [1;2;3] [1;2;3;4] = -1",
                            "reason": "List.compare(Int.compare, [1, 2, 3], [1, 2, 3, 4]) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.compare Int.compare [1;2;3] [1;2;3] = 0",
                            "reason": "List.compare(Int.compare, [1, 2, 3], [1, 2, 3]) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.compare Int.compare [1;2;5] [1;2;3] = 1",
                            "reason": "List.compare(Int.compare, [1, 2, 5], [1, 2, 3]) == 1;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothArray": {
        "tag": "Module",
        "value": {
          "name": "TableclothArray",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "A mutable vector of elements which must have the same type."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Has constant time (O(1)) "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothArray.get",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothArray.get",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothArray.get"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothArray.set",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothArray.set",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothArray.set"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothArray.length",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothArray.length",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothArray.length"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " operations."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Arrays have a fixed length, if you want to be able to add an arbitrary number of elements maybe you want a "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "List",
                      "reference": {
                        "kind": "Unknown",
                        "target": "List",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "List"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "'a",
                  "is_private": false,
                  "father": "TableclothArray",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "'a array"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    You can create an "
                  },
                  {
                    "tag": "Code",
                    "value": "array"
                  },
                  {
                    "tag": "Raw",
                    "value": " in OCaml with the "
                  },
                  {
                    "tag": "Code",
                    "value": "[|1; 2; 3|]"
                  },
                  {
                    "tag": "Raw",
                    "value": " syntax."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "singleton",
                  "qualified_name": "TableclothArray.singleton",
                  "type": {
                    "rendered": "'a -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create an array with only one element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.singleton 1234 = [|1234|]",
                            "reason": "Array.singleton(1234) == [|1234|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.singleton \"hi\" = [|\"hi\"|]",
                            "reason": "Array.singleton(\"hi\") == [|\"hi\"|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "repeat",
                  "qualified_name": "TableclothArray.repeat",
                  "type": {
                    "rendered": "'a -> length:int -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates an array of length "
                        },
                        {
                          "tag": "Code",
                          "value": "length"
                        },
                        {
                          "tag": "Raw",
                          "value": " with the value "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " populated at each index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.repeat ~length:5 'a' = [|'a'; 'a'; 'a'; 'a'; 'a'|]",
                            "reason": "Array.repeat(~length=5, 'a') == [|'a', 'a', 'a', 'a', 'a'|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.repeat ~length:0 7 = [||]",
                            "reason": "Array.repeat(~length=0, 7) == [||];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.repeat ~length:(-1) \"Why?\" = [||]",
                            "reason": "Array.repeat(~length=-1, \"Why?\") == [||];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "range",
                  "qualified_name": "TableclothArray.range",
                  "type": {
                    "rendered": "?from:int -> int -> int TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates an array containing all of the integers from "
                        },
                        {
                          "tag": "Code",
                          "value": "from"
                        },
                        {
                          "tag": "Raw",
                          "value": " if it is provided or "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " if not, up to but not including "
                        },
                        {
                          "tag": "Code",
                          "value": "to"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.range 5 = [|0; 1; 2; 3; 4|] ",
                            "reason": "Array.range(5) == [|0, 1, 2, 3, 4|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.range ~from:2 5 = [|2; 3; 4|] ",
                            "reason": "Array.range(~from=2, 5) == [|2, 3, 4|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.range ~from:(-2) 3 = [|-2; -1; 0; 1; 2|] ",
                            "reason": "Array.range(~from=-2, 3) == [|(-2), (-1), 0, 1, 2|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "initialize",
                  "qualified_name": "TableclothArray.initialize",
                  "type": {
                    "rendered": "int -> f:(int -> 'a) -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Initialize an array. "
                        },
                        {
                          "tag": "Code",
                          "value": "Array.initialize n ~f"
                        },
                        {
                          "tag": "Raw",
                          "value": " creates an array of length "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " with\n    the element at index "
                        },
                        {
                          "tag": "Code",
                          "value": "i"
                        },
                        {
                          "tag": "Raw",
                          "value": " initialized to the result of "
                        },
                        {
                          "tag": "Code",
                          "value": "(f i)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.initialize 4 ~f:identity = [|0; 1; 2; 3|]",
                            "reason": "Array.initialize(4, ~f=identity) == [|0, 1, 2, 3|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.initialize 4 ~f:(fun n -> n * n) = [|0; 1; 4; 9|]",
                            "reason": "Array.initialize(4, ~f=n => n * n) == [|0, 1, 4, 9|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "TableclothArray.fromList",
                  "type": {
                    "rendered": "'a list -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create an array from a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.fromList [1;2;3] = [|1;2;3|]",
                            "reason": "Array.fromList([1, 2, 3]) == [|1, 2, 3|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_list",
                  "qualified_name": "TableclothArray.from_list",
                  "type": {
                    "rendered": "'a list -> 'a TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "clone",
                  "qualified_name": "TableclothArray.clone",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a shallow copy of an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [|1;2;3|] in\n      let otherNumbers = Array.copy numbers in\n      numbers.(1) <- 9;\n      numbers = [|1;9;3|];\n      otherNumbers = [|1;2;3|];\n    ",
                            "reason": "{\n  let numbers = [|1, 2, 3|];\n  let otherNumbers = Array.copy(numbers);\n  numbers[1] = 9;\n  numbers == [|1, 9, 3|];\n  otherNumbers == [|1, 2, 3|];\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numberGrid = [|\n        [|1;2;3|];\n        [|4;5;6|];\n        [|7;8;9|];\n      |] in\n\n      let numberGridCopy = Array.copy numberGrid in\n\n      numberGrid.(1).(1) <- 0;\n\n      numberGridCopy.(1).(1) = 9;\n    ",
                            "reason": "{\n  let numberGrid = [|[|1, 2, 3|], [|4, 5, 6|], [|7, 8, 9|]|];\n\n  let numberGridCopy = Array.copy(numberGrid);\n\n  numberGrid[1][1] = 0;\n\n  numberGridCopy[1][1] == 9;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get",
                  "qualified_name": "TableclothArray.get",
                  "type": {
                    "rendered": "'a TableclothArray.t -> int -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the element at the specified index."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The first element has index number 0."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The last element has index number "
                        },
                        {
                          "tag": "Code",
                          "value": "Array.length a - 1"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You should prefer using the dedicated literal syntax;"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "array.(n)",
                            "reason": "array[n];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Or using the safer "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.getAt",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.getAt",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.getAt"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument \"index out of bounds\""
                        },
                        {
                          "tag": "Raw",
                          "value": " for indexes outside of the range "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(Array.length a - 1)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "[|1; 2; 3; 2; 1|].(3) = 2",
                            "reason": "[|1, 2, 3, 2, 1|][3] == 2;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = [|\"cat\"; \"dog\"; \"eel\"|] in\n      animals.(2) = \"eel\"\n    ",
                            "reason": "{\n  let animals = [|\"cat\", \"dog\", \"eel\"|];\n  animals[2] == \"eel\";\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "getAt",
                  "qualified_name": "TableclothArray.getAt",
                  "type": {
                    "rendered": "'a TableclothArray.t -> index:int -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the element at index number "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " of array "
                        },
                        {
                          "tag": "Code",
                          "value": "a"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside the range "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(Array.length a - 1)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.getAt [|0; 1; 2|] ~index:5 = None",
                            "reason": "Array.getAt([|0, 1, 2|], ~index=5) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.getAt [||] ~index:0 = None",
                            "reason": "Array.getAt([||], ~index=0) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get_at",
                  "qualified_name": "TableclothArray.get_at",
                  "type": {
                    "rendered": "'a TableclothArray.t -> index:int -> 'a option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(.?())",
                  "qualified_name": "TableclothArray.(.?())",
                  "type": {
                    "rendered": "'element array -> int -> 'element option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://caml.inria.fr/pub/docs/manual-ocaml/indexops.html ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " index operator"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.getAt",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.getAt",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.getAt"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " Currently this is only supported by the OCaml syntax."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.([||].?(3)) = Some 'g'",
                            "reason": "Array.(.?()([||], 3)) == Some('g');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.([||].?(9)) = None",
                            "reason": "Array.(.?()([||], 9)) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "set",
                  "qualified_name": "TableclothArray.set",
                  "type": {
                    "rendered": "'a TableclothArray.t -> int -> 'a -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Modifies an array in place, replacing the element at "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " with "
                        },
                        {
                          "tag": "Code",
                          "value": "value"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You should prefer either to write"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "array.(index) <- value",
                            "reason": "array[index] = value;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Or use the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.setAt",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.setAt",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.setAt"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " function instead."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument \"index out of bounds\""
                        },
                        {
                          "tag": "Raw",
                          "value": " if "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " is outside the range "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "Array.length a - 1"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [|1;2;3|] in\n      Array.set numbers 1 1;\n      numbers.(2) <- 0;\n\n      numbers = [|1;0;0|]\n    ",
                            "reason": "{\n  let numbers = [|1, 2, 3|];\n  numbers[1] = 1;\n  numbers[2] = 0;\n\n  numbers == [|1, 0, 0|];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "setAt",
                  "qualified_name": "TableclothArray.setAt",
                  "type": {
                    "rendered": "'a TableclothArray.t -> index:int -> value:'a -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.set",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.set",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.set"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but with labelled arguments"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "set_at",
                  "qualified_name": "TableclothArray.set_at",
                  "type": {
                    "rendered": "'a TableclothArray.t -> index:int -> value:'a -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "first",
                  "qualified_name": "TableclothArray.first",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the first element of an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the array is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.first [1;2;3] = Some 1",
                            "reason": "Array.first([1, 2, 3]) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.first [1] = Some 1",
                            "reason": "Array.first([1]) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.first [] = None",
                            "reason": "Array.first([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "last",
                  "qualified_name": "TableclothArray.last",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the last element of an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the array is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.last [1;2;3] = Some 3",
                            "reason": "Array.last([1, 2, 3]) == Some(3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.last [1] = Some 1",
                            "reason": "Array.last([1]) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.last [] = None",
                            "reason": "Array.last([]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "slice",
                  "qualified_name": "TableclothArray.slice",
                  "type": {
                    "rendered": "?to_:int -> 'a TableclothArray.t -> from:int -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get a sub-section of a list. "
                        },
                        {
                          "tag": "Code",
                          "value": "from"
                        },
                        {
                          "tag": "Raw",
                          "value": " is a zero-based index where we will start our slice."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The "
                        },
                        {
                          "tag": "Code",
                          "value": "to_"
                        },
                        {
                          "tag": "Raw",
                          "value": " is a zero-based index that indicates the end of the slice."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The slice extracts up to but not including "
                        },
                        {
                          "tag": "Code",
                          "value": "to_"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Both the "
                        },
                        {
                          "tag": "Code",
                          "value": "from"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "to_"
                        },
                        {
                          "tag": "Raw",
                          "value": " indexes can be negative, indicating an offset from the end of the list."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:0 ~to_:3 [0; 1; 2; 3; 4] = [0; 1; 2]",
                            "reason": "Array.slice(~from=0, ~to_=3, [0, 1, 2, 3, 4]) == [0, 1, 2];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:1 ~to_:4 [0; 1; 2; 3; 4] = [1; 2; 3]",
                            "reason": "Array.slice(~from=1, ~to_=4, [0, 1, 2, 3, 4]) == [1, 2, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:5 ~to_:3 [0; 1; 2; 3; 4] = []",
                            "reason": "Array.slice(~from=5, ~to_=3, [0, 1, 2, 3, 4]) == [];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:1 ~to_:(-1) [0; 1; 2; 3; 4] = [1; 2; 3]",
                            "reason": "Array.slice(~from=1, ~to_=-1, [0, 1, 2, 3, 4]) == [1, 2, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:(-2) ~to_:5 [0; 1; 2; 3; 4] = [3; 4]",
                            "reason": "Array.slice(~from=-2, ~to_=5, [0, 1, 2, 3, 4]) == [3, 4];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.slice ~from:(-2) ~to_:(-1) [0; 1; 2; 3; 4] = [3]",
                            "reason": "Array.slice(~from=-2, ~to_=-1, [0, 1, 2, 3, 4]) == [3];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "swap",
                  "qualified_name": "TableclothArray.swap",
                  "type": {
                    "rendered": "'a TableclothArray.t -> int -> int -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Swaps the values at the provided indicies."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception of either index is out of bounds for the array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.swap [|1; 2; 3|] 1 2 = [|1; 3; 2|]",
                            "reason": "Array.swap([|1, 2, 3|], 1, 2) == [|1, 3, 2|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "reverse",
                  "qualified_name": "TableclothArray.reverse",
                  "type": {
                    "rendered": "'a TableclothArray.t -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Reverses an array "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "in place"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": ", mutating the existing array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [|1; 2; 3|] in\n      Array.reverse numbers\n      numbers = [|3; 2; 1|];\n    ",
                            "reason": "{\n  let numbers = [|1, 2, 3|];\n  Array.reverse(numbers, numbers) == [|3, 2, 1|];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sort",
                  "qualified_name": "TableclothArray.sort",
                  "type": {
                    "rendered": "'a TableclothArray.t -> compare:('a -> 'a -> int) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Sort in place, modifying the existing array, using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function to determine order."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    On native it uses "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Merge_sort ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " merge sort"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " which means the sort is stable,\n    runs in constant heap space, logarithmic stack space and "
                        },
                        {
                          "tag": "Code",
                          "value": "n * log (n)"
                        },
                        {
                          "tag": "Raw",
                          "value": " time."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    When targeting javascript the time and space complexity of the sort cannot be guaranteed as it depends on the implementation."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sortInPlace [|5;6;8;3;6|] ~compare:compare = [|3;5;6;6;8|]",
                            "reason": "Array.sortInPlace([|5, 6, 8, 3, 6|], ~compare) == [|3, 5, 6, 6, 8|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEmpty",
                  "qualified_name": "TableclothArray.isEmpty",
                  "type": {
                    "rendered": "'a TableclothArray.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if an array is empty"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.isEmpty [|1; 2, 3|] = false",
                            "reason": "Array.isEmpty([|1, (2, 3)|]) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.isEmpty [||] = true",
                            "reason": "Array.isEmpty([||]) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_empty",
                  "qualified_name": "TableclothArray.is_empty",
                  "type": {
                    "rendered": "'a TableclothArray.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "length",
                  "qualified_name": "TableclothArray.length",
                  "type": {
                    "rendered": "'a TableclothArray.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return the length of an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.length [|1; 2, 3|] = 3",
                            "reason": "Array.length([|1, (2, 3)|]) == 3;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.length [||] = 0",
                            "reason": "Array.length([||]) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "any",
                  "qualified_name": "TableclothArray.any",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "any"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Iteration is stopped as soon as "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.any ~f:Int.isEven [|1;2;3;5|] = true",
                            "reason": "Array.any(~f=Int.isEven, [|1, 2, 3, 5|]) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.any ~f:Int.isEven [|1;3;5;7|] = false",
                            "reason": "Array.any(~f=Int.isEven, [|1, 3, 5, 7|]) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.any ~f:Int.isEven [||] = false",
                            "reason": "Array.any(~f=Int.isEven, [||]) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "all",
                  "qualified_name": "TableclothArray.all",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for "
                        },
                        {
                          "tag": "Code",
                          "value": "all"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Iteration is stopped as soon as "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.all ~f:Int.isEven [|2;4|] = true",
                            "reason": "Array.all(~f=Int.isEven, [|2, 4|]) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.all ~f:Int.isEven [|2;3|] = false",
                            "reason": "Array.all(~f=Int.isEven, [|2, 3|]) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.all ~f:Int.isEven [||] = true",
                            "reason": "Array.all(~f=Int.isEven, [||]) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "count",
                  "qualified_name": "TableclothArray.count",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> bool) -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Count the number of elements which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.count [|7; 5; 8; 6|] ~f:Int.isEven = 2",
                            "reason": "Array.count([|7, 5, 8, 6|], ~f=Int.isEven) == 2;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find",
                  "qualified_name": "TableclothArray.find",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> bool) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the first element for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " evaluates to "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " doesn't return "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for any of the elements "
                        },
                        {
                          "tag": "Code",
                          "value": "find"
                        },
                        {
                          "tag": "Raw",
                          "value": " will return "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.find ~f:Int.isEven [|1; 3; 4; 8;|] = Some 4",
                            "reason": "Array.find(~f=Int.isEven, [|1, 3, 4, 8|]) == Some(4);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.find ~f:Int.isOdd [|0; 2; 4; 8;|] = None",
                            "reason": "Array.find(~f=Int.isOdd, [|0, 2, 4, 8|]) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.find ~f:Int.isEven [||] = None",
                            "reason": "Array.find(~f=Int.isEven, [||]) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "findIndex",
                  "qualified_name": "TableclothArray.findIndex",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> bool) -> (int * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Similar to "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.find",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.find",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.find"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with the current index, and the return value will be a tuple of the index the passing value was found at and the passing value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.findIndex [|1; 3; 4; 8;|] ~f:(fun index number -> index > 2 && Int.isEven number) = Some (3, 8)",
                            "reason": "Array.findIndex([|1, 3, 4, 8|], ~f=(index, number) =>\n  index > 2 && Int.isEven(number)\n)\n== Some((3, 8));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find_index",
                  "qualified_name": "TableclothArray.find_index",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> bool) -> (int * 'a) option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "includes",
                  "qualified_name": "TableclothArray.includes",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a -> equal:('a -> 'a -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test if an array contains the specified element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "equal"
                        },
                        {
                          "tag": "Raw",
                          "value": " to test for equality."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.contains [1; 2; 3]  2 ~equal:(=) = true",
                            "reason": "Array.contains([1, 2, 3], 2, ~equal=(==)) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum",
                  "qualified_name": "TableclothArray.minimum",
                  "type": {
                    "rendered": "'a TableclothArray.t -> compare:('a -> 'a -> int) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find the smallest element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.minimum [|7;5;8;6|] ~compare:Int.compare = Some 5",
                            "reason": "Array.minimum([|7, 5, 8, 6|], ~compare=Int.compare) == Some(5);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.minimum [||] ~compare:Int.compare = None",
                            "reason": "Array.minimum([||], ~compare=Int.compare) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum",
                  "qualified_name": "TableclothArray.maximum",
                  "type": {
                    "rendered": "'a TableclothArray.t -> compare:('a -> 'a -> int) -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find the largest element using the provided "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.maximum [|7;5;8;6|] ~compare:Int.compare = Some 8",
                            "reason": "Array.maximum([|7, 5, 8, 6|], ~compare=Int.compare) == Some(8);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.maximum [||] ~compare:Int.compare = None",
                            "reason": "Array.maximum([||], ~compare=Int.compare) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "extent",
                  "qualified_name": "TableclothArray.extent",
                  "type": {
                    "rendered": "'a TableclothArray.t -> compare:('a -> 'a -> int) -> ('a * 'a) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Find a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.minimum",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.minimum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.minimum"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.maximum",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.maximum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.maximum"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " in a single pass"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called on an empty array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.extent [|7;5;8;6|] ~compare:Int.compare = Some (5, 8)",
                            "reason": "Array.extent([|7, 5, 8, 6|], ~compare=Int.compare) == Some((5, 8));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.extent [|7|] ~compare:Int.compare = Some (7, 7)",
                            "reason": "Array.extent([|7|], ~compare=Int.compare) == Some((7, 7));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.extent [||] ~compare:Int.compare = None",
                            "reason": "Array.extent([||], ~compare=Int.compare) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sum",
                  "qualified_name": "TableclothArray.sum",
                  "type": {
                    "rendered": "'a TableclothArray.t -> (module Container.Sum with type t = 'a) -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Calculate the sum of a list using the provided modules "
                        },
                        {
                          "tag": "Code",
                          "value": "zero"
                        },
                        {
                          "tag": "Raw",
                          "value": " value and "
                        },
                        {
                          "tag": "Code",
                          "value": "add"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sum [|1; 2; 3|] (module Int) = 6",
                            "reason": "Array.sum([|1, 2, 3|], (module Int)) == 6;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sum [|4.0; 4.5; 5.0|] (module Float) = 13.5",
                            "reason": "Array.sum([|4.0, 4.5, 5.0|], (module Float)) == 13.5;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.sum\n        [|\"a\"; \"b\"; \"c\"|]\n        (\n          module struct\n            type t = string\n            let zero = \"\"\n            let add = (^)\n          end\n        )\n        = \"abc\"\n    ",
                            "reason": "Array.sum(\n  [|\"a\", \"b\", \"c\"|],\n  (module\n   {\n     type t = string;\n     let zero = \"\";\n     let add = (++);\n   }),\n)\n== \"abc\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map",
                  "qualified_name": "TableclothArray.map",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> 'b) -> 'b TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a new array which is the result of applying a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.map ~f:Float.squareRoot [|1.0; 4.0; 9.0|] = [|1.0; 2.0; 3.0|]",
                            "reason": "Array.map(~f=Float.squareRoot, [|1.0, 4.0, 9.0|]) == [|1.0, 2.0, 3.0|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapWithIndex",
                  "qualified_name": "TableclothArray.mapWithIndex",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> 'b) -> 'b TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Apply a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element with its index as the first argument."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.mapWithIndex ~f:( * ) [|5; 5; 5|] = [|0; 5; 10|]",
                            "reason": "Array.mapWithIndex(~f=( * ), [|5, 5, 5|]) == [|0, 5, 10|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_with_index",
                  "qualified_name": "TableclothArray.map_with_index",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> 'b) -> 'b TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter",
                  "qualified_name": "TableclothArray.filter",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> bool) -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Keep elements that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.filter ~f:Int.isEven [|1; 2; 3; 4; 5; 6|] = [|2; 4; 6|]",
                            "reason": "Array.filter(~f=Int.isEven, [|1, 2, 3, 4, 5, 6|]) == [|2, 4, 6|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filterMap",
                  "qualified_name": "TableclothArray.filterMap",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> 'b option) -> 'b TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Allows you to combine "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.filter",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into a single pass."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The output array only contains elements for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Why "
                        },
                        {
                          "tag": "Code",
                          "value": "filterMap"
                        },
                        {
                          "tag": "Raw",
                          "value": " and not just "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.filter",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " then "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "?"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.filterMap",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.filterMap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.filterMap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " removes the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " layer automatically."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If your mapping is already returning an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and you want to skip over "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "s, then "
                        },
                        {
                          "tag": "Code",
                          "value": "filterMap"
                        },
                        {
                          "tag": "Raw",
                          "value": " is much nicer to use."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let characters = [|'a'; '9'; '6'; ' '; '2'; 'z' |] in\n      Array.filterMap characters ~f:Char.toDigit = [|9; 6; 2|]\n    ",
                            "reason": "{\n  let characters = [|'a', '9', '6', ' ', '2', 'z'|];\n  Array.filterMap(characters, ~f=Char.toDigit) == [|9, 6, 2|];\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.filterMap [|3; 4; 5; 6|] ~f:(fun number ->\n        if Int.isEven number then\n          Some (number * number)\n        else\n          None\n      ) = [16; 36]\n    ",
                            "reason": "Array.filterMap([|3, 4, 5, 6|], ~f=number =>\n  if (Int.isEven(number)) {\n    Some(number * number);\n  } else {\n    None;\n  }\n)\n== [16, 36];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter_map",
                  "qualified_name": "TableclothArray.filter_map",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> 'b option) -> 'b TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatMap",
                  "qualified_name": "TableclothArray.flatMap",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  f:('a -> 'b TableclothArray.t) -> 'b TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " onto an array and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.flatten",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.flatten",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.flatten"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " the resulting arrays"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.flatMap ~f:(fun n -> [|n; n|]) [|1; 2; 3|] = [|1; 1; 2; 2; 3; 3|]",
                            "reason": "Array.flatMap(~f=n => [|n, n|], [|1, 2, 3|]) == [|1, 1, 2, 2, 3, 3|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flat_map",
                  "qualified_name": "TableclothArray.flat_map",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  f:('a -> 'b TableclothArray.t) -> 'b TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold",
                  "qualified_name": "TableclothArray.fold",
                  "type": {
                    "rendered": "'a TableclothArray.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Produce a new value from an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " takes two arguments, an "
                        },
                        {
                          "tag": "Code",
                          "value": "initial"
                        },
                        {
                          "tag": "Raw",
                          "value": " 'accumulator' value and a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For each element of the array "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be called with two arguments; the current accumulator and an element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns the value that the accumulator should have for the next iteration."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The "
                        },
                        {
                          "tag": "Code",
                          "value": "initial"
                        },
                        {
                          "tag": "Raw",
                          "value": " value is the value the accumulator will have on the first call to "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    After applying "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to every element of the array, "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns the accumulator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " iterates over the elements of the array from first to last."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Folding is useful whenever you have a collection of something, and want to produce a single value from it."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For examples if we have:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let numbers = [|1, 2, 3|] in\n      let sum =\n        Array.fold numbers ~initial:0 ~f:(fun accumulator element -> accumulator +element)\n      in\n      sum = 6\n    ",
                            "reason": "{\n  let numbers = [|(1, 2, 3)|];\n  let sum =\n    Array.fold(numbers, ~initial=0, ~f=(accumulator, element) =>\n      accumulator + element\n    );\n\n  sum == 6;\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Walking though each iteration step by step:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Enum",
                          "value": [
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 0, element: 1, result: 1"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 1, element: 2, result: 3"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "accumulator: 3, element: 3, result: 6"
                              }
                            ]
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    And so the final result is "
                        },
                        {
                          "tag": "Code",
                          "value": "6"
                        },
                        {
                          "tag": "Raw",
                          "value": ". (Note that in reality you probably want to use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.sum",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.sum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.sum"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ")"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.fold [|1; 2; 3|] ~initial:[] ~f:(List.cons) = [3; 2; 1]",
                            "reason": "Array.fold([|1, 2, 3|], ~initial=[], ~f=List.cons) == [3, 2, 1];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.fold [|1; 1; 2; 2; 3|] ~initial:Set.Int.empty ~f:Set.add |> Set.toArray = [|1; 2; 3|]\n    ",
                            "reason": "Array.fold([|1, 1, 2, 2, 3|], ~initial=Set.Int.empty, ~f=Set.add)\n|> Set.toArray == [|1, 2, 3|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let lastEven integers =\n        Array.fold integers ~initial:None ~f:(fun last int ->\n          if Int.isEven then\n            Some int\n          else\n            last\n        )\n      in\n      lastEven [|1;2;3;4;5|] = Some 4\n    ",
                            "reason": "{\n  let lastEven = integers =>\n    Array.fold(integers, ~initial=None, ~f=(last, int) =>\n      if (Int.isEven) {\n        Some(int);\n      } else {\n        last;\n      }\n    );\n\n  lastEven([|1, 2, 3, 4, 5|]) == Some(4);\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "foldRight",
                  "qualified_name": "TableclothArray.foldRight",
                  "type": {
                    "rendered": "'a TableclothArray.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This method is like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothArray.fold",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothArray.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothArray.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " except that it iterates over the elements of the array from last to first."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.foldRight ~f:(+) ~initial:0 (Array.repeat ~length:3 5) = 15",
                            "reason": "Array.foldRight(~f=(+), ~initial=0, Array.repeat(~length=3, 5)) == 15;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.foldRight ~f:List.cons ~initial:[] [|1; 2; 3|] = [1; 2; 3]",
                            "reason": "Array.foldRight(~f=List.cons, ~initial=[], [|1, 2, 3|]) == [1, 2, 3];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold_right",
                  "qualified_name": "TableclothArray.fold_right",
                  "type": {
                    "rendered": "'a TableclothArray.t -> initial:'b -> f:('b -> 'a -> 'b) -> 'b"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Combine"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "append",
                  "qualified_name": "TableclothArray.append",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a TableclothArray.t -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Creates a new array which is the result of appending the second array onto the end of the first."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let fortyTwos = Array.repeat ~length:2 42 in\n      let eightyOnes = Array.repeat ~length:3 81 in\n      Array.append fourtyTwos eightyOnes = [|42; 42; 81; 81; 81|];\n    ",
                            "reason": "{\n  let fortyTwos = Array.repeat(~length=2, 42);\n  let eightyOnes = Array.repeat(~length=3, 81);\n  Array.append(fourtyTwos, eightyOnes) == [|42, 42, 81, 81, 81|];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatten",
                  "qualified_name": "TableclothArray.flatten",
                  "type": {
                    "rendered": "'a TableclothArray.t TableclothArray.t -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Flatten an array of arrays into a single array:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.flatten [|[|1; 2|]; [|3|]; [|4; 5|]|] = [|1; 2; 3; 4; 5|]",
                            "reason": "Array.flatten([|[|1, 2|], [|3|], [|4, 5|]|]) == [|1, 2, 3, 4, 5|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "zip",
                  "qualified_name": "TableclothArray.zip",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'b TableclothArray.t -> ('a * 'b) TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two arrays by merging each pair of elements into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one array is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The same as "
                        },
                        {
                          "tag": "Code",
                          "value": "Array.map2 ~f:Tuple.make"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.zip [|1;2;3;4;5|] [|\"Dog\"; \"Eagle\"; \"Ferret\"|] = [|(1, \"Dog\"); (2, \"Eagle\"); (3, \"Ferret\")|]",
                            "reason": "Array.zip([|1, 2, 3, 4, 5|], [|\"Dog\", \"Eagle\", \"Ferret\"|])\n== [|(1, \"Dog\"), (2, \"Eagle\"), (3, \"Ferret\")|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map2",
                  "qualified_name": "TableclothArray.map2",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  'b TableclothArray.t -> f:('a -> 'b -> 'c) -> 'c TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two arrays, using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to combine each pair of elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one array is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let totals (xs : int array) (ys : int array) : int array =\n        Array.map2 ~f:(+) xs ys in\n\n      totals [|1;2;3|] [|4;5;6|] = [|5;7;9|]\n    ",
                            "reason": "{\n  let totals = (xs: array(int), ys: array(int)): array(int) =>\n    Array.map2(~f=(+), xs, ys);\n\n  totals([|1, 2, 3|], [|4, 5, 6|]) == [|5, 7, 9|];\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.map2\n        ~f:Tuple.create\n        [|\"alice\"; \"bob\"; \"chuck\"|]\n        [|2; 5; 7; 8|] =\n          [|(\"alice\",2); (\"bob\",5); (\"chuck\",7)|]\n    ",
                            "reason": "Array.map2(~f=Tuple.create, [|\"alice\", \"bob\", \"chuck\"|], [|2, 5, 7, 8|])\n== [|(\"alice\", 2), (\"bob\", 5), (\"chuck\", 7)|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map3",
                  "qualified_name": "TableclothArray.map3",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  'b TableclothArray.t ->\n  'c TableclothArray.t -> f:('a -> 'b -> 'c -> 'd) -> 'd TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine three arrays, using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " to combine each trio of elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If one array is longer, the extra elements are dropped."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.map3\n        ~f:Tuple3.create\n        [|\"alice\"; \"bob\"; \"chuck\"|]\n        [|2; 5; 7; 8;|]\n        [|true; false; true; false|] =\n          [|(\"alice\", 2, true); (\"bob\", 5, false); (\"chuck\", 7, true)|]\n    ",
                            "reason": "Array.map3(\n  ~f=Tuple3.create,\n  [|\"alice\", \"bob\", \"chuck\"|],\n  [|2, 5, 7, 8|],\n  [|true, false, true, false|],\n)\n== [|(\"alice\", 2, true), (\"bob\", 5, false), (\"chuck\", 7, true)|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Deconstruct"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "partition",
                  "qualified_name": "TableclothArray.partition",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  f:('a -> bool) -> 'a TableclothArray.t * 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Split an array into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of arrays. Values which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns true for will end up in "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple.first",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple.first",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple.first"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.partition [|1;2;3;4;5;6|] ~f:Int.isOdd = ([|1;3;5|], [|2;4;6|])",
                            "reason": "Array.partition([|1, 2, 3, 4, 5, 6|], ~f=Int.isOdd)\n== ([|1, 3, 5|], [|2, 4, 6|]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "splitAt",
                  "qualified_name": "TableclothArray.splitAt",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  index:int -> 'a TableclothArray.t * 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divides an array into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of arrays."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Elements which have index upto (but not including) "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be in the first component of the tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Elements with an index greater than or equal to "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be in the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": " is less than zero"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.splitAt [|1;2;3;4;5|] ~index:2 = ([|1;2|], [|3;4;5|])",
                            "reason": "Array.splitAt([|1, 2, 3, 4, 5|], ~index=2) == ([|1, 2|], [|3, 4, 5|]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.splitAt [|1;2;3;4;5|] ~index:10 = ([|1;2;3;4;5|], [||])",
                            "reason": "Array.splitAt([|1, 2, 3, 4, 5|], ~index=10) == ([|1, 2, 3, 4, 5|], [||]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.splitAt [|1;2;3;4;5|] ~index:0 = ([||], [|1;2;3;4;5|])",
                            "reason": "Array.splitAt([|1, 2, 3, 4, 5|], ~index=0) == ([||], [|1, 2, 3, 4, 5|]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "split_at",
                  "qualified_name": "TableclothArray.split_at",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  index:int -> 'a TableclothArray.t * 'a TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "splitWhen",
                  "qualified_name": "TableclothArray.splitWhen",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  f:('a -> bool) -> 'a TableclothArray.t * 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divides an array at the first element "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the first component contains the elements "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returned false for,\n    the second component includes the element that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " retutned "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for an all the remaining elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.splitWhen\n        [|5; 7; 8; 6; 4;|]\n        ~f:Int.isEven =\n        ([|5; 7|], [|8; 6; 4|])\n    ",
                            "reason": "Array.splitWhen([|5, 7, 8, 6, 4|], ~f=Int.isEven)\n== ([|5, 7|], [|8, 6, 4|]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.splitWhen\n        [|\"Ant\"; \"Bat\"; \"Cat\"|]\n        ~f:(fun animal -> String.length animal > 3) =\n          ([|\"Ant\"; \"Bat\"; \"Cat\"|], [||])\n    ",
                            "reason": "Array.splitWhen([|\"Ant\", \"Bat\", \"Cat\"|], ~f=animal =>\n  String.length(animal) > 3\n)\n== ([|\"Ant\", \"Bat\", \"Cat\"|], [||]);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.splitWhen [|2.; Float.pi; 1.111|] ~f:Float.isInteger =\n        ([||], [|2.; Float.pi; 1.111|])\n    ",
                            "reason": "Array.splitWhen([|2., Float.pi, 1.111|], ~f=Float.isInteger)\n== ([||], [|2., Float.pi, 1.111|]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "split_when",
                  "qualified_name": "TableclothArray.split_when",
                  "type": {
                    "rendered": "'a TableclothArray.t ->\n  f:('a -> bool) -> 'a TableclothArray.t * 'a TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unzip",
                  "qualified_name": "TableclothArray.unzip",
                  "type": {
                    "rendered": "('a * 'b) TableclothArray.t -> 'a TableclothArray.t * 'b TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Decompose an array of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of arrays."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.unzip [(0, true); (17, false); (1337, true)] = ([0;17;1337], [true; false; true])",
                            "reason": "Array.unzip([(0, true), (17, false), (1337, true)])\n== ([0, 17, 1337], [true, false, true]);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Iterate"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEach",
                  "qualified_name": "TableclothArray.forEach",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Iterates over the elements of invokes "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " for each element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.forEach [|1; 2; 3|] ~f:(fun int -> print (Int.toString int))",
                            "reason": "Array.forEach([|1, 2, 3|], ~f=int => print(Int.toString(int)));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each",
                  "qualified_name": "TableclothArray.for_each",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:('a -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEachWithIndex",
                  "qualified_name": "TableclothArray.forEachWithIndex",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Iterates over the elements of invokes "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " for each element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.forEachI [|1; 2; 3|] ~f:(fun index int -> printf \"%d: %d\" index int)\n      (*\n        0: 1\n        1: 2\n        2: 3\n      *)\n    ",
                            "reason": "Array.forEachI([|1, 2, 3|], ~f=(index, int) =>\n  printf(\"%d: %d\", index, int)\n);\n/*\n   0: 1\n   1: 2\n   2: 3\n */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each_with_index",
                  "qualified_name": "TableclothArray.for_each_with_index",
                  "type": {
                    "rendered": "'a TableclothArray.t -> f:(int -> 'a -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "values",
                  "qualified_name": "TableclothArray.values",
                  "type": {
                    "rendered": "'a option TableclothArray.t -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return all of the "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " values from an array of options"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.values [|(Some \"Ant\"); None; (Some \"Cat\")|] = [|\"Ant\"; \"Cat\"|]",
                            "reason": "Array.values([|Some(\"Ant\"), None, Some(\"Cat\")|]) == [|\"Ant\", \"Cat\"|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.values [|None; None; None|] = [||]",
                            "reason": "Array.values([|None, None, None|]) == [||];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "intersperse",
                  "qualified_name": "TableclothArray.intersperse",
                  "type": {
                    "rendered": "'a TableclothArray.t -> sep:'a -> 'a TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Places "
                        },
                        {
                          "tag": "Code",
                          "value": "sep"
                        },
                        {
                          "tag": "Raw",
                          "value": " between all the elements of the given array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.intersperse ~sep:\"on\" [|\"turtles\"; \"turtles\"; \"turtles\"|] =\n      [|\"turtles\"; \"on\"; \"turtles\"; \"on\"; \"turtles\"|]\n    ",
                            "reason": "Array.intersperse(~sep=\"on\", [|\"turtles\", \"turtles\", \"turtles\"|])\n== [|\"turtles\", \"on\", \"turtles\", \"on\", \"turtles\"|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.intersperse ~sep:0 [||] = [||]",
                            "reason": "Array.intersperse(~sep=0, [||]) == [||];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "chunksOf",
                  "qualified_name": "TableclothArray.chunksOf",
                  "type": {
                    "rendered": "'a TableclothArray.t -> size:int -> 'a TableclothArray.t TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Split an array into equally sized chunks."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If there aren't enough elements to make the last 'chunk', those elements are ignored."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.chunksOf ~size:2 [|\"#FFBA49\"; \"#9984D4\"; \"#20A39E\"; \"#EF5B5B\"; \"#23001E\"|] =  [|\n        [|\"#FFBA49\"; \"#9984D4\"|];\n        [|\"#20A39E\"; \"#EF5B5B\"|];\n      |]\n    ",
                            "reason": "Array.chunksOf(\n  ~size=2,\n  [|\"#FFBA49\", \"#9984D4\", \"#20A39E\", \"#EF5B5B\", \"#23001E\"|],\n)\n== [|[|\"#FFBA49\", \"#9984D4\"|], [|\"#20A39E\", \"#EF5B5B\"|]|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "chunks_of",
                  "qualified_name": "TableclothArray.chunks_of",
                  "type": {
                    "rendered": "'a TableclothArray.t -> size:int -> 'a TableclothArray.t TableclothArray.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sliding",
                  "qualified_name": "TableclothArray.sliding",
                  "type": {
                    "rendered": "?step:int ->\n  'a TableclothArray.t -> size:int -> 'a TableclothArray.t TableclothArray.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Provides a sliding 'window' of sub-arrays over an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The first sub-array starts at index "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " of the array and takes the first "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The sub-array then advances the index "
                        },
                        {
                          "tag": "Code",
                          "value": "step"
                        },
                        {
                          "tag": "Raw",
                          "value": " (which defaults to 1) positions before taking the next "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The sub-arrays are guaranteed to always be of length "
                        },
                        {
                          "tag": "Code",
                          "value": "size"
                        },
                        {
                          "tag": "Raw",
                          "value": " and iteration stops once a sub-array would extend beyond the end of the array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sliding [|1;2;3;4;5|] ~size:1 = [|[|1|]; [|2|]; [|3|]; [|4|]; [|5|]|] ",
                            "reason": "Array.sliding([|1, 2, 3, 4, 5|], ~size=1)\n== [|[|1|], [|2|], [|3|], [|4|], [|5|]|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sliding [|1;2;3;4;5|] ~size:2 = [|[|1;2|]; [|2;3|]; [|3;4|]; [|4;5|]|] ",
                            "reason": "Array.sliding([|1, 2, 3, 4, 5|], ~size=2)\n== [|[|1, 2|], [|2, 3|], [|3, 4|], [|4, 5|]|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sliding [|1;2;3;4;5|] ~size:3 = [|[|1;2;3|]; [|2;3;4|]; [|3;4;5|]|] ",
                            "reason": "Array.sliding([|1, 2, 3, 4, 5|], ~size=3)\n== [|[|1, 2, 3|], [|2, 3, 4|], [|3, 4, 5|]|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sliding [|1;2;3;4;5|] ~size:2 ~step:2 = [|[|1;2|]; [|3;4|]|] ",
                            "reason": "Array.sliding([|1, 2, 3, 4, 5|], ~size=2, ~step=2)\n== [|[|1, 2|], [|3, 4|]|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.sliding [|1;2;3;4;5|] ~size:1 ~step:3 = [|[|1|]; [|4|]|] ",
                            "reason": "Array.sliding([|1, 2, 3, 4, 5|], ~size=1, ~step=3) == [|[|1|], [|4|]|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "join",
                  "qualified_name": "TableclothArray.join",
                  "type": {
                    "rendered": "string TableclothArray.t -> sep:string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts an array of strings into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", placing "
                        },
                        {
                          "tag": "Code",
                          "value": "sep"
                        },
                        {
                          "tag": "Raw",
                          "value": " between each string in the result."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.join [|\"Ant\"; \"Bat\"; \"Cat\"|] ~sep:\", \" = \"Ant, Bat, Cat\"",
                            "reason": "Array.join([|\"Ant\", \"Bat\", \"Cat\"|], ~sep=\", \") == \"Ant, Bat, Cat\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "groupBy",
                  "qualified_name": "TableclothArray.groupBy",
                  "type": {
                    "rendered": "'value TableclothArray.t ->\n  ('key, 'id) Comparator.s ->\n  f:('value -> 'key) -> ('key, 'value list, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Collect elements which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " produces the same key for"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Produces a map from "
                        },
                        {
                          "tag": "Code",
                          "value": "'key"
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all elements which produce the same "
                        },
                        {
                          "tag": "Code",
                          "value": "'key"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animals = [\"Ant\"; \"Bear\"; \"Cat\"; \"Dewgong\"] in\n      Array.groupBy animals (module Int) ~f:String.length = Map.Int.fromList [\n        (3, [\"Cat\"; \"Ant\"]);\n        (4, [\"Bear\"]);\n        (7, [\"Dewgong\"]);\n      ]\n    ",
                            "reason": "{\n  let animals = [\"Ant\", \"Bear\", \"Cat\", \"Dewgong\"];\n  Array.groupBy(animals, (module Int), ~f=String.length)\n  == Map.Int.fromList([\n       (3, [\"Cat\", \"Ant\"]),\n       (4, [\"Bear\"]),\n       (7, [\"Dewgong\"]),\n     ]);\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "group_by",
                  "qualified_name": "TableclothArray.group_by",
                  "type": {
                    "rendered": "'value TableclothArray.t ->\n  ('key, 'id) Comparator.s ->\n  f:('value -> 'key) -> ('key, 'value list, 'id) TableclothMap.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "TableclothArray.toList",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of elements from an array."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.toList [|1;2;3|] = [1;2;3]",
                            "reason": "Array.toList([|1, 2, 3|]) == [1, 2, 3];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.toList (Array.ofList [3; 5; 8]) = [3; 5; 8]",
                            "reason": "Array.toList(Array.ofList([3, 5, 8])) == [3, 5, 8];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "TableclothArray.to_list",
                  "type": {
                    "rendered": "'a TableclothArray.t -> 'a list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toIndexedList",
                  "qualified_name": "TableclothArray.toIndexedList",
                  "type": {
                    "rendered": "'a TableclothArray.t -> (int * 'a) list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create an indexed "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " from an array. Each element of the array will be paired with its index as a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.toIndexedList [|\"cat\"; \"dog\"|] = [(0, \"cat\"); (1, \"dog\")]",
                            "reason": "Array.toIndexedList([|\"cat\", \"dog\"|]) == [(0, \"cat\"), (1, \"dog\")];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_indexed_list",
                  "qualified_name": "TableclothArray.to_indexed_list",
                  "type": {
                    "rendered": "'a TableclothArray.t -> (int * 'a) list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothArray.equal",
                  "type": {
                    "rendered": "('a -> 'a -> bool) -> 'a TableclothArray.t -> 'a TableclothArray.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two arrays for equality using the provided function to test pairs of elements."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothArray.compare",
                  "type": {
                    "rendered": "('a -> 'a -> int) -> 'a TableclothArray.t -> 'a TableclothArray.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two arrays using the provided function to compare pairs of elements."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    A shorter array is 'less' than a longer one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.compare Int.compare [|1;2;3|] [|1;2;3;4|] = -1",
                            "reason": "Array.compare(Int.compare, [|1, 2, 3|], [|1, 2, 3, 4|]) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.compare Int.compare [|1;2;3|] [|1;2;3|] = 0",
                            "reason": "Array.compare(Int.compare, [|1, 2, 3|], [|1, 2, 3|]) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.compare Int.compare [|1;2;5|] [|1;2;3|] = 1",
                            "reason": "Array.compare(Int.compare, [|1, 2, 5|], [|1, 2, 3|]) == 1;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothMap": {
        "tag": "Module",
        "value": {
          "name": "TableclothMap",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "A "
                  },
                  {
                    "tag": "Code",
                    "value": "Map"
                  },
                  {
                    "tag": "Raw",
                    "value": " represents a unique mapping from keys to values."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Code",
                    "value": "Map"
                  },
                  {
                    "tag": "Raw",
                    "value": " is an immutable data structure which means operations like "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Map.add",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Map.add",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Map.add"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Map.remove",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Map.remove",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Map.remove"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " do not modify the data structure, but return a new map with the desired changes."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Since maps of "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": "s and "
                  },
                  {
                    "tag": "Code",
                    "value": "string"
                  },
                  {
                    "tag": "Raw",
                    "value": "s are so common the specialized "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Map.Int",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Map.Int",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Map.Int"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Map.String",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Map.String",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Map.String"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " modules are available, which offer a convenient way to construct new maps."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Custom data types can be used with maps as long as the module satisfies the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.S",
                      "reference": {
                        "kind": "MODULETYPE",
                        "target": "Comparator.S",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.S"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " interface."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      module Point = struct\n        type t = int * int\n        let compare = Tuple2.compare Int.compare Int.compare\n        include Comparator.Make(struct\n          type nonrec t = t\n          let compare = compare\n        end)\n      end\n\n      type animal = \n        | Cow\n        | Pig\n        | Alpacca\n\n      let pointToAnimal : animal Map.Of(Point).t = \n        Map.fromList (module Points) [((0, 0), Alpacca); ((3, 4), Cow); ((6, 7), Sheep)]\n    ",
                      "reason": "module Point = {\n  type t = (int, int);\n  let compare = Tuple2.compare(Int.compare, Int.compare);\n  include Comparator.Make({\n    type nonrec t = t;\n    let compare = compare;\n  });\n};\n\ntype animal =\n  | Cow\n  | Pig\n  | Alpacca;\n\nlet pointToAnimal: Map.Of(Point).t(animal) = (\n  Map.fromList(\n    (module Points),\n    [((0, 0), Alpacca), ((3, 4), Cow), ((6, 7), Sheep)],\n  ):\n    Map.Of(Point).t(animal)\n);\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    See the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator",
                      "reference": {
                        "kind": "MODULE",
                        "target": "Comparator",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " module for a more details."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('key, 'value, 'id)",
                  "is_private": false,
                  "father": "TableclothMap",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "('key, 'value, 'id) Base.Map.t"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Of",
                  "kind": {
                    "tag": "ModuleFunctor",
                    "value": {
                      "parameter": {
                        "tag": "ModuleParameter",
                        "value": {
                          "name": "M",
                          "kind": {
                            "tag": "ModuleTypeAlias",
                            "value": "Comparator.S"
                          }
                        }
                      },
                      "result": {
                        "tag": "ModuleStruct",
                        "value": [
                          {
                            "tag": "Type",
                            "value": {
                              "name": "t",
                              "parameters": "'value",
                              "is_private": false,
                              "father": "TableclothMap.Of",
                              "field_comment": null,
                              "kind": {
                                "tag": "TypeAbstract",
                                "value": null
                              },
                              "manifest": {
                                "tag": "Other",
                                "value": {
                                  "rendered": "(M.t, 'value, M.identity) TableclothMap.t"
                                }
                              },
                              "info": null
                            }
                          }
                        ]
                      }
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This functor lets you describe the type of Maps a little more concisely."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let stringToInt : int Map.Of(String).t =\n        Map.fromList (module String) [(\"Apple\", 2); (\"Pear\", 0)]\n    ",
                            "reason": "let stringToInt: Map.Of(String).t(int) = (\n  Map.fromList((module String), [(\"Apple\", 2), (\"Pear\", 0)]):\n    Map.Of(String).t(int)\n);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Is the same as"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let stringToInt : (string, int, String.identity) Map.t =\n        Map.fromList (module String) [(\"Apple\", 2); (\"Pear\", 0)]\n    ",
                            "reason": "let stringToInt: Map.t(string, int, String.identity) = (\n  Map.fromList((module String), [(\"Apple\", 2), (\"Pear\", 0)]):\n    Map.t(string, int, String.identity)\n);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    You can create sets of modules types which conform to the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.S",
                      "reference": {
                        "kind": "MODULETYPE",
                        "target": "Comparator.S",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.S"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " signature by using "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.empty",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.empty",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.empty"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.singleton",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.singleton",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.singleton"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.fromList",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.fromList",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.fromList"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " or "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.fromArray",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.fromArray",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.fromArray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Specialised versions of the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.empty",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.empty",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.empty"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.singleton",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.singleton",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.singleton"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.fromList",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.fromList",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.fromList"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "TableclothMap.fromArray",
                      "reference": {
                        "kind": "VAL",
                        "target": "TableclothMap.fromArray",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "TableclothMap.fromArray"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " functions available in the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.Int",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.Int",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.Int"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set.String",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set.String",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set.String"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " sub-modules."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "empty",
                  "qualified_name": "TableclothMap.empty",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A map with nothing in it."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Often used as an intial value for functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.fold",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.fold\n        [|\"Pear\", \"Orange\", \"Grapefruit\"|]\n        ~initial:(Map.empty (module Int))\n        ~f:(fun lengthToFruit fruit ->\n          Map.add lengthToFruit (String.length fruit) fruit\n        )\n      |> Map.toArray\n      = [|(4, \"Pear\"); (6, \"Orange\"), (10, \"Grapefruit\")|]\n    ",
                            "reason": "Array.fold(\n  [|(\"Pear\", \"Orange\", \"Grapefruit\")|],\n  ~initial=Map.empty((module Int)),\n  ~f=(lengthToFruit, fruit) =>\n  Map.add(lengthToFruit, String.length(fruit), fruit)\n)\n|> Map.toArray == [|(4, \"Pear\"), ((6, \"Orange\"), (10, \"Grapefruit\"))|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    In this particular case you might want to use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.groupBy",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.groupBy",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.groupBy"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "singleton",
                  "qualified_name": "TableclothMap.singleton",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s ->\n  key:'key -> value:'value -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a map from a key and value"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Map.singleton (module Int) ~key:1 ~value:\"Ant\" |> Map.toList = [(1, \"Ant\")]",
                            "reason": "Map.singleton((module Int), ~key=1, ~value=\"Ant\")\n|> Map.toList == [(1, \"Ant\")];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "TableclothMap.fromArray",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s ->\n  ('key * 'value) array -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a map from an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of key-value tuples"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_array",
                  "qualified_name": "TableclothMap.from_array",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s ->\n  ('key * 'value) array -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "TableclothMap.fromList",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s ->\n  ('key * 'value) list -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a map of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of key-value tuples"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_list",
                  "qualified_name": "TableclothMap.from_list",
                  "type": {
                    "rendered": "('key, 'identity) Comparator.s ->\n  ('key * 'value) list -> ('key, 'value, 'identity) TableclothMap.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "add",
                  "qualified_name": "TableclothMap.add",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  key:'key -> value:'value -> ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Adds a new entry to a map. If "
                        },
                        {
                          "tag": "Code",
                          "value": "key"
                        },
                        {
                          "tag": "Raw",
                          "value": " is allready present, its previous value is replaced with "
                        },
                        {
                          "tag": "Code",
                          "value": "value"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.add\n        (Map.Int.fromList [(1, \"Ant\"); (2, \"Bat\")])\n        ~key:3\n        ~value:\"Cat\"\n      |> Map.toList = [(1, \"Ant\"); (2, \"Bat\"); (3, \"Cat\")]\n    ",
                            "reason": "Map.add(Map.Int.fromList([(1, \"Ant\"), (2, \"Bat\")]), ~key=3, ~value=\"Cat\")\n|> Map.toList == [(1, \"Ant\"), (2, \"Bat\"), (3, \"Cat\")];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Map.add (Map.Int.fromList [(1, \"Ant\"); (2, \"Bat\")]) ~key:2 ~value:\"Bug\" |> Map.toList = [(1, \"Ant\"); (2, \"Bug\")]",
                            "reason": "Map.add(Map.Int.fromList([(1, \"Ant\"), (2, \"Bat\")]), ~key=2, ~value=\"Bug\")\n|> Map.toList == [(1, \"Ant\"), (2, \"Bug\")];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(.?{}<-)",
                  "qualified_name": "TableclothMap.(.?{}<-)",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  'key -> 'value -> ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://caml.inria.fr/pub/docs/manual-ocaml/indexops.html ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " index operator"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothMap.add",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothMap.add",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothMap.add"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " Currently this is only supported by the OCaml syntax."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let indexToAnimal = Map.Int.fromList [(1, \"Ant\");(2, \"Bat\");(3, \"Cat\")] in\n      let indexToAnimal = numbers.Map.?{4} <- \"Dog\" in\n      indexToAnimal.Map.?{4} = Some \"Dog\"\n    ",
                            "reason": "{\n  let indexToAnimal =\n    Map.Int.fromList([(1, \"Ant\"), (2, \"Bat\"), (3, \"Cat\")]);\n  let indexToAnimal = Map..?{}<-(numbers, 4, \"Dog\");\n  Map..?{}(indexToAnimal, 4) == Some(\"Dog\");\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "remove",
                  "qualified_name": "TableclothMap.remove",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  'key -> ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Removes a key-value pair from a map based on they provided key."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animalPopulations = Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ] in\n      Map.remove animalPopulations \"Mosquito\" |> Map.toList = [\n        (\"Elephant\", 3_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n    ",
                            "reason": "{\n  let animalPopulations =\n    Map.String.fromList([\n      (\"Elephant\", 3_156),\n      (\"Mosquito\", 56_123_156),\n      (\"Rhino\", 3),\n      (\"Shrew\", 56_423),\n    ]);\n  Map.remove(animalPopulations, \"Mosquito\")\n  |> Map.toList == [(\"Elephant\", 3_156), (\"Rhino\", 3), (\"Shrew\", 56_423)];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get",
                  "qualified_name": "TableclothMap.get",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t -> 'key -> 'value option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the value associated with a key. If the key is not present in the map, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    let animalPopulations = Map.String.fromList "
                        },
                        {
                          "tag": "Code",
                          "value": "\n      (\"Elephant\", 3_156);\n      (\"Mosquito\", 56_123_156);\n      (\"Rhino\", 3);\n      (\"Shrew\", 56_423);\n    "
                        },
                        {
                          "tag": "Raw",
                          "value": " in\n    Map.get animalPopulations \"Shrew\" = Some 56_423;"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(.?{})",
                  "qualified_name": "TableclothMap.(.?{})",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t -> 'key -> 'value option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://caml.inria.fr/pub/docs/manual-ocaml/indexops.html ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " index operator"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Map.get",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Map.get",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Map.get"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " Currently this is only supported by the OCaml syntax."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let indexToAnimal = Map.Int.fromList [(1, \"Ant\");(2, \"Bat\");(3, \"Cat\")] in\n      indexToAnimal.Map.?{3} = Some \"Cat\"\n    ",
                            "reason": "{\n  let indexToAnimal =\n    Map.Int.fromList([(1, \"Ant\"), (2, \"Bat\"), (3, \"Cat\")]);\n  Map..?{}(indexToAnimal, 3) == Some(\"Cat\");\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "update",
                  "qualified_name": "TableclothMap.update",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  key:'key ->\n  f:('value option -> 'value option) -> ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Update the value for a specific key using "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": ". If "
                        },
                        {
                          "tag": "Code",
                          "value": "key"
                        },
                        {
                          "tag": "Raw",
                          "value": " is not present in the map "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " will be called with "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animalPopulations = Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ] in\n\n      Map.update animalPopulations ~key:\"Hedgehog\" ~f:(fun population ->\n        match population with\n        | None -> Some 1\n        | Some count -> Some (count + 1)\n      )\n      |> Map.toList = [\n        (\"Elephant\", 3_156);\n        (\"Hedgehog\", 1);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n    ",
                            "reason": "{\n  let animalPopulations =\n    Map.String.fromList([\n      (\"Elephant\", 3_156),\n      (\"Mosquito\", 56_123_156),\n      (\"Rhino\", 3),\n      (\"Shrew\", 56_423),\n    ]);\n\n  Map.update(animalPopulations, ~key=\"Hedgehog\", ~f=population =>\n    switch (population) {\n    | None => Some(1)\n    | Some(count) => Some(count + 1)\n    }\n  )\n  |> Map.toList\n  == [\n       (\"Elephant\", 3_156),\n       (\"Hedgehog\", 1),\n       (\"Mosquito\", 56_123_156),\n       (\"Rhino\", 3),\n       (\"Shrew\", 56_423),\n     ];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEmpty",
                  "qualified_name": "TableclothMap.isEmpty",
                  "type": {
                    "rendered": "('a, 'b, 'c) TableclothMap.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if a map is empty."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_empty",
                  "qualified_name": "TableclothMap.is_empty",
                  "type": {
                    "rendered": "('a, 'b, 'c) TableclothMap.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "length",
                  "qualified_name": "TableclothMap.length",
                  "type": {
                    "rendered": "('a, 'b, 'c) TableclothMap.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the number of key-value pairs present in the map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.Int.fromList [(1, \"Hornet\"); (3, \"Marmot\")]\n      |> Map.length = 2\n    ",
                            "reason": "Map.Int.fromList([(1, \"Hornet\"), (3, \"Marmot\")]) |> Map.length == 2;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "any",
                  "qualified_name": "TableclothMap.any",
                  "type": {
                    "rendered": "('a, 'value, 'b) TableclothMap.t -> f:('value -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for "
                        },
                        {
                          "tag": "Code",
                          "value": "any"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a map."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "all",
                  "qualified_name": "TableclothMap.all",
                  "type": {
                    "rendered": "('a, 'value, 'b) TableclothMap.t -> f:('value -> bool) -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for "
                        },
                        {
                          "tag": "Code",
                          "value": "all"
                        },
                        {
                          "tag": "Raw",
                          "value": " values in a map."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "find",
                  "qualified_name": "TableclothMap.find",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t ->\n  f:(key:'key -> value:'value -> bool) -> ('key * 'value) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " the first key-value pair for which "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " evaluates to true."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " doesn't return "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for any of the elements "
                        },
                        {
                          "tag": "Code",
                          "value": "find"
                        },
                        {
                          "tag": "Raw",
                          "value": " will return "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Searches starting from the smallest "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "key"
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.find ~f:(fun ~key ~value -> value > 10_000)\n        = Some (\"Mosquito\", 56_123_156)\n    ",
                            "reason": "Map.String.fromList([\n  (\"Elephant\", 3_156),\n  (\"Mosquito\", 56_123_156),\n  (\"Rhino\", 3),\n  (\"Shrew\", 56_423),\n])\n|> Map.find(~f=(~key, ~value) => value > 10_000)\n== Some((\"Mosquito\", 56_123_156));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "includes",
                  "qualified_name": "TableclothMap.includes",
                  "type": {
                    "rendered": "('key, 'a, 'b) TableclothMap.t -> 'key -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine if a map includes "
                        },
                        {
                          "tag": "Code",
                          "value": "key"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum",
                  "qualified_name": "TableclothMap.minimum",
                  "type": {
                    "rendered": "('key, 'a, 'b) TableclothMap.t -> 'key option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", the smallest "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "key "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " in the map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the map is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.Int.fromList [(8, \"Pigeon\"); (1, \"Hornet\"); (3, \"Marmot\")]\n      |> Map.minimum = Some 1\n    ",
                            "reason": "Map.Int.fromList([(8, \"Pigeon\"), (1, \"Hornet\"), (3, \"Marmot\")])\n|> Map.minimum == Some(1);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum",
                  "qualified_name": "TableclothMap.maximum",
                  "type": {
                    "rendered": "('key, 'a, 'b) TableclothMap.t -> 'key option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the largest "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "key "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " in the map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the map is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.Int.fromList [(8, \"Pigeon\"); (1, \"Hornet\"); (3, \"Marmot\")]\n      |> Map.maximum = Some 8\n    ",
                            "reason": "Map.Int.fromList([(8, \"Pigeon\"), (1, \"Hornet\"), (3, \"Marmot\")])\n|> Map.maximum == Some(8);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "extent",
                  "qualified_name": "TableclothMap.extent",
                  "type": {
                    "rendered": "('key, 'a, 'b) TableclothMap.t -> ('key * 'key) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the "
                        },
                        {
                          "tag": "Code",
                          "value": "(minimum, maximum)"
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "key"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": "s in the map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the map is empty."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.Int.fromList [(8, \"Pigeon\"); (1, \"Hornet\"); (3, \"Marmot\")]\n      |> Map.extent = Some (1, 8)\n    ",
                            "reason": "Map.Int.fromList([(8, \"Pigeon\"), (1, \"Hornet\"), (3, \"Marmot\")])\n|> Map.extent == Some((1, 8));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Combine"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "merge",
                  "qualified_name": "TableclothMap.merge",
                  "type": {
                    "rendered": "('key, 'v1, 'id) TableclothMap.t ->\n  ('key, 'v2, 'id) TableclothMap.t ->\n  f:('key -> 'v1 option -> 'v2 option -> 'v3 option) ->\n  ('key, 'v3, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two maps."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You provide a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " which is provided the key and the optional\n    value from each map and needs to account for the three possibilities:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    1. Only the 'left' map includes a value for the key.\n    2. Both maps contain a value for the key.\n    3. Only the 'right' map includes a value for the key."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You then traverse all the keys, building up whatever you want."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let animalToPopulation =\n        Map.String.fromList [\n          (\"Elephant\", 3_156);\n          (\"Shrew\", 56_423);\n        ]\n      in\n      let animalToPopulationGrowthRate = Map.String.fromList [\n        (\"Elephant\", 0.88);\n        (\"Squirrel\", 1.2);\n        (\"Python\", 4.0);\n      ] in\n\n      Map.merge\n        animalToPopulation\n        animalToPopulationGrowthRate\n        ~f:(fun _animal population growth ->\n          match (Option.both population growth) with\n          | Some (population, growth) ->\n              Some Float.((ofInt population) * growth)\n          | None -> None\n        )\n      |> Map.toList\n        = [(\"Elephant\", 2777.28)]\n    ",
                            "reason": "{\n  let animalToPopulation =\n    Map.String.fromList([(\"Elephant\", 3_156), (\"Shrew\", 56_423)]);\n\n  let animalToPopulationGrowthRate =\n    Map.String.fromList([\n      (\"Elephant\", 0.88),\n      (\"Squirrel\", 1.2),\n      (\"Python\", 4.0),\n    ]);\n\n  Map.merge(\n    animalToPopulation,\n    animalToPopulationGrowthRate,\n    ~f=(_animal, population, growth) =>\n    switch (Option.both(population, growth)) {\n    | Some((population, growth)) => Some(Float.(ofInt(population) * growth))\n    | None => None\n    }\n  )\n  |> Map.toList == [(\"Elephant\", 2777.28)];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Transform"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map",
                  "qualified_name": "TableclothMap.map",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  f:('value -> 'b) -> ('key, 'b, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Apply a function to all values in a dictionary."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.map ~f:Int.toString\n      |> Map.toList\n        = [\n        (\"Elephant\", \"3156\");\n        (\"Shrew\", \"56423\");\n      ]\n    ",
                            "reason": "Map.String.fromList([(\"Elephant\", 3_156), (\"Shrew\", 56_423)])\n|> Map.map(~f=Int.toString)\n|> Map.toList == [(\"Elephant\", \"3156\"), (\"Shrew\", \"56423\")];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "mapWithIndex",
                  "qualified_name": "TableclothMap.mapWithIndex",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  f:('key -> 'value -> 'b) -> ('key, 'b, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothMap.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothMap.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothMap.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with each values corresponding key"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map_with_index",
                  "qualified_name": "TableclothMap.map_with_index",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  f:('key -> 'value -> 'b) -> ('key, 'b, 'id) TableclothMap.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "filter",
                  "qualified_name": "TableclothMap.filter",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  f:('value -> bool) -> ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Keep elements that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.map ~f:(fun population -> population > 10_000)\n      |> Map.toList\n        = [\n        (\"Shrew\", \"56423\");\n      ]\n    ",
                            "reason": "Map.String.fromList([(\"Elephant\", 3_156), (\"Shrew\", 56_423)])\n|> Map.map(~f=population => population > 10_000)\n|> Map.toList == [(\"Shrew\", \"56423\")];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "partition",
                  "qualified_name": "TableclothMap.partition",
                  "type": {
                    "rendered": "('key, 'value, 'id) TableclothMap.t ->\n  f:(key:'key -> value:'value -> bool) ->\n  ('key, 'value, 'id) TableclothMap.t * ('key, 'value, 'id) TableclothMap.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divide a map into two, the first map will contain the key-value pairs that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " for, pairs that "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Raw",
                          "value": " for will end up in the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let (endangered, notEndangered) = Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.partition ~f:(fun population -> population < 10_000)\n      in\n\n      Map.toList endangered = [\n        (\"Elephant\", 3_156);\n        (\"Rhino\", 3);\n      ];\n\n      Map.toList notEndangered = [\n        (\"Mosquito\", 56_123_156);\n        (\"Shrew\", 56_423);\n      ];\n    ",
                            "reason": "{\n  let (endangered, notEndangered) =\n    Map.String.fromList([\n      (\"Elephant\", 3_156),\n      (\"Mosquito\", 56_123_156),\n      (\"Rhino\", 3),\n      (\"Shrew\", 56_423),\n    ])\n    |> Map.partition(~f=population => population < 10_000);\n\n  Map.toList(endangered) == [(\"Elephant\", 3_156), (\"Rhino\", 3)];\n\n  Map.toList(notEndangered)\n  == [(\"Mosquito\", 56_123_156), (\"Shrew\", 56_423)];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold",
                  "qualified_name": "TableclothMap.fold",
                  "type": {
                    "rendered": "('key, 'value, 'b) TableclothMap.t ->\n  initial:'a -> f:('a -> key:'key -> value:'value -> 'a) -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.fold",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with both the "
                        },
                        {
                          "tag": "Code",
                          "value": "key"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "value"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Iterate"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEach",
                  "qualified_name": "TableclothMap.forEach",
                  "type": {
                    "rendered": "('a, 'value, 'b) TableclothMap.t -> f:('value -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Runs a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " against each "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "value"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " in the map."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each",
                  "qualified_name": "TableclothMap.for_each",
                  "type": {
                    "rendered": "('a, 'value, 'b) TableclothMap.t -> f:('value -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEachWithIndex",
                  "qualified_name": "TableclothMap.forEachWithIndex",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t ->\n  f:(key:'key -> value:'value -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Map.forEach",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Map.forEach",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Map.forEach"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " except "
                        },
                        {
                          "tag": "Code",
                          "value": "~f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is also called with the corresponding key"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each_with_index",
                  "qualified_name": "TableclothMap.for_each_with_index",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t ->\n  f:(key:'key -> value:'value -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "keys",
                  "qualified_name": "TableclothMap.keys",
                  "type": {
                    "rendered": "('key, 'a, 'b) TableclothMap.t -> 'key list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all of the keys in a map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.keys = [\n        \"Elephant\";\n        \"Mosquito\";\n        \"Rhino\";\n        \"Shrew\";\n      ]\n    ",
                            "reason": "Map.String.fromList([\n  (\"Elephant\", 3_156),\n  (\"Mosquito\", 56_123_156),\n  (\"Rhino\", 3),\n  (\"Shrew\", 56_423),\n])\n|> Map.keys == [\"Elephant\", \"Mosquito\", \"Rhino\", \"Shrew\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "values",
                  "qualified_name": "TableclothMap.values",
                  "type": {
                    "rendered": "('a, 'value, 'b) TableclothMap.t -> 'value list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all of the values in a map."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Map.String.fromList [\n        (\"Elephant\", 3_156);\n        (\"Mosquito\", 56_123_156);\n        (\"Rhino\", 3);\n        (\"Shrew\", 56_423);\n      ]\n      |> Map.values = [\n        3_156;\n        56_123_156;\n        3;\n        56_423;\n      ]\n    ",
                            "reason": "Map.String.fromList([\n  (\"Elephant\", 3_156),\n  (\"Mosquito\", 56_123_156),\n  (\"Rhino\", 3),\n  (\"Shrew\", 56_423),\n])\n|> Map.values == [3_156, 56_123_156, 3, 56_423];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "TableclothMap.toArray",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t -> ('key * 'value) array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all of the key-value pairs in a map."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "TableclothMap.to_array",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t -> ('key * 'value) array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "TableclothMap.toList",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t -> ('key * 'value) list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of all of the key-value pairs in a map."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "TableclothMap.to_list",
                  "type": {
                    "rendered": "('key, 'value, 'a) TableclothMap.t -> ('key * 'value) list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Poly",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "identity",
                          "parameters": "",
                          "is_private": false,
                          "father": "TableclothMap.Poly",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": null,
                          "info": null
                        }
                      },
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "('key, 'value)",
                          "is_private": false,
                          "father": "TableclothMap.Poly",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "('key, 'value, TableclothMap.Poly.identity) TableclothMap.t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothMap.Poly.empty",
                          "type": {
                            "rendered": "unit -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "A map with nothing in it."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothMap.Poly.singleton",
                          "type": {
                            "rendered": "key:'key -> value:'value -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from a key and value"
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Map.Poly.singleton ~key:false ~value:1 |> Map.toList = [(false, 1)]",
                                    "reason": "Map.Poly.singleton(~key=false, ~value=1) |> Map.toList == [(false, 1)];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothMap.Poly.fromArray",
                          "type": {
                            "rendered": "('key * 'value) array -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothMap.Poly.from_array",
                          "type": {
                            "rendered": "('key * 'value) array -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothMap.Poly.fromList",
                          "type": {
                            "rendered": "('key * 'value) list -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothMap.Poly.from_list",
                          "type": {
                            "rendered": "('key * 'value) list -> ('key, 'value) TableclothMap.Poly.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct a Map which can be keyed by any data type using the polymorphic "
                        },
                        {
                          "tag": "Code",
                          "value": "compare"
                        },
                        {
                          "tag": "Raw",
                          "value": " function."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Int",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "'value",
                          "is_private": false,
                          "father": "TableclothMap.Int",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "'value Of(Int).t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothMap.Int.empty",
                          "type": {
                            "rendered": "'value TableclothMap.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "A map with nothing in it."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothMap.Int.singleton",
                          "type": {
                            "rendered": "key:int -> value:'value -> 'value TableclothMap.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from a key and value"
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Map.Int.singleton ~key:1 ~value:\"Ant\" |> Map.toList = [(1, \"Ant\")]",
                                    "reason": "Map.Int.singleton(~key=1, ~value=\"Ant\") |> Map.toList == [(1, \"Ant\")];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothMap.Int.fromArray",
                          "type": {
                            "rendered": "(int * 'value) array -> 'value TableclothMap.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothMap.Int.from_array",
                          "type": {
                            "rendered": "(int * 'value) array -> 'value TableclothMap.Int.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothMap.Int.fromList",
                          "type": {
                            "rendered": "(int * 'value) list -> 'value TableclothMap.Int.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map of a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothMap.Int.from_list",
                          "type": {
                            "rendered": "(int * 'value) list -> 'value TableclothMap.Int.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct a Map with "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s for keys."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "String",
                  "kind": {
                    "tag": "ModuleStruct",
                    "value": [
                      {
                        "tag": "Type",
                        "value": {
                          "name": "t",
                          "parameters": "'value",
                          "is_private": false,
                          "father": "TableclothMap.String",
                          "field_comment": null,
                          "kind": {
                            "tag": "TypeAbstract",
                            "value": null
                          },
                          "manifest": {
                            "tag": "Other",
                            "value": {
                              "rendered": "'value Of(TableclothString).t"
                            }
                          },
                          "info": null
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "empty",
                          "qualified_name": "TableclothMap.String.empty",
                          "type": {
                            "rendered": "'value TableclothMap.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "A map with nothing in it."
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "singleton",
                          "qualified_name": "TableclothMap.String.singleton",
                          "type": {
                            "rendered": "key:string -> value:'value -> 'value TableclothMap.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from a key and value"
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "Title",
                                  "value": {
                                    "size": 2,
                                    "label": null,
                                    "content": [
                                      {
                                        "tag": "Raw",
                                        "value": "Examples"
                                      }
                                    ]
                                  }
                                },
                                {
                                  "tag": "Newline",
                                  "value": "\n"
                                },
                                {
                                  "tag": "Raw",
                                  "value": "\n      "
                                },
                                {
                                  "tag": "CodePre",
                                  "value": {
                                    "ocaml": "Map.String.singleton ~key:\"Ant\" ~value:1 |> Map.toList = [(\"Ant\", 1)]",
                                    "reason": "Map.String.singleton(~key=\"Ant\", ~value=1) |> Map.toList == [(\"Ant\", 1)];\n"
                                  }
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromArray",
                          "qualified_name": "TableclothMap.String.fromArray",
                          "type": {
                            "rendered": "(string * 'value) array -> 'value TableclothMap.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from an "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "Array",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "Array",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "Array"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_array",
                          "qualified_name": "TableclothMap.String.from_array",
                          "type": {
                            "rendered": "(string * 'value) array -> 'value TableclothMap.String.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "fromList",
                          "qualified_name": "TableclothMap.String.fromList",
                          "type": {
                            "rendered": "(string * 'value) list -> 'value TableclothMap.String.t"
                          },
                          "info": {
                            "deprecated": null,
                            "description": {
                              "tag": "Text",
                              "value": [
                                {
                                  "tag": "Raw",
                                  "value": "Create a map from a "
                                },
                                {
                                  "tag": "Ref",
                                  "value": {
                                    "name": "List",
                                    "reference": {
                                      "kind": "Unknown",
                                      "target": "List",
                                      "content": [
                                        {
                                          "tag": "Code",
                                          "value": "List"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "tag": "Raw",
                                  "value": " of key-value tuples"
                                }
                              ]
                            },
                            "version": null,
                            "before": [
                            ],
                            "since": null,
                            "exceptions": [
                            ],
                            "return": null,
                            "see": [
                            ],
                            "custom": [
                            ]
                          },
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      },
                      {
                        "tag": "Value",
                        "value": {
                          "name": "from_list",
                          "qualified_name": "TableclothMap.String.from_list",
                          "type": {
                            "rendered": "(string * 'value) list -> 'value TableclothMap.String.t"
                          },
                          "info": null,
                          "parameters": {
                            "tag": "DescribedParameterList",
                            "value": [
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Construct a Map with "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothMap.String",
                            "reference": {
                              "kind": "MODULE",
                              "target": "TableclothMap.String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothMap.String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s for keys."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothOption": {
        "tag": "Module",
        "value": {
          "name": "TableclothOption",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Option",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Option",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Option"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " represents a value which may not be present."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    It is a variant containing the "
                  },
                  {
                    "tag": "Code",
                    "value": "(Some 'a)"
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Code",
                    "value": "None"
                  },
                  {
                    "tag": "Raw",
                    "value": " constructors"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      type 'a t =\n        | Some of 'a\n        | None\n    ",
                      "reason": "type t('a) =\n  | Some('a)\n  | None;\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Many other languages use "
                  },
                  {
                    "tag": "Code",
                    "value": "null"
                  },
                  {
                    "tag": "Raw",
                    "value": " or "
                  },
                  {
                    "tag": "Code",
                    "value": "nil"
                  },
                  {
                    "tag": "Raw",
                    "value": " to represent something similar."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Option",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Option",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Option"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " values are very common and they are used in a number of ways:"
                  },
                  {
                    "tag": "List",
                    "value": [
                      [
                        {
                          "tag": "Raw",
                          "value": "Initial values"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Optional function arguments"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Optional record fields"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Return values for functions that are not defined over their entire input range (partial functions)."
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Return value for otherwise reporting simple errors, where None is returned on error."
                        }
                      ]
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Lots of functions in "
                  },
                  {
                    "tag": "Code",
                    "value": "Standard"
                  },
                  {
                    "tag": "Raw",
                    "value": " return options, one you have one you can\n    work with the value it might contain by:"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "List",
                    "value": [
                      [
                        {
                          "tag": "Raw",
                          "value": "Pattern matching"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Using "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.andThen",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " (or their operators in "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Infix",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Infix",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Infix"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ")"
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Unwrapping it using "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.unwrap",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.unwrap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.unwrap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", or its operator "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.(|?)",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.(|?)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.(|?)"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      [
                        {
                          "tag": "Raw",
                          "value": "Converting a "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " into an exception using"
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.unwrapUnsafe",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.unwrapUnsafe",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.unwrapUnsafe"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    If the function you are writing can fail in a variety of ways, use a "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Result",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Result",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Result"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " instead to\n    better communicate with the caller."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    If a function only fails in unexpected, unrecoverable ways, maybe you want raise exception."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "'a",
                  "is_private": false,
                  "father": "TableclothOption",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "'a option"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "some",
                  "qualified_name": "TableclothOption.some",
                  "type": {
                    "rendered": "'a -> 'a option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A function version of the "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " constructor."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    In most situations you just want to use the "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " constructor directly."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    However OCaml doesn't support piping to variant constructors."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Note that when using the Reason syntax you "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "can"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " use fast pipe ("
                        },
                        {
                          "tag": "Code",
                          "value": "->"
                        },
                        {
                          "tag": "Raw",
                          "value": ") with variant constructors, so you don't need this function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See the "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://reasonml.github.io/docs/en/pipe-first#pipe-into-variants",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " Reason docs "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for more."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.reverse(\"desserts\") |> Option.some = Some \"desserts\" ",
                            "reason": "String.reverse(\"desserts\") |> Option.some == Some(\"desserts\");\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "and_",
                  "qualified_name": "TableclothOption.and_",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a TableclothOption.t -> 'a TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the first argument is "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": ", otherwise return the second argument."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  Unlike the built in "
                        },
                        {
                          "tag": "Code",
                          "value": "&&"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator, the "
                        },
                        {
                          "tag": "Code",
                          "value": "and_"
                        },
                        {
                          "tag": "Raw",
                          "value": " function does not short-circuit."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  When you call "
                        },
                        {
                          "tag": "Code",
                          "value": "and_"
                        },
                        {
                          "tag": "Raw",
                          "value": ", both arguments are evaluated before being passed to the function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.and_ (Some 11) (Some 22) = Some 22",
                            "reason": "Option.and_(Some(11), Some(22)) == Some(22);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.and_ None (Some 22) = None",
                            "reason": "Option.and_(None, Some(22)) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.and_ (Some 11) None = None",
                            "reason": "Option.and_(Some(11), None) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.and_ None None = None",
                            "reason": "Option.and_(None, None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "or_",
                  "qualified_name": "TableclothOption.or_",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a TableclothOption.t -> 'a TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return the first argument if it "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.isSome",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.isSome",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.isSome"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", otherwise return the second."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Unlike the built in "
                        },
                        {
                          "tag": "Code",
                          "value": "||"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator, the "
                        },
                        {
                          "tag": "Code",
                          "value": "or_"
                        },
                        {
                          "tag": "Raw",
                          "value": " function does not short-circuit.\n    When you call "
                        },
                        {
                          "tag": "Code",
                          "value": "or_"
                        },
                        {
                          "tag": "Raw",
                          "value": ", both arguments are evaluated before being passed to the function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.or_ (Some 11) (Some 22) = Some 11",
                            "reason": "Option.or_(Some(11), Some(22)) == Some(11);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.or_ None (Some 22) = Some 22",
                            "reason": "Option.or_(None, Some(22)) == Some(22);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.or_ (Some 11) None = Some 11",
                            "reason": "Option.or_(Some(11), None) == Some(11);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.or_ None None = None",
                            "reason": "Option.or_(None, None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "orElse",
                  "qualified_name": "TableclothOption.orElse",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a TableclothOption.t -> 'a TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Return the second argument if it "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.isSome",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.isSome",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.isSome"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", otherwise return the first."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.or_",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.or_",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.or_"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but in reverse. Useful when using the "
                        },
                        {
                          "tag": "Code",
                          "value": "|>"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.orElse (Some 11) (Some 22) = Some 22",
                            "reason": "Option.orElse(Some(11), Some(22)) == Some(22);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.orElse None (Some 22) = Some 22",
                            "reason": "Option.orElse(None, Some(22)) == Some(22);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.orElse (Some 11) None = Some 11",
                            "reason": "Option.orElse(Some(11), None) == Some(11);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.orElse None None = None",
                            "reason": "Option.orElse(None, None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "or_else",
                  "qualified_name": "TableclothOption.or_else",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a TableclothOption.t -> 'a TableclothOption.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "both",
                  "qualified_name": "TableclothOption.both",
                  "type": {
                    "rendered": "'a TableclothOption.t ->\n  'b TableclothOption.t -> ('a * 'b) TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform two options into an option of a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Tuple",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns None if either of the aguments is None."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.both (Some 3004) (Some \"Ant\") = Some (3004, \"Ant\")",
                            "reason": "Option.both(Some(3004), Some(\"Ant\")) == Some((3004, \"Ant\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.both (Some 3004) None = None",
                            "reason": "Option.both(Some(3004), None) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.both None (Some \"Ant\") = None",
                            "reason": "Option.both(None, Some(\"Ant\")) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.both None None = None",
                            "reason": "Option.both(None, None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flatten",
                  "qualified_name": "TableclothOption.flatten",
                  "type": {
                    "rendered": "'a TableclothOption.t TableclothOption.t -> 'a TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Flatten two optional layers into a single optional layer."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.flatten (Some (Some 4)) = Some 4",
                            "reason": "Option.flatten(Some(Some(4))) == Some(4);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.flatten (Some None) = None",
                            "reason": "Option.flatten(Some(None)) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.flatten (None) = None",
                            "reason": "Option.flatten(None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map",
                  "qualified_name": "TableclothOption.map",
                  "type": {
                    "rendered": "'a TableclothOption.t -> f:('a -> 'b) -> 'b TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Transform the value inside an option."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Leaves "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " untouched."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.(>>|)",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.(>>|)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.(>>|)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for an operator version of this function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map ~f:(fun x -> x * x) (Some 9) = Some 81",
                            "reason": "Option.map(~f=x => x * x, Some(9)) == Some(81);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map ~f:Int.toString (Some 9) = Some \"9\"",
                            "reason": "Option.map(~f=Int.toString, Some(9)) == Some(\"9\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map ~f:(fun x -> x * x) None = None",
                            "reason": "Option.map(~f=x => x * x, None) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "map2",
                  "qualified_name": "TableclothOption.map2",
                  "type": {
                    "rendered": "'a TableclothOption.t ->\n  'b TableclothOption.t -> f:('a -> 'b -> 'c) -> 'c TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Combine two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If both options are "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns, as "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " the result of running "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " on both values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If either value is "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": ", returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map2 (Some 3) (Some 4) ~f:Int.add = Some 7",
                            "reason": "Option.map2(Some(3), Some(4), ~f=Int.add) == Some(7);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map2 (Some 3) (Some 4) ~f:Tuple.make = Some (3, 4)",
                            "reason": "Option.map2(Some(3), Some(4), ~f=Tuple.make) == Some((3, 4));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map2 (Some 3) None ~f:Int.add = None",
                            "reason": "Option.map2(Some(3), None, ~f=Int.add) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.map2 None (Some 4) ~f:Int.add = None",
                            "reason": "Option.map2(None, Some(4), ~f=Int.add) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "andThen",
                  "qualified_name": "TableclothOption.andThen",
                  "type": {
                    "rendered": "'a TableclothOption.t ->\n  f:('a -> 'b TableclothOption.t) -> 'b TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Chain together many computations that may not return a value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    It is helpful to see its definition:\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let andThen t ~f =\n        match t with\n        | Some x -> f x\n        | None -> None\n    ",
                            "reason": "let andThen = (t, ~f) =>\n  switch (t) {\n  | Some(x) => f(x)\n  | None => None\n  };\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This means we only continue with the callback if we have a value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For example, say you need to parse some user input as a month:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let toValidMonth (month: int) : (int option) =\n        if (1 <= month && month <= 12) then\n          Some month\n        else\n          None\n      in\n\n      let userInput = \"5\" in\n\n      Int.ofString userInput\n      |> Option.andThen ~f:toValidMonth\n    ",
                            "reason": "{\n  let toValidMonth = (month: int): option(int) =>\n    if (1 <= month && month <= 12) {\n      Some(month);\n    } else {\n      None;\n    };\n\n  let userInput = \"5\";\n\n  Int.ofString(userInput) |> Option.andThen(~f=toValidMonth);\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "String.toInt"
                        },
                        {
                          "tag": "Raw",
                          "value": " produces "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " (because the "
                        },
                        {
                          "tag": "Code",
                          "value": "userInput"
                        },
                        {
                          "tag": "Raw",
                          "value": " was not an\n    integer) this entire chain of operations will short-circuit and result in\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": ". If "
                        },
                        {
                          "tag": "Code",
                          "value": "toValidMonth"
                        },
                        {
                          "tag": "Raw",
                          "value": " results in "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": ", again the chain of\n    computations will result in "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.(>>=)",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.(>>=)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.(>>=)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for an operator version of this function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.andThen (Some [1, 2, 3]) ~f:List.head = Some 1",
                            "reason": "Option.andThen(Some([(1, 2, 3)]), ~f=List.head) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.andThen (Some []) ~f:List.head = None",
                            "reason": "Option.andThen(Some([]), ~f=List.head) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "and_then",
                  "qualified_name": "TableclothOption.and_then",
                  "type": {
                    "rendered": "'a TableclothOption.t ->\n  f:('a -> 'b TableclothOption.t) -> 'b TableclothOption.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrap",
                  "qualified_name": "TableclothOption.unwrap",
                  "type": {
                    "rendered": "'a TableclothOption.t -> default:'a -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Unwrap an "
                        },
                        {
                          "tag": "Code",
                          "value": "option('a)"
                        },
                        {
                          "tag": "Raw",
                          "value": " returning "
                        },
                        {
                          "tag": "Code",
                          "value": "default"
                        },
                        {
                          "tag": "Raw",
                          "value": " if called with "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This comes in handy when paired with functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Map.get",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Map.get",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Map.get"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.head",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.head",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.head"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " which return an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.(|?)",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.(|?)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.(|?)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for an operator version of this function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This can be overused! Many cases are better handled using pattern matching, "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.andThen",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.unwrap ~default:99 (Some 42) = 42",
                            "reason": "Option.unwrap(~default=99, Some(42)) == 42;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.unwrap ~default:99 None = 99",
                            "reason": "Option.unwrap(~default=99, None) == 99;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.unwrap ~default:\"unknown\" (Map.get Map.String.empty \"Tom\") = \"unknown\"",
                            "reason": "Option.unwrap(~default=\"unknown\", Map.get(Map.String.empty, \"Tom\"))\n== \"unknown\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrapUnsafe",
                  "qualified_name": "TableclothOption.unwrapUnsafe",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Unwrap an "
                        },
                        {
                          "tag": "Code",
                          "value": "option('a)"
                        },
                        {
                          "tag": "Raw",
                          "value": " returning the enclosed "
                        },
                        {
                          "tag": "Code",
                          "value": "'a"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " in most situations it is better to use pattern matching, "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.unwrap",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.unwrap",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.unwrap"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.andThen",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ".\n    Can you structure your code slightly differently to avoid potentially raising an exception?"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Raises an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if called with "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.head [1;2;3] |> Option.unwrapUnsafe = 1",
                            "reason": "List.head([1, 2, 3]) |> Option.unwrapUnsafe == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.head [] |> Option.unwrapUnsafe",
                            "reason": "List.head([]) |> Option.unwrapUnsafe;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "unwrap_unsafe",
                  "qualified_name": "TableclothOption.unwrap_unsafe",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isSome",
                  "qualified_name": "TableclothOption.isSome",
                  "type": {
                    "rendered": "'a TableclothOption.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " is a "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    In most situtations you should just use pattern matching instead."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.isSome (Some 3004) = true",
                            "reason": "Option.isSome(Some(3004)) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.isSome None = false",
                            "reason": "Option.isSome(None) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_some",
                  "qualified_name": "TableclothOption.is_some",
                  "type": {
                    "rendered": "'a TableclothOption.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isNone",
                  "qualified_name": "TableclothOption.isNone",
                  "type": {
                    "rendered": "'a TableclothOption.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " is a "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    In most situtations you should just use pattern matching instead."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.isNone (Some 3004) = false",
                            "reason": "Option.isNone(Some(3004)) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.isNone None = true",
                            "reason": "Option.isNone(None) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_none",
                  "qualified_name": "TableclothOption.is_none",
                  "type": {
                    "rendered": "'a TableclothOption.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tap",
                  "qualified_name": "TableclothOption.tap",
                  "type": {
                    "rendered": "'a TableclothOption.t -> f:('a -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Run a function against a value, if it is present."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "TableclothOption.toArray",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an option to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " is represented as an empty list and "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " is represented as a list of one element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.toArray (Some 3004) = [|3004|]",
                            "reason": "Option.toArray(Some(3004)) == [|3004|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.toArray (None) = [||]",
                            "reason": "Option.toArray(None) == [||];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "TableclothOption.to_array",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "TableclothOption.toList",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an option to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " is represented as an empty list and "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Raw",
                          "value": " is represented as a list of one element."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.toList (Some 3004) = [3004]",
                            "reason": "Option.toList(Some(3004)) == [3004];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.toList (None) = []",
                            "reason": "Option.toList(None) == [];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "TableclothOption.to_list",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothOption.equal",
                  "type": {
                    "rendered": "('a -> 'a -> bool) -> 'a TableclothOption.t -> 'a TableclothOption.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two optional values for equality using the provided function"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.equal Int.equal (Some 1) (Some 1) = true",
                            "reason": "Option.equal(Int.equal, Some(1), Some(1)) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.equal Int.equal (Some 1) (Some 3) = false",
                            "reason": "Option.equal(Int.equal, Some(1), Some(3)) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.equal Int.equal (Some 1) None = false",
                            "reason": "Option.equal(Int.equal, Some(1), None) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.equal Int.equal None None = true",
                            "reason": "Option.equal(Int.equal, None, None) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothOption.compare",
                  "type": {
                    "rendered": "('a -> 'a -> int) -> 'a TableclothOption.t -> 'a TableclothOption.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two optional values using the provided function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    A "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " is \"less\" than a "
                        },
                        {
                          "tag": "Code",
                          "value": "Some"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.compare Int.compare (Some 1) (Some 3) = -1",
                            "reason": "Option.compare(Int.compare, Some(1), Some(3)) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.compare Int.compare (Some 1) None = 1",
                            "reason": "Option.compare(Int.compare, Some(1), None) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Option.compare Int.compare None None = 0",
                            "reason": "Option.compare(Int.compare, None, None) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Operators"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    For code that works extensively with "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Option",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Option",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Option"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "s these operators can make things\n    significantly more concise at the expense of placing a greater cognitive burden\n    on future readers."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      let nameToAge = Map.String.ofArray [|\n        (\"Ant\", 1);\n        (\"Bat\", 5);\n        (\"Cat\", 19);\n      |] in\n\n      let catAge = Map.get nameToAge \"Cat\" |? 8 in\n      (* 19 *)\n\n      Option.(\n        Map.get nameToAge \"Ant\" >>= (fun antAge ->\n          Map.get nameToAge \"Bat\" >>| (fun batAge ->\n            Int.absolute(batAge - antAge)\n          )\n        )\n      )\n      (* Some (4) *)\n    ",
                      "reason": "{\n  let nameToAge =\n    Map.String.ofArray([|(\"Ant\", 1), (\"Bat\", 5), (\"Cat\", 19)|]);\n\n  let catAge = Map.get(nameToAge, \"Cat\") |? 8;\n  /* 19 */\n\n  Option.(\n    Map.get(nameToAge, \"Ant\")\n    >>= (\n      antAge =>\n        Map.get(nameToAge, \"Bat\")\n        >>| (batAge => Int.absolute(batAge - antAge))\n    )\n  );\n};\n/* Some (4) */\n"
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(|?)",
                  "qualified_name": "TableclothOption.(|?)",
                  "type": {
                    "rendered": "'a TableclothOption.t -> 'a -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "get",
                            "reference": {
                              "kind": "Unknown",
                              "target": "get",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "get"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Some 3004 |? 8 = 3004",
                            "reason": "Some(3004) |? 8 == 3004;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "None |? 8 = 8",
                            "reason": "None |? 8 == 8;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(>>|)",
                  "qualified_name": "TableclothOption.(>>|)",
                  "type": {
                    "rendered": "'a TableclothOption.t -> ('a -> 'b) -> 'b TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.map",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Some \"desserts\" >>| String.reverse = Some \"stressed\"",
                            "reason": "Some(\"desserts\") >>| String.reverse == Some(\"stressed\");\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "None >>| String.reverse = None",
                            "reason": "None >>| String.reverse == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(>>=)",
                  "qualified_name": "TableclothOption.(>>=)",
                  "type": {
                    "rendered": "'a TableclothOption.t ->\n  ('a -> 'b TableclothOption.t) -> 'b TableclothOption.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The operator version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothOption.andThen",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothOption.andThen",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothOption.andThen"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Some [1, 2, 3] >>= List.head = Some 1",
                            "reason": "Some([(1, 2, 3)]) >>= List.head == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Some [] >>= List.head = None",
                            "reason": "Some([]) >>= List.head == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothString": {
        "tag": "Module",
        "value": {
          "name": "TableclothString",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for working with "
                  },
                  {
                    "tag": "Code",
                    "value": "\"strings\""
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "",
                  "is_private": false,
                  "father": "TableclothString",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "string"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Strings literals are created with the "
                  },
                  {
                    "tag": "Code",
                    "value": "\"double quotes\""
                  },
                  {
                    "tag": "Raw",
                    "value": " syntax."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromChar",
                  "qualified_name": "TableclothString.fromChar",
                  "type": {
                    "rendered": "char -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts the given character to an equivalent string of length one."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_char",
                  "qualified_name": "TableclothString.from_char",
                  "type": {
                    "rendered": "char -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromArray",
                  "qualified_name": "TableclothString.fromArray",
                  "type": {
                    "rendered": "char array -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a string from an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Note that these must be individual characters in single quotes, not strings of length one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.fromArray [||] = \"\"",
                            "reason": "String.fromArray([||]) == \"\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.fromArray [|'a'; 'b'; 'c'|] = \"abc\"",
                            "reason": "String.fromArray([|'a', 'b', 'c'|]) == \"abc\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_array",
                  "qualified_name": "TableclothString.from_array",
                  "type": {
                    "rendered": "char array -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromList",
                  "qualified_name": "TableclothString.fromList",
                  "type": {
                    "rendered": "char list -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a string from a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Note that these must be individual characters in single quotes, not strings of length one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.fromList [] = \"\"",
                            "reason": "String.fromList([]) == \"\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.fromList ['a'; 'b'; 'c'] = \"abc\"",
                            "reason": "String.fromList(['a', 'b', 'c']) == \"abc\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_list",
                  "qualified_name": "TableclothString.from_list",
                  "type": {
                    "rendered": "char list -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "repeat",
                  "qualified_name": "TableclothString.repeat",
                  "type": {
                    "rendered": "string -> count:int -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a string by repeating a string "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " time."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " is negative, "
                        },
                        {
                          "tag": "Code",
                          "value": "String.repeat"
                        },
                        {
                          "tag": "Raw",
                          "value": " throws a "
                        },
                        {
                          "tag": "Code",
                          "value": "RangeError"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.repeat ~count:3 \"ok\" = \"okokok\"",
                            "reason": "String.repeat(~count=3, \"ok\") == \"okokok\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.repeat ~count:3 \"\" = \"\"",
                            "reason": "String.repeat(~count=3, \"\") == \"\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.repeat ~count:0 \"ok\" = \"\"",
                            "reason": "String.repeat(~count=0, \"ok\") == \"\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "initialize",
                  "qualified_name": "TableclothString.initialize",
                  "type": {
                    "rendered": "int -> f:(int -> char) -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a string by providing a length and a function to choose characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns an empty string if the length is negative."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.initialize 8 ~f:(Fun.constant '9') = \"999999999\"",
                            "reason": "String.initialize(8, ~f=Fun.constant('9')) == \"999999999\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get",
                  "qualified_name": "TableclothString.get",
                  "type": {
                    "rendered": "string -> int -> char"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the character at the specified index"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "getAt",
                  "qualified_name": "TableclothString.getAt",
                  "type": {
                    "rendered": "string -> index:int -> char option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the character at "
                        },
                        {
                          "tag": "Code",
                          "value": "~index"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "get_at",
                  "qualified_name": "TableclothString.get_at",
                  "type": {
                    "rendered": "string -> index:int -> char option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(.?[])",
                  "qualified_name": "TableclothString.(.?[])",
                  "type": {
                    "rendered": "string -> int -> char option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://caml.inria.fr/pub/docs/manual-ocaml/indexops.html ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " index operator"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " version of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothString.getAt",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothString.getAt",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothString.getAt"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " Currently this is only supported by the OCaml syntax."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "(\"Doggie\".String.?[3]) = Some 'g'",
                            "reason": "String..?[](\"Doggie\", 3) == Some('g');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.(\"Doggie\".?[9]) = None",
                            "reason": "String.(.?[](\"Doggie\", 9)) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "reverse",
                  "qualified_name": "TableclothString.reverse",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Reverse a string"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function does not work with Unicode characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.reverse \"stressed\" = \"desserts\"",
                            "reason": "String.reverse(\"stressed\") == \"desserts\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "slice",
                  "qualified_name": "TableclothString.slice",
                  "type": {
                    "rendered": "?to_:int -> string -> from:int -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Extract a substring from the specified indicies."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.slice",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.slice",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.slice"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEmpty",
                  "qualified_name": "TableclothString.isEmpty",
                  "type": {
                    "rendered": "string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if a string is empty"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_empty",
                  "qualified_name": "TableclothString.is_empty",
                  "type": {
                    "rendered": "string -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "length",
                  "qualified_name": "TableclothString.length",
                  "type": {
                    "rendered": "string -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the length of the given string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Warning"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " if the string contains non-ASCII characters then "
                        },
                        {
                          "tag": "Code",
                          "value": "length"
                        },
                        {
                          "tag": "Raw",
                          "value": " will\n    not equal the number of characters"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.length \"abc\" = 3",
                            "reason": "String.length(\"abc\") == 3;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "startsWith",
                  "qualified_name": "TableclothString.startsWith",
                  "type": {
                    "rendered": "string -> prefix:string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See if the second string starts with "
                        },
                        {
                          "tag": "Code",
                          "value": "prefix"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.startsWith ~prefix:\"the\" \"theory\" = true",
                            "reason": "String.startsWith(~prefix=\"the\", \"theory\") == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.startsWith ~prefix:\"ory\" \"theory\" = false",
                            "reason": "String.startsWith(~prefix=\"ory\", \"theory\") == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "starts_with",
                  "qualified_name": "TableclothString.starts_with",
                  "type": {
                    "rendered": "string -> prefix:string -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "endsWith",
                  "qualified_name": "TableclothString.endsWith",
                  "type": {
                    "rendered": "string -> suffix:string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See if the second string ends with "
                        },
                        {
                          "tag": "Code",
                          "value": "suffix"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.endsWith ~suffix:\"the\" \"theory\" = false",
                            "reason": "String.endsWith(~suffix=\"the\", \"theory\") == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.endsWith ~suffix:\"ory\" \"theory\" = true",
                            "reason": "String.endsWith(~suffix=\"ory\", \"theory\") == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "ends_with",
                  "qualified_name": "TableclothString.ends_with",
                  "type": {
                    "rendered": "string -> suffix:string -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "includes",
                  "qualified_name": "TableclothString.includes",
                  "type": {
                    "rendered": "string -> substring:string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if one string appears within another"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.includes \"team\" ~substring:\"tea\" = true",
                            "reason": "String.includes(\"team\", ~substring=\"tea\") == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.includes \"team\" ~substring:\"i\" = false",
                            "reason": "String.includes(\"team\", ~substring=\"i\") == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.includes \"ABC\" ~substring:\"\" = true",
                            "reason": "String.includes(\"ABC\", ~substring=\"\") == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isCapitalized",
                  "qualified_name": "TableclothString.isCapitalized",
                  "type": {
                    "rendered": "string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test if the first letter of a string is upper case."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function works only with ASCII characters, not Unicode."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.isCapitalized \"Anastasia\" = true",
                            "reason": "String.isCapitalized(\"Anastasia\") == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.isCapitalized \"\" = false",
                            "reason": "String.isCapitalized(\"\") == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_capitalized",
                  "qualified_name": "TableclothString.is_capitalized",
                  "type": {
                    "rendered": "string -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Modify"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "dropLeft",
                  "qualified_name": "TableclothString.dropLeft",
                  "type": {
                    "rendered": "string -> count:int -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Drop "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " characters from the left side of a string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropLeft ~count:3 \"abcdefg\" = \"defg\"",
                            "reason": "String.dropLeft(~count=3, \"abcdefg\") == \"defg\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropLeft ~count:0 \"abcdefg\" = \"abcdefg\"",
                            "reason": "String.dropLeft(~count=0, \"abcdefg\") == \"abcdefg\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropLeft ~count:7 \"abcdefg\" = \"\"",
                            "reason": "String.dropLeft(~count=7, \"abcdefg\") == \"\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropLeft ~count:(-2) \"abcdefg\" = \"fg\"",
                            "reason": "String.dropLeft(~count=-2, \"abcdefg\") == \"fg\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropLeft ~count:8 \"abcdefg\" = \"\"",
                            "reason": "String.dropLeft(~count=8, \"abcdefg\") == \"\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "drop_left",
                  "qualified_name": "TableclothString.drop_left",
                  "type": {
                    "rendered": "string -> count:int -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "dropRight",
                  "qualified_name": "TableclothString.dropRight",
                  "type": {
                    "rendered": "string -> count:int -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Drop "
                        },
                        {
                          "tag": "Code",
                          "value": "count"
                        },
                        {
                          "tag": "Raw",
                          "value": " characters from the right side of a string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropRight ~count:3 \"abcdefg\" = \"abcd\"",
                            "reason": "String.dropRight(~count=3, \"abcdefg\") == \"abcd\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropRight ~count:0 \"abcdefg\" = \"abcdefg\"",
                            "reason": "String.dropRight(~count=0, \"abcdefg\") == \"abcdefg\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropRight ~count:7 \"abcdefg\" = \"\"",
                            "reason": "String.dropRight(~count=7, \"abcdefg\") == \"\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropRight ~count:(-2) \"abcdefg\" = \"abcdefg\"",
                            "reason": "String.dropRight(~count=-2, \"abcdefg\") == \"abcdefg\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.dropRight ~count:8 \"abcdefg\" = \"\"",
                            "reason": "String.dropRight(~count=8, \"abcdefg\") == \"\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "drop_right",
                  "qualified_name": "TableclothString.drop_right",
                  "type": {
                    "rendered": "string -> count:int -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "insertAt",
                  "qualified_name": "TableclothString.insertAt",
                  "type": {
                    "rendered": "string -> index:int -> value:TableclothString.t -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Insert a string at "
                        },
                        {
                          "tag": "Code",
                          "value": "index"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The character previously at index will now follow the inserted string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:2 \"abcde\" = \"ab**cde\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=2, \"abcde\") == \"ab**cde\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:0 \"abcde\" = \"**abcde\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=0, \"abcde\") == \"**abcde\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:5 \"abcde\" = \"abcde**\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=5, \"abcde\") == \"abcde**\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:(-2) \"abcde\" = \"abc**de\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=-2, \"abcde\") == \"abc**de\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:(-9) \"abcde\" = \"**abcde\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=-9, \"abcde\") == \"**abcde\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.insertAt ~insert:\"**\" ~index:9 \"abcde\" = \"abcde**\"",
                            "reason": "String.insertAt(~insert=\"**\", ~index=9, \"abcde\") == \"abcde**\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "insert_at",
                  "qualified_name": "TableclothString.insert_at",
                  "type": {
                    "rendered": "string -> index:int -> value:TableclothString.t -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toLowercase",
                  "qualified_name": "TableclothString.toLowercase",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts all upper case letters to lower case."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function works only with ASCII characters, not Unicode."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toLowercase \"AaBbCc123\" = \"aabbcc123\"",
                            "reason": "String.toLowercase(\"AaBbCc123\") == \"aabbcc123\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_lowercase",
                  "qualified_name": "TableclothString.to_lowercase",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toUppercase",
                  "qualified_name": "TableclothString.toUppercase",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts all lower case letters to upper case."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function works only with ASCII characters, not Unicode."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toUppercase \"AaBbCc123\" = \"AABBCC123\"",
                            "reason": "String.toUppercase(\"AaBbCc123\") == \"AABBCC123\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_uppercase",
                  "qualified_name": "TableclothString.to_uppercase",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "uncapitalize",
                  "qualified_name": "TableclothString.uncapitalize",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts the first letter to lower case if it is upper case."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function works only with ASCII characters, not Unicode."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.uncapitalize \"Anastasia\" = \"anastasia\"",
                            "reason": "String.uncapitalize(\"Anastasia\") == \"anastasia\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "capitalize",
                  "qualified_name": "TableclothString.capitalize",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts the first letter of "
                        },
                        {
                          "tag": "Code",
                          "value": "s"
                        },
                        {
                          "tag": "Raw",
                          "value": " to lowercase if it is upper case."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function works only with ASCII characters, not Unicode."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.uncapitalize \"den\" = \"Den\"",
                            "reason": "String.uncapitalize(\"den\") == \"Den\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "trim",
                  "qualified_name": "TableclothString.trim",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Removes leading and trailing "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char.isWhitespace",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char.isWhitespace",
                              "content": [
                                {
                                  "tag": "Raw",
                                  "value": " whitespace"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " from a string"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.trim \"  abc  \" = \"abc\"",
                            "reason": "String.trim(\"  abc  \") == \"abc\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.trim \"  abc def  \" = \"abc def\"",
                            "reason": "String.trim(\"  abc def  \") == \"abc def\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.trim \"\\r\\n\\t abc \\n\\n\" = \"abc\"",
                            "reason": "String.trim(\"\\r\\n\\t abc \\n\\n\") == \"abc\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "trimLeft",
                  "qualified_name": "TableclothString.trimLeft",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothString.trim",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothString.trim",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothString.trim"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but only drops characters from the beginning of the string."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "trim_left",
                  "qualified_name": "TableclothString.trim_left",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "trim_right",
                  "qualified_name": "TableclothString.trim_right",
                  "type": {
                    "rendered": "string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "TableclothString.trim",
                            "reference": {
                              "kind": "VAL",
                              "target": "TableclothString.trim",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "TableclothString.trim"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but only drops characters from the end of the string."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "padLeft",
                  "qualified_name": "TableclothString.padLeft",
                  "type": {
                    "rendered": "string -> int -> with_:string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Pad a string up to a minimum length"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the string is shorted than the proivded length, adds "
                        },
                        {
                          "tag": "Code",
                          "value": "with"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the left of the string until the minimum length is met"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.padLeft \"5\" 3 ~with_:\"0\" = \"005\"",
                            "reason": "String.padLeft(\"5\", 3, ~with_=\"0\") == \"005\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "pad_left",
                  "qualified_name": "TableclothString.pad_left",
                  "type": {
                    "rendered": "string -> int -> with_:string -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "padRight",
                  "qualified_name": "TableclothString.padRight",
                  "type": {
                    "rendered": "string -> int -> with_:string -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Pad a string up to a minimum length"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the string is shorted than the proivded length, adds "
                        },
                        {
                          "tag": "Code",
                          "value": "with"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the left of the string until the minimum length is met"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.padRight \"Ahh\" 7 ~with_:\"h\" = \"Ahhhhhh\"",
                            "reason": "String.padRight(\"Ahh\", 7, ~with_=\"h\") == \"Ahhhhhh\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "pad_right",
                  "qualified_name": "TableclothString.pad_right",
                  "type": {
                    "rendered": "string -> int -> with_:string -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Deconstruct"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "uncons",
                  "qualified_name": "TableclothString.uncons",
                  "type": {
                    "rendered": "string -> (char * string) option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns, as an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Option",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Option",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Option"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ", a tuple containing the first "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Char"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and the remaining String."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If given an empty string, returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.uncons \"abcde\" = Some ('a', \"bcde\")",
                            "reason": "String.uncons(\"abcde\") == Some(('a', \"bcde\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.uncons \"a\" = Some ('a', \"\")",
                            "reason": "String.uncons(\"a\") == Some(('a', \"\"));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.uncons \"\" = None",
                            "reason": "String.uncons(\"\") == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "split",
                  "qualified_name": "TableclothString.split",
                  "type": {
                    "rendered": "string -> on:string -> string list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Divide a string into a list of strings, splitting whenever "
                        },
                        {
                          "tag": "Code",
                          "value": "on"
                        },
                        {
                          "tag": "Raw",
                          "value": " is encountered."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      String.split ~on:\"/\" \"a/b/c\" = [\"a\"; \"b\"; \"c\"]\n      String.split ~on:\"--\" \"a--b--c\" = [\"a\"; \"b\"; \"c\"]\n      String.split ~on:\"/\" \"abc\" = [\"abc\"]\n      String.split ~on:\"/\" \"\" = [\"\"]\n      String.split ~on:\"\" \"abc\" = [\"a\"; \"b\"; \"c\"]\n    ",
                            "reason": "String.split(~on=\"/\", \"a/b/c\")\n== [\"a\", \"b\", \"c\"](String.split, ~on=\"--\", \"a--b--c\")\n== [\"a\", \"b\", \"c\"](String.split, ~on=\"/\", \"abc\")\n== [\"abc\"](String.split, ~on=\"/\", \"\")\n== [\"\"](String.split, ~on=\"\", \"abc\")\n== [\"a\", \"b\", \"c\"];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Iterate"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forEach",
                  "qualified_name": "TableclothString.forEach",
                  "type": {
                    "rendered": "string -> f:(char -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Run "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " on each character in a string."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "for_each",
                  "qualified_name": "TableclothString.for_each",
                  "type": {
                    "rendered": "string -> f:(char -> unit) -> unit"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fold",
                  "qualified_name": "TableclothString.fold",
                  "type": {
                    "rendered": "string -> initial:'a -> f:('a -> char -> 'a) -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.fold",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.fold",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.fold"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but the elements are "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Char"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toArray",
                  "qualified_name": "TableclothString.toArray",
                  "type": {
                    "rendered": "string -> char array"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the individual characters in the given string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toArray \"\" = [||]",
                            "reason": "String.toArray(\"\") == [||];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toArray \"abc\" = [|'a'; 'b'; 'c'|]",
                            "reason": "String.toArray(\"abc\") == [|'a', 'b', 'c'|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_array",
                  "qualified_name": "TableclothString.to_array",
                  "type": {
                    "rendered": "string -> char array"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toList",
                  "qualified_name": "TableclothString.toList",
                  "type": {
                    "rendered": "string -> char list"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of the individual characters in the given string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toList \"\" = []",
                            "reason": "String.toList(\"\") == [];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.toList \"abc\" = ['a'; 'b'; 'c']",
                            "reason": "String.toList(\"abc\") == ['a', 'b', 'c'];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_list",
                  "qualified_name": "TableclothString.to_list",
                  "type": {
                    "rendered": "string -> char list"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothString.equal",
                  "type": {
                    "rendered": "string -> string -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two string for equality"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothString.compare",
                  "type": {
                    "rendered": "string -> string -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two strings. Strings use 'dictionary' ordering.\n1\n    Also known as "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Lexicographical_order ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " lexicographical ordering "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.compare \"Z\" \"A\" = 1",
                            "reason": "String.compare(\"Z\", \"A\") == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.compare \"Be\" \"Bee\" = -1",
                            "reason": "String.compare(\"Be\", \"Bee\") == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.compare \"Pear\" \"pear\" = 1",
                            "reason": "String.compare(\"Pear\", \"pear\") == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "String.compare \"Peach\" \"Peach\" = 0",
                            "reason": "String.compare(\"Peach\", \"Peach\") == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "identity",
                  "parameters": "",
                  "is_private": false,
                  "father": "TableclothString",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": null,
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "comparator",
                  "qualified_name": "TableclothString.comparator",
                  "type": {
                    "rendered": "(TableclothString.t, TableclothString.identity) Comparator.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "TableclothChar": {
        "tag": "Module",
        "value": {
          "name": "TableclothChar",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for working with single characters."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Character literals are enclosed in "
                  },
                  {
                    "tag": "Code",
                    "value": "'a'"
                  },
                  {
                    "tag": "Raw",
                    "value": " pair of single quotes."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "let digit = '7'",
                      "reason": "let digit = '7';\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    The functions in this module work on ASCII characters (range 0-255) only,\n    "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "not Unicode"
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Since character 128 through 255 have varying values depending on what\n    standard you are using (ISO 8859-1 or Windows 1252), you are advised to\n    stick to the 0-127 range."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "",
                  "is_private": false,
                  "father": "TableclothChar",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "char"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    You can also create a "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Char",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Char",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Char"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " using single quotes:"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "let char = 'c'",
                      "reason": "let char = 'c';\n"
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromCode",
                  "qualified_name": "TableclothChar.fromCode",
                  "type": {
                    "rendered": "int -> char option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an ASCII "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Code_point ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " code point "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to a character."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " if the codepoint is outside the range of 0 to 255 inclusive."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromCode 65 = Some 'A'",
                            "reason": "Char.fromCode(65) == Some('A');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromCode 66 = Some 'B'",
                            "reason": "Char.fromCode(66) == Some('B');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromCode 3000 = None",
                            "reason": "Char.fromCode(3000) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromCode (-1) = None",
                            "reason": "Char.fromCode(-1) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The full range of extended ASCII is from "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "255"
                        },
                        {
                          "tag": "Raw",
                          "value": ". For numbers outside that range, you get "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_code",
                  "qualified_name": "TableclothChar.from_code",
                  "type": {
                    "rendered": "int -> char option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromString",
                  "qualified_name": "TableclothChar.fromString",
                  "type": {
                    "rendered": "string -> char option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a string to character. Returns None when the string isn't of length one."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromString \"A\" = Some 'A'",
                            "reason": "Char.fromString(\"A\") == Some('A');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromString \" \" = Some ' '",
                            "reason": "Char.fromString(\" \") == Some(' ');\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromString \"\" = None",
                            "reason": "Char.fromString(\"\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromString \"abc\" = None",
                            "reason": "Char.fromString(\"abc\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.fromString \" a\" = None",
                            "reason": "Char.fromString(\" a\") == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_string",
                  "qualified_name": "TableclothChar.from_string",
                  "type": {
                    "rendered": "string -> char option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isLowercase",
                  "qualified_name": "TableclothChar.isLowercase",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect lower case ASCII characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase 'a' = true",
                            "reason": "Char.isLowercase('a') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase 'b' = true",
                            "reason": "Char.isLowercase('b') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase 'z' = true",
                            "reason": "Char.isLowercase('z') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase '0' = false",
                            "reason": "Char.isLowercase('0') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase 'A' = false",
                            "reason": "Char.isLowercase('A') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLowercase '-' = false",
                            "reason": "Char.isLowercase('-') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_lowercase",
                  "qualified_name": "TableclothChar.is_lowercase",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isUppercase",
                  "qualified_name": "TableclothChar.isUppercase",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect upper case ASCII characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase 'A' = true",
                            "reason": "Char.isUppercase('A') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase 'B' = true",
                            "reason": "Char.isUppercase('B') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase 'Z' = true",
                            "reason": "Char.isUppercase('Z') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase 'h' = false",
                            "reason": "Char.isUppercase('h') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase '0' = false",
                            "reason": "Char.isUppercase('0') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isUppercase '-' = false",
                            "reason": "Char.isUppercase('-') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_uppercase",
                  "qualified_name": "TableclothChar.is_uppercase",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isLetter",
                  "qualified_name": "TableclothChar.isLetter",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect upper and lower case ASCII alphabetic characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter 'a' = true",
                            "reason": "Char.isLetter('a') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter 'b' = true",
                            "reason": "Char.isLetter('b') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter 'E' = true",
                            "reason": "Char.isLetter('E') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter 'Y' = true",
                            "reason": "Char.isLetter('Y') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter '0' = false",
                            "reason": "Char.isLetter('0') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isLetter '-' = false",
                            "reason": "Char.isLetter('-') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_letter",
                  "qualified_name": "TableclothChar.is_letter",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isDigit",
                  "qualified_name": "TableclothChar.isDigit",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect when a character is a number"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isDigit '0' = true",
                            "reason": "Char.isDigit('0') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isDigit '1' = true",
                            "reason": "Char.isDigit('1') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isDigit '9' = true",
                            "reason": "Char.isDigit('9') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isDigit 'a' = false",
                            "reason": "Char.isDigit('a') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isDigit 'b' = false",
                            "reason": "Char.isDigit('b') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_digit",
                  "qualified_name": "TableclothChar.is_digit",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isAlphanumeric",
                  "qualified_name": "TableclothChar.isAlphanumeric",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect upper case, lower case and digit ASCII characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric 'a' = true",
                            "reason": "Char.isAlphanumeric('a') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric 'b' = true",
                            "reason": "Char.isAlphanumeric('b') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric 'E' = true",
                            "reason": "Char.isAlphanumeric('E') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric 'Y' = true",
                            "reason": "Char.isAlphanumeric('Y') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric '0' = true",
                            "reason": "Char.isAlphanumeric('0') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric '7' = true",
                            "reason": "Char.isAlphanumeric('7') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isAlphanumeric '-' = false",
                            "reason": "Char.isAlphanumeric('-') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_alphanumeric",
                  "qualified_name": "TableclothChar.is_alphanumeric",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isPrintable",
                  "qualified_name": "TableclothChar.isPrintable",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect if a character is a "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/ASCII#Printable_characters ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " printable "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " character"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    A Printable character has a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char.toCode",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char.toCode",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Char.toCode"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " in the range 32 to 127, inclusive ("
                        },
                        {
                          "tag": "Code",
                          "value": "' '"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "'~'"
                        },
                        {
                          "tag": "Raw",
                          "value": ")."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isPrintable 'G' = true",
                            "reason": "Char.isPrintable('G') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isPrintable '%' = true",
                            "reason": "Char.isPrintable('%') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isPrintable ' ' = true",
                            "reason": "Char.isPrintable(' ') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isPrintable '\\t' = false",
                            "reason": "Char.isPrintable('\\t') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isPrintable '\\007' = false",
                            "reason": "Char.isPrintable('\\007') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_printable",
                  "qualified_name": "TableclothChar.is_printable",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isWhitespace",
                  "qualified_name": "TableclothChar.isWhitespace",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Detect one of the following characters:"
                        },
                        {
                          "tag": "List",
                          "value": [
                            [
                              {
                                "tag": "Code",
                                "value": "'\\t'"
                              },
                              {
                                "tag": "Raw",
                                "value": " (tab)"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "'\\n'"
                              },
                              {
                                "tag": "Raw",
                                "value": " (newline)"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "'\\011'"
                              },
                              {
                                "tag": "Raw",
                                "value": " (vertical tab)"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "'\\012'"
                              },
                              {
                                "tag": "Raw",
                                "value": " (form feed)"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "'\\r'"
                              },
                              {
                                "tag": "Raw",
                                "value": " (carriage return)"
                              }
                            ],
                            [
                              {
                                "tag": "Code",
                                "value": "' '"
                              },
                              {
                                "tag": "Raw",
                                "value": " (space)"
                              }
                            ]
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isWhitespace '\\t' = true",
                            "reason": "Char.isWhitespace('\\t') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isWhitespace ' ' = true",
                            "reason": "Char.isWhitespace(' ') == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isWhitespace '?' = false",
                            "reason": "Char.isWhitespace('?') == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.isWhitespace 'G' = false",
                            "reason": "Char.isWhitespace('G') == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_whitespace",
                  "qualified_name": "TableclothChar.is_whitespace",
                  "type": {
                    "rendered": "char -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Modify"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toLowercase",
                  "qualified_name": "TableclothChar.toLowercase",
                  "type": {
                    "rendered": "char -> char"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts an ASCII character to lower case, preserving non alphabetic ASCII characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toLowercase 'A' = 'a'",
                            "reason": "Char.toLowercase('A') == 'a';\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toLowercase 'B' = 'b'",
                            "reason": "Char.toLowercase('B') == 'b';\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toLowercase '7' = '7'",
                            "reason": "Char.toLowercase('7') == '7';\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_lowercase",
                  "qualified_name": "TableclothChar.to_lowercase",
                  "type": {
                    "rendered": "char -> char"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toUppercase",
                  "qualified_name": "TableclothChar.toUppercase",
                  "type": {
                    "rendered": "char -> char"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an ASCII character to upper case, preserving non alphabetic ASCII characters."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "toUppercase 'a' = 'A'",
                            "reason": "toUppercase('a') == 'A';\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "toUppercase 'b' = 'B'",
                            "reason": "toUppercase('b') == 'B';\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "toUppercase '7' = '7'",
                            "reason": "toUppercase('7') == '7';\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_uppercase",
                  "qualified_name": "TableclothChar.to_uppercase",
                  "type": {
                    "rendered": "char -> char"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toCode",
                  "qualified_name": "TableclothChar.toCode",
                  "type": {
                    "rendered": "char -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert to the corresponding ASCII "
                        },
                        {
                          "tag": "Code",
                          "value": "code point"
                        },
                        {
                          "tag": "Code",
                          "value": "cp"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "cp"
                        },
                        {
                          "tag": "Raw",
                          "value": ": https://en.wikipedia.org/wiki/Code_point"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toCode 'A' = 65",
                            "reason": "Char.toCode('A') == 65;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toCode 'B' = 66",
                            "reason": "Char.toCode('B') == 66;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_code",
                  "qualified_name": "TableclothChar.to_code",
                  "type": {
                    "rendered": "char -> int"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toString",
                  "qualified_name": "TableclothChar.toString",
                  "type": {
                    "rendered": "char -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a character into a string."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toString 'A' = \"A\"",
                            "reason": "Char.toString('A') == \"A\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toString '{' = \"{\"",
                            "reason": "Char.toString('{') == \"{\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toString '7' = \"7\"",
                            "reason": "Char.toString('7') == \"7\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_string",
                  "qualified_name": "TableclothChar.to_string",
                  "type": {
                    "rendered": "char -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toDigit",
                  "qualified_name": "TableclothChar.toDigit",
                  "type": {
                    "rendered": "char -> int option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a digit character to its corresponding "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " when the character isn't a digit."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toDigit \"7\" = Some 7",
                            "reason": "Char.toDigit(\"7\") == Some(7);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toDigit \"0\" = Some 0",
                            "reason": "Char.toDigit(\"0\") == Some(0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toDigit \"A\" = None",
                            "reason": "Char.toDigit(\"A\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Char.toDigit \"\" = None",
                            "reason": "Char.toDigit(\"\") == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_digit",
                  "qualified_name": "TableclothChar.to_digit",
                  "type": {
                    "rendered": "char -> int option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "TableclothChar.equal",
                  "type": {
                    "rendered": "TableclothChar.t -> TableclothChar.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Char"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s for equality"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "TableclothChar.compare",
                  "type": {
                    "rendered": "TableclothChar.t -> TableclothChar.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Char",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Char",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Char"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "identity",
                  "parameters": "",
                  "is_private": false,
                  "father": "TableclothChar",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": null,
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "comparator",
                  "qualified_name": "TableclothChar.comparator",
                  "type": {
                    "rendered": "(TableclothChar.t, TableclothChar.identity) Comparator.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Internal": {
        "tag": "Module",
        "value": {
          "name": "Internal",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Value",
                "value": {
                  "name": "toBaseComparator",
                  "qualified_name": "Internal.toBaseComparator",
                  "type": {
                    "rendered": "('a, 'id) Comparator.s -> ('a, 'id) Base.Map.comparator"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": null
        }
      },
      "Int": {
        "tag": "Module",
        "value": {
          "name": "Int",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "The platform-dependant "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/Signed_number_representations ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " signed "
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/Integer ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " integer"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " type."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    An "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": " is a whole number."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": "s are subject to "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/Integer_overflow ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " overflow "
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", meaning that "
                  },
                  {
                    "tag": "Code",
                    "value": "Int.maximumValue + 1 = Int.minimumValue"
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    If you need to work with integers larger than "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.maximumValue",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.maximumValue",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.maximumValue"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " (or smaller than "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.minimumValue",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.minimumValue",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.minimumValue"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " you can use the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Integer",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Integer",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Integer"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " module."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Valid syntax for "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": "s includes:\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      0\n      42\n      9000\n      1_000_000\n      1_000_000\n      0xFF (* 255 in hexadecimal *)\n      0x000A (* 10 in hexadecimal *)\n    ",
                      "reason": "0(\n  42,\n  9000,\n  1_000_000,\n  1_000_000,\n  0xFF, /* 255 in hexadecimal */\n  0x000A,\n); /* 10 in hexadecimal */\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Note:"
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " The number of bits used for an "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": " is platform dependent."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    When targeting Bucklescript "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " Ints are 32 bits",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " https://bucklescript.github.io/docs/en/common-data-types.html#int "
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    When targeting native OCaml uses 31-bits on 32-bit platforms and 63-bits on 64-bit platforms\n    which means that "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": " math is well-defined in the range "
                  },
                  {
                    "tag": "Code",
                    "value": "-2 ** 30"
                  },
                  {
                    "tag": "Raw",
                    "value": " to "
                  },
                  {
                    "tag": "Code",
                    "value": "2 ** 30 - 1"
                  },
                  {
                    "tag": "Raw",
                    "value": " for 32bit platforms "
                  },
                  {
                    "tag": "Code",
                    "value": "-2 ** 62"
                  },
                  {
                    "tag": "Raw",
                    "value": " to "
                  },
                  {
                    "tag": "Code",
                    "value": "2 ** 62 - 1"
                  },
                  {
                    "tag": "Raw",
                    "value": " for 64bit platforms."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Outside of that range, the behavior is determined by the compilation target."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    You can read about the reasons for OCaml's unusual integer sizes "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://v1.realworldocaml.org/v1/en/html/memory-representation-of-values.html",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " here "
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Emphasize",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Historical Note: "
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " The name "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": " comes from the term "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/Integer ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " integer"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "). It appears\n    that the "
                  },
                  {
                    "tag": "Code",
                    "value": "int"
                  },
                  {
                    "tag": "Raw",
                    "value": " abbreviation was introduced in the programming language ALGOL 68."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Today, almost all programming languages use this abbreviation."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "",
                  "is_private": false,
                  "father": "Int",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "int"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Constants "
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "zero",
                  "qualified_name": "Int.zero",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The literal "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": " as a named value"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "one",
                  "qualified_name": "Int.one",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The literal "
                        },
                        {
                          "tag": "Code",
                          "value": "1"
                        },
                        {
                          "tag": "Raw",
                          "value": " as a named value"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximumValue",
                  "qualified_name": "Int.maximumValue",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The maximum representable "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " on the current platform"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum_value",
                  "qualified_name": "Int.maximum_value",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimumValue",
                  "qualified_name": "Int.minimumValue",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The minimum representable "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " on the current platform"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum_value",
                  "qualified_name": "Int.minimum_value",
                  "type": {
                    "rendered": "Int.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromString",
                  "qualified_name": "Int.fromString",
                  "type": {
                    "rendered": "string -> Int.t option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Attempt to parse a "
                        },
                        {
                          "tag": "Code",
                          "value": "string"
                        },
                        {
                          "tag": "Raw",
                          "value": " into a "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"0\" = Some 0.",
                            "reason": "Int.fromString(\"0\") == Some(0.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"42\" = Some 42.",
                            "reason": "Int.fromString(\"42\") == Some(42.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"-3\" = Some (-3)",
                            "reason": "Int.fromString(\"-3\") == Some(-3);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"123_456\" = Some 123_456",
                            "reason": "Int.fromString(\"123_456\") == Some(123_456);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"0xFF\" = Some 255",
                            "reason": "Int.fromString(\"0xFF\") == Some(255);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"0x00A\" = Some 10",
                            "reason": "Int.fromString(\"0x00A\") == Some(10);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"Infinity\" = None",
                            "reason": "Int.fromString(\"Infinity\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.fromString \"NaN\" = None",
                            "reason": "Int.fromString(\"NaN\") == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_string",
                  "qualified_name": "Int.from_string",
                  "type": {
                    "rendered": "string -> Int.t option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Operators"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Note "
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " You do not need to open the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int",
                      "reference": {
                        "kind": "MODULE",
                        "target": "Int",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " module to use the\n    "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.(+)",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.(+)",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.(+)"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.(-)",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.(-)",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.(-)"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.( * )",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.( * )",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.( * )"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.( ** )",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.( ** )",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.( ** )"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": ", "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.(mod)",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.(mod)",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.(mod)"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " or "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Int.(/)",
                      "reference": {
                        "kind": "VAL",
                        "target": "Int.(/)",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Int.(/)"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " operators, these are\n    available as soon as you "
                  },
                  {
                    "tag": "Code",
                    "value": "open Standard"
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "add",
                  "qualified_name": "Int.add",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Add two "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " numbers."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.add 3002 4004 = 7006",
                            "reason": "Int.add(3002, 4004) == 7006;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  Or using the globally available operator:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "3002 + 4004 = 7006",
                            "reason": "3002 + 4004 == 7006;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  You "
                        },
                        {
                          "tag": "Emphasize",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "cannot "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " add an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " and a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " directly though."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.add",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.add",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.add"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for why, and how to overcome this limitation."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(+)",
                  "qualified_name": "Int.(+)",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.add",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.add",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.add"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "subtract",
                  "qualified_name": "Int.subtract",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Subtract numbers"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.subtract 4 3 = 1",
                            "reason": "Int.subtract(4, 3) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the operator can be used:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "4 - 3 = 1",
                            "reason": "4 - 3 == 1;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(-)",
                  "qualified_name": "Int.(-)",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.subtract",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.subtract",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.subtract"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "multiply",
                  "qualified_name": "Int.multiply",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Multiply "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s like"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.multiply 2 7 = 14",
                            "reason": "Int.multiply(2, 7) == 14;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the operator can be used:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "(2 * 7) = 14",
                            "reason": "2 * 7 == 14;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "( * )",
                  "qualified_name": "Int.( * )",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.multiply",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.multiply",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.multiply"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "divide",
                  "qualified_name": "Int.divide",
                  "type": {
                    "rendered": "Int.t -> by:Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Integer division"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Notice that the remainder is discarded."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Throws "
                        },
                        {
                          "tag": "Code",
                          "value": "Division_by_zero"
                        },
                        {
                          "tag": "Raw",
                          "value": " when the divisor is "
                        },
                        {
                          "tag": "Code",
                          "value": "0"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.divide 3 ~by:2 = 1",
                            "reason": "Int.divide(3, ~by=2) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "27 / 5 = 5",
                            "reason": "27 / 5 == 5;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(/)",
                  "qualified_name": "Int.(/)",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.divide",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.divide",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.divide"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(/.)",
                  "qualified_name": "Int.(/.)",
                  "type": {
                    "rendered": "Int.t -> Int.t -> float"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Floating point division"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.(3 /. 2) = 1.5",
                            "reason": "Int.(3 /. 2) == 1.5;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.(27 /. 5) = 5.25",
                            "reason": "Int.(27 /. 5) == 5.25;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.(8 /. 4) = 2.0",
                            "reason": "Int.(8 /. 4) == 2.0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "power",
                  "qualified_name": "Int.power",
                  "type": {
                    "rendered": "base:Int.t -> exponent:Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Exponentiation, takes the base first, then the exponent."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.power ~base:7 ~exponent:3 = 343",
                            "reason": "Int.power(~base=7, ~exponent=3) == 343;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "**"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "7 ** 3 = 343",
                            "reason": "7 ** 3 == 343;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "( ** )",
                  "qualified_name": "Int.( ** )",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.power",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.power",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.power"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "negate",
                  "qualified_name": "Int.negate",
                  "type": {
                    "rendered": "Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Flips the 'sign' of an integer so that positive integers become negative and negative integers become positive. Zero stays as it is."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.negate 8 = (-8)",
                            "reason": "Int.negate(8) == (-8);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.negate (-7) = 7",
                            "reason": "Int.negate(-7) == 7;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.negate 0 = 0",
                            "reason": "Int.negate(0) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "~-"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "~-(7) = (-7)",
                            "reason": "- 7 == (-7);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(~-)",
                  "qualified_name": "Int.(~-)",
                  "type": {
                    "rendered": "Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.negate",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.negate",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.negate"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "absolute",
                  "qualified_name": "Int.absolute",
                  "type": {
                    "rendered": "Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Absolute_value ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " absolute value "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of a number."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.absolute 8 = 8",
                            "reason": "Int.absolute(8) == 8;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.absolute (-7) = 7",
                            "reason": "Int.absolute(-7) == 7;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.absolute 0 = 0",
                            "reason": "Int.absolute(0) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "modulo",
                  "qualified_name": "Int.modulo",
                  "type": {
                    "rendered": "Int.t -> by:Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Perform "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Modular_arithmetic ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " modular arithmetic "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If you intend to use "
                        },
                        {
                          "tag": "Code",
                          "value": "modulo"
                        },
                        {
                          "tag": "Raw",
                          "value": " to detect even and odd numbers consider using "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.isEven",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.isEven",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.isEven"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.isOdd",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.isOdd",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.isOdd"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The "
                        },
                        {
                          "tag": "Code",
                          "value": "modulo"
                        },
                        {
                          "tag": "Raw",
                          "value": " function works in the typical mathematical way when you run into negative numbers"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.remainder",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.remainder",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.remainder"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for a different treatment of negative numbers."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 (-4) = 1",
                            "reason": "Int.modulo(~by=3, -4) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 (-3 )= 0",
                            "reason": "Int.modulo(~by=3, -3) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 (-2) = 2",
                            "reason": "Int.modulo(~by=3, -2) == 2;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 (-1) = 1",
                            "reason": "Int.modulo(~by=3, -1) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 0 = 0",
                            "reason": "Int.modulo(~by=3, 0) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 1 = 1",
                            "reason": "Int.modulo(~by=3, 1) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 2 = 2",
                            "reason": "Int.modulo(~by=3, 2) == 2;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 3 = 0",
                            "reason": "Int.modulo(~by=3, 3) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.modulo ~by:3 4 = 1",
                            "reason": "Int.modulo(~by=3, 4) == 1;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(mod)",
                  "qualified_name": "Int.(mod)",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.modulo",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.modulo",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.modulo"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "remainder",
                  "qualified_name": "Int.remainder",
                  "type": {
                    "rendered": "Int.t -> by:Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the remainder after division. Here are bunch of examples of dividing by four:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.modulo",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.modulo",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.modulo"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for a different treatment of negative numbers."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      List.map\n        ~f:(Int.remainder ~by:4)\n        [(-5); (-4); (-3); (-2); (-1); 0; 1; 2; 3; 4; 5] =\n          [(-1); 0; (-3); (-2); (-1); 0; 1; 2; 3; 0; 1]\n    ",
                            "reason": "List.map(\n  ~f=Int.remainder(~by=4),\n  [(-5), (-4), (-3), (-2), (-1), 0, 1, 2, 3, 4, 5],\n)\n== [(-1), 0, (-3), (-2), (-1), 0, 1, 2, 3, 0, 1];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum",
                  "qualified_name": "Int.maximum",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the larger of two "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.maximum 7 9 = 9",
                            "reason": "Int.maximum(7, 9) == 9;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.maximum (-4) (-1) = (-1)",
                            "reason": "Int.maximum(-4, -1) == (-1);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum",
                  "qualified_name": "Int.minimum",
                  "type": {
                    "rendered": "Int.t -> Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the smaller of two "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.minimum 7 9 = 7",
                            "reason": "Int.minimum(7, 9) == 7;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.minimum (-4) (-1) = (-4)",
                            "reason": "Int.minimum(-4, -1) == (-4);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isEven",
                  "qualified_name": "Int.isEven",
                  "type": {
                    "rendered": "Int.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " is even"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isEven 8 = true",
                            "reason": "Int.isEven(8) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isEven 7 = false",
                            "reason": "Int.isEven(7) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isEven 0 = true",
                            "reason": "Int.isEven(0) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_even",
                  "qualified_name": "Int.is_even",
                  "type": {
                    "rendered": "Int.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isOdd",
                  "qualified_name": "Int.isOdd",
                  "type": {
                    "rendered": "Int.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Check if an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " is odd"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isOdd 7 = true",
                            "reason": "Int.isOdd(7) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isOdd 8 = false",
                            "reason": "Int.isOdd(8) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.isOdd 0 = false",
                            "reason": "Int.isOdd(0) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_odd",
                  "qualified_name": "Int.is_odd",
                  "type": {
                    "rendered": "Int.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "clamp",
                  "qualified_name": "Int.clamp",
                  "type": {
                    "rendered": "Int.t -> lower:Int.t -> upper:Int.t -> Int.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Clamps "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " within the inclusive "
                        },
                        {
                          "tag": "Code",
                          "value": "lower"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "upper"
                        },
                        {
                          "tag": "Raw",
                          "value": " bounds."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  Throws an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "lower > upper"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.clamp ~lower:0 ~upper:8 5 = 5",
                            "reason": "Int.clamp(~lower=0, ~upper=8, 5) == 5;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.clamp ~lower:0 ~upper:8 9 = 8",
                            "reason": "Int.clamp(~lower=0, ~upper=8, 9) == 8;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n  "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.clamp ~lower:(-10) ~upper:(-5) 5 = (-5)",
                            "reason": "Int.clamp(~lower=-10, ~upper=-5, 5) == (-5);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "inRange",
                  "qualified_name": "Int.inRange",
                  "type": {
                    "rendered": "Int.t -> lower:Int.t -> upper:Int.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Checks if "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " is between "
                        },
                        {
                          "tag": "Code",
                          "value": "lower"
                        },
                        {
                          "tag": "Raw",
                          "value": " and up to, but not including, "
                        },
                        {
                          "tag": "Code",
                          "value": "upper"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Throws an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "lower > upper"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.inRange ~lower:2 ~upper:4 3 = true",
                            "reason": "Int.inRange(~lower=2, ~upper=4, 3) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.inRange ~lower:5 ~upper:8 4 = false",
                            "reason": "Int.inRange(~lower=5, ~upper=8, 4) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.inRange ~lower:(-6) ~upper:(-2) (-3) = true",
                            "reason": "Int.inRange(~lower=-6, ~upper=-2, -3) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "in_range",
                  "qualified_name": "Int.in_range",
                  "type": {
                    "rendered": "Int.t -> lower:Int.t -> upper:Int.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toFloat",
                  "qualified_name": "Int.toFloat",
                  "type": {
                    "rendered": "Int.t -> float"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an integer into a float. Useful when mixing "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Float",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " values like this:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let halfOf (number : int) : float =\n        Float.((Int.toFloat number) / 2)\n        (* Note that locally opening the {!Float} module here allows us to use the floating point division operator *)\n      in\n      halfOf 7 = 3.5\n    ",
                            "reason": "{\n  let halfOf = (number: int): float => Float.(Int.toFloat(number) / 2);\n  /* Note that locally opening the {!Float} module here allows us to use the floating point division operator */\n\n  halfOf(7) == 3.5;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_float",
                  "qualified_name": "Int.to_float",
                  "type": {
                    "rendered": "Int.t -> float"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toString",
                  "qualified_name": "Int.toString",
                  "type": {
                    "rendered": "Int.t -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " into a "
                        },
                        {
                          "tag": "Code",
                          "value": "string"
                        },
                        {
                          "tag": "Raw",
                          "value": " representation."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Guarantees that"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.(fromString (toString n)) = Some n ",
                            "reason": "Int.(fromString(toString(n))) == Some(n);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.toString 3 = \"3\"",
                            "reason": "Int.toString(3) == \"3\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.toString (-3) = \"-3\"",
                            "reason": "Int.toString(-3) == \"-3\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.to_sString 0 = \"0\"",
                            "reason": "Int.to_sString(0) == \"0\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_string",
                  "qualified_name": "Int.to_string",
                  "type": {
                    "rendered": "Int.t -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "Int.equal",
                  "type": {
                    "rendered": "Int.t -> Int.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s for equality"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "Int.compare",
                  "type": {
                    "rendered": "Int.t -> Int.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "identity",
                  "parameters": "",
                  "is_private": false,
                  "father": "Int",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": null,
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The unique identity for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "comparator",
                  "qualified_name": "Int.comparator",
                  "type": {
                    "rendered": "(Int.t, Int.identity) Comparator.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Fun": {
        "tag": "Module",
        "value": {
          "name": "Fun",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for working with functions."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    While the functions in this module can often make code more concise, this\n    often imposes a readability burden on future readers."
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "identity",
                  "qualified_name": "Fun.identity",
                  "type": {
                    "rendered": "'a -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Given a value, returns exactly the same value. This may seem pointless at first glance but it can often be useful when an api offers you more control than you actually need."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Perhaps you want to create an array of integers"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.initialize 6 ~f:Fun.identity = [|0; 1; 2; 3; 4; 5|]",
                            "reason": "Array.initialize(6, ~f=Fun.identity) == [|0, 1, 2, 3, 4, 5|];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    (In this particular case you probably want to use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.range",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.range",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.range"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ".)"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Or maybe you need to register a callback, but dont want to do anything:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let httpMiddleware =\n        HttpLibrary.createMiddleWare\n          ~onEventYouDoCareAbout:transformAndReturn\n          ~onEventYouDontCareAbout:Fun.identity\n    ",
                            "reason": "let httpMiddleware =\n  HttpLibrary.createMiddleWare(\n    ~onEventYouDoCareAbout=transformAndReturn,\n    ~onEventYouDontCareAbout=Fun.identity,\n  );\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "ignore",
                  "qualified_name": "Fun.ignore",
                  "type": {
                    "rendered": "'a -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Discards the value it is given and returns "
                        },
                        {
                          "tag": "Code",
                          "value": "()"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This is primarily useful when working with imperative side-effecting code\n    or to avoid "
                        },
                        {
                          "tag": "Code",
                          "value": "unused value"
                        },
                        {
                          "tag": "Raw",
                          "value": " compiler warnings when you really meant it,\n    and haven't just made a mistake."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      (* Pretend we have a module with the following signature:\n          module PretendMutableQueue : sig\n            type 'a t\n\n            (** Adds an element to the queue, returning the new length of the queue *)\n            val pushReturningLength : 'a t -> 'a -> int\n          end\n      *)\n\n      let addListToQueue queue list =\n        List.forEach list ~f:(fun element ->\n          ignore (MutableQueue.pushReturningLength queue element)\n        )\n      in ()\n    ",
                            "reason": "/* Pretend we have a module with the following signature:\n       module PretendMutableQueue : sig\n         type 'a t\n\n         (** Adds an element to the queue, returning the new length of the queue *)\n         val pushReturningLength : 'a t -> 'a -> int\n       end\n   */\n\n{\n  let addListToQueue = (queue, list) =>\n    List.forEach(list, ~f=element =>\n      ignore(MutableQueue.pushReturningLength(queue, element))\n    );\n  ();\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "constant",
                  "qualified_name": "Fun.constant",
                  "type": {
                    "rendered": "'a -> 'b -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a function that "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "always"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " returns the same value."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Useful with functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.map",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.map",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.map"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.initialize",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.initialize",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.initialize"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map ~f:(Fun.constant 0) [1;2;3;4;5] = [0;0;0;0;0]",
                            "reason": "List.map(~f=Fun.constant(0), [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Array.initialize 6 ~f:(Fun.constant 0) = [|0;0;0;0;0;0|]",
                            "reason": "Array.initialize(6, ~f=Fun.constant(0)) == [|0, 0, 0, 0, 0, 0|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sequence",
                  "qualified_name": "Fun.sequence",
                  "type": {
                    "rendered": "'a -> 'b -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A function which always returns its second argument."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "flip",
                  "qualified_name": "Fun.flip",
                  "type": {
                    "rendered": "('a -> 'b -> 'c) -> 'b -> 'a -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Reverses the argument order of a function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For any arguments "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "y"
                        },
                        {
                          "tag": "Raw",
                          "value": ", "
                        },
                        {
                          "tag": "Code",
                          "value": "(flip f) x y"
                        },
                        {
                          "tag": "Raw",
                          "value": " is the same as "
                        },
                        {
                          "tag": "Code",
                          "value": "f y x"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Perhaps you want to "
                        },
                        {
                          "tag": "Code",
                          "value": "fold"
                        },
                        {
                          "tag": "Raw",
                          "value": " something, but the arguments of a function you\n    already have access to are in the wrong order."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "negate",
                  "qualified_name": "Fun.negate",
                  "type": {
                    "rendered": "('a -> bool) -> 'a -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Negate a function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This can be useful in combination with "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.filter",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " / "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.filter",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.filter",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.filter"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.find",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.find",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.find"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " / "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.find",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.find",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.find"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let isLessThanTwelve = Fun.negate (fun n -> n >= 12) in\n      isLessThanTwelve 12 = false\n    ",
                            "reason": "{\n  let isLessThanTwelve = Fun.negate(n => n >= 12);\n  isLessThanTwelve(12) == false;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "apply",
                  "qualified_name": "Fun.apply",
                  "type": {
                    "rendered": "('a -> 'b) -> 'a -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.(<|)",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.(<|)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.(<|)"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(<|)",
                  "qualified_name": "Fun.(<|)",
                  "type": {
                    "rendered": "('a -> 'b) -> 'a -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.(|>)",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.(|>)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.(|>)"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but in the opposite direction."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "f <| x"
                        },
                        {
                          "tag": "Raw",
                          "value": " is exactly the same as "
                        },
                        {
                          "tag": "Code",
                          "value": "f x"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Maybe you want to apply a function to a "
                        },
                        {
                          "tag": "Code",
                          "value": "match"
                        },
                        {
                          "tag": "Raw",
                          "value": " expression? That sort of thing."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "pipe",
                  "qualified_name": "Fun.pipe",
                  "type": {
                    "rendered": "'a -> ('a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.(|>)",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.(|>)",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.(|>)"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(|>)",
                  "qualified_name": "Fun.(|>)",
                  "type": {
                    "rendered": "'a -> ('a -> 'b) -> 'b"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Saying "
                        },
                        {
                          "tag": "Code",
                          "value": "x |> f"
                        },
                        {
                          "tag": "Raw",
                          "value": " is exactly the same as "
                        },
                        {
                          "tag": "Code",
                          "value": "f x"
                        },
                        {
                          "tag": "Raw",
                          "value": ", just a bit longer."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    It is called the \"pipe\" operator because it lets you write \"pipelined\" code."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    It can make nested function calls more readable."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For example, say we have a "
                        },
                        {
                          "tag": "Code",
                          "value": "sanitize"
                        },
                        {
                          "tag": "Raw",
                          "value": " function for turning user input into\n    integers:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      (* Before *)\n      let sanitize (input: string) : int option =\n        Int.ofString (String.trim input)\n    ",
                            "reason": "/* Before */\nlet sanitize = (input: string): option(int) =>\n  Int.ofString(String.trim(input));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    We can rewrite it like this:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      (* After *)\n      let sanitize (input: string) : int option =\n        input\n        |> String.trim\n        |> Int.ofString\n    ",
                            "reason": "/* After */\nlet sanitize = (input: string): option(int) =>\n  input |> String.trim |> Int.ofString;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This can be overused! When you have three or four steps, the code often gets clearer if you break things out into\n    some smaller piplines assigned to variables. Now the transformation has a name, maybe it could have a type annotation."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    It can often be more self-documenting that way!"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compose",
                  "qualified_name": "Fun.compose",
                  "type": {
                    "rendered": "('b -> 'c) -> ('a -> 'b) -> 'a -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Function composition, passing results along in the suggested direction."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For example, the following code (in a very roundabout way) checks if a number divided by two is odd:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "let isHalfOdd = Fun.(not << Int.isEven << Int.divide ~by:2)",
                            "reason": "let isHalfOdd = Fun.((!) << Int.isEven << Int.divide(~by=2));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You can think of this operator as equivalent to the following:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "(g << f) = (fun x -> g (f x))",
                            "reason": "g << f == (x => g(f(x)));\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    So our example expands out to something like this:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "let isHalfOdd = fun n -> not (Int.isEven (Int.divide ~by:2 n))",
                            "reason": "let isHalfOdd = n => !Int.isEven(Int.divide(~by=2, n));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(<<)",
                  "qualified_name": "Fun.(<<)",
                  "type": {
                    "rendered": "('b -> 'c) -> ('a -> 'b) -> 'a -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.compose",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.compose",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.compose"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "composeRight",
                  "qualified_name": "Fun.composeRight",
                  "type": {
                    "rendered": "('a -> 'b) -> ('b -> 'c) -> 'a -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Function composition, passing results along in the suggested direction."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For example, the following code checks if the square root of a number is odd:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Int.squareRoot >> Int.isEven >> not",
                            "reason": "Int.squareRoot >> Int.isEven >> (!);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(>>)",
                  "qualified_name": "Fun.(>>)",
                  "type": {
                    "rendered": "('a -> 'b) -> ('b -> 'c) -> 'a -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.composeRight",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.composeRight",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.composeRight"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tap",
                  "qualified_name": "Fun.tap",
                  "type": {
                    "rendered": "'a -> f:('a -> unit) -> 'a"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Useful for performing some side affect in "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.pipe",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.pipe",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.pipe"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "-lined code."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Most commonly used to log a value in the middle of a pipeline of function calls."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let sanitize (input: string) : int option =\n        input\n        |> String.trim\n        |> Fun.tap ~f:(fun trimmedString -> print_endline trimmedString)\n        |> Int.ofString\n    ",
                            "reason": "let sanitize = (input: string): option(int) =>\n  input\n  |> String.trim\n  |> Fun.tap(~f=trimmedString => print_endline(trimmedString))\n  |> Int.ofString;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Array.filter [|1;3;2;5;4;|] ~f:Int.isEven\n      |> Fun.tap ~f:(fun numbers -> numbers.(0) <- 0)\n      |> Fun.tap ~f:Array.reverseInPlace\n      = [|4;0|]\n    ",
                            "reason": "Array.filter([|1, 3, 2, 5, 4|], ~f=Int.isEven)\n|> Fun.tap(~f=numbers => numbers[0] = 0)\n|> Fun.tap(~f=Array.reverseInPlace) == [|4, 0|];\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "forever",
                  "qualified_name": "Fun.forever",
                  "type": {
                    "rendered": "(unit -> unit) -> exn"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Runs the provided function, forever."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If an exception is thrown, returns the exception"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "times",
                  "qualified_name": "Fun.times",
                  "type": {
                    "rendered": "int -> f:(unit -> unit) -> unit"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Runs a function repeatedly."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let count = ref 0\n      times(10, fun () -> (count <- !count + 1))\n      !count = 10\n    ",
                            "reason": "let count = ref(0, times, (10, () => count = count^ + 1), count^) == 10;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "curry",
                  "qualified_name": "Fun.curry",
                  "type": {
                    "rendered": "('a * 'b -> 'c) -> 'a -> 'b -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Takes a function "
                        },
                        {
                          "tag": "Code",
                          "value": "f"
                        },
                        {
                          "tag": "Raw",
                          "value": " which takes a single argument of a tuple "
                        },
                        {
                          "tag": "Code",
                          "value": "'a * 'b"
                        },
                        {
                          "tag": "Raw",
                          "value": " and returns a function which takes two arguments that can be partially applied."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let squareArea (width, height) = width * height in\n      let curriedArea : float -> float -> float = curry squareArea in\n      let sizes = [3, 4, 5] in\n      List.map sizes ~f:(curriedArea 4) = [12; 16; 20]\n    ",
                            "reason": "{\n  let squareArea = ((width, height)) => width * height;\n  let curriedArea: (float, float) => float = (\n    curry(squareArea): (float, float) => float\n  );\n  let sizes = [(3, 4, 5)];\n  List.map(sizes, ~f=curriedArea(4)) == [12, 16, 20];\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "uncurry",
                  "qualified_name": "Fun.uncurry",
                  "type": {
                    "rendered": "('a -> 'b -> 'c) -> 'a * 'b -> 'c"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Takes a function which takes two arguments and returns a function which takes a single argument of a tuple."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let sum (a : int) (b: int) : int = a + b in\n      let uncurriedSum : (int * int) -> int = uncurry add in\n      uncurriedSum (3, 4) = 7\n    ",
                            "reason": "{\n  let sum = (a: int, b: int): int => a + b;\n  let uncurriedSum: ((int, int)) => int = (\n    uncurry(add): ((int, int)) => int\n  );\n  uncurriedSum((3, 4)) == 7;\n};\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "curry3",
                  "qualified_name": "Fun.curry3",
                  "type": {
                    "rendered": "('a * 'b * 'c -> 'd) -> 'a -> 'b -> 'c -> 'd"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.curry",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.curry",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.curry"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but for a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "uncurry3",
                  "qualified_name": "Fun.uncurry3",
                  "type": {
                    "rendered": "('a -> 'b -> 'c -> 'd) -> 'a * 'b * 'c -> 'd"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Fun.uncurry",
                            "reference": {
                              "kind": "VAL",
                              "target": "Fun.uncurry",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Fun.uncurry"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " but for a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Tuple3",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Tuple3",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Tuple3"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Float": {
        "tag": "Module",
        "value": {
          "name": "Float",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "A module for working with "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/Floating-point_arithmetic ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " floating-point numbers"
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Valid syntax for "
                  },
                  {
                    "tag": "Code",
                    "value": "float"
                  },
                  {
                    "tag": "Raw",
                    "value": "s includes:\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      0.\n      42.\n      42.0\n      3.14\n      -0.1234\n      123_456.123_456\n      6.022e23   (* = (6.022 * 10^23) *)\n      6.022e+23  (* = (6.022 * 10^23) *)\n      1.602e-19  (* = (1.602 * 10^-19) *)\n      1e3        (* = (1 * 10 ** 3) = 1000. *)\n    ",
                      "reason": "0.(42., 42.0, 3.14)\n- 0.1234(\n    123_456.123_456,\n    6.022e23, /* = (6.022 * 10^23) */\n    6.022e+23, /* = (6.022 * 10^23) */\n    1.602e-19, /* = (1.602 * 10^-19) */\n    1e3,\n  ); /* = (1 * 10 ** 3) = 1000. */\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Without opening this module you can use the "
                  },
                  {
                    "tag": "Code",
                    "value": "."
                  },
                  {
                    "tag": "Raw",
                    "value": " suffixed operators e.g"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": " 1. +. 2. /. 0.25 *. 2. = 17. ",
                      "reason": "1. +. 2. /. 0.25 *. 2. == 17.;\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    But by opening this module locally you can use the un-suffixed operators"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "Float.((10.0 - 1.5 / 0.5) ** 3.0) = 2401.0",
                      "reason": "Float.((10.0 - 1.5 / 0.5) ** 3.0) == 2401.0;\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "Bold",
                    "value": [
                      {
                        "tag": "Raw",
                        "value": "Historical Note: "
                      }
                    ]
                  },
                  {
                    "tag": "Raw",
                    "value": " The particular details of floats (e.g. "
                  },
                  {
                    "tag": "Code",
                    "value": "NaN"
                  },
                  {
                    "tag": "Raw",
                    "value": ") are\n    specified by "
                  },
                  {
                    "tag": "Link",
                    "value": {
                      "target": " https://en.wikipedia.org/wiki/IEEE_754 ",
                      "content": [
                        {
                          "tag": "Raw",
                          "value": " IEEE 754 "
                        }
                      ]
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " which is literally hard-coded into almost all\n    CPUs in the world."
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "",
                  "is_private": false,
                  "father": "Float",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "float"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Constants"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "zero",
                  "qualified_name": "Float.zero",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The literal "
                        },
                        {
                          "tag": "Code",
                          "value": "0.0"
                        },
                        {
                          "tag": "Raw",
                          "value": " as a named value"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "one",
                  "qualified_name": "Float.one",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The literal "
                        },
                        {
                          "tag": "Code",
                          "value": "1.0"
                        },
                        {
                          "tag": "Raw",
                          "value": " as a named value"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "nan",
                  "qualified_name": "Float.nan",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": " as a named value. NaN stands for "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/NaN ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " not a number"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " comparing values with "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.nan",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.nan",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.nan"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " will "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "always return "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Raw",
                          "value": " even if the value you are comparing against is also "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    e.g"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      let isNotANumber x = Float.(x = nan) in\n\n      isNotANumber nan = false\n    ",
                            "reason": "{\n  let isNotANumber = x => Float.(x == nan);\n\n  isNotANumber(nan) == false;\n};\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    For detecting "
                        },
                        {
                          "tag": "Code",
                          "value": "Nan"
                        },
                        {
                          "tag": "Raw",
                          "value": " you should use "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.isNaN",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.isNaN",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.isNaN"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "infinity",
                  "qualified_name": "Float.infinity",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Positive "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/IEEE_754-1985#Positive_and_negative_infinity ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " infinity "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.log ~base:10.0 0.0 = Float.infinity",
                            "reason": "Float.log(~base=10.0, 0.0) == Float.infinity;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "negativeInfinity",
                  "qualified_name": "Float.negativeInfinity",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Negative infinity, see "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.infinity",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.infinity",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.infinity"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "negative_infinity",
                  "qualified_name": "Float.negative_infinity",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "e",
                  "qualified_name": "Float.e",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An approximation of "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/E_(mathematical_constant) ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " Euler's number "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "pi",
                  "qualified_name": "Float.pi",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "An approximation of "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Pi ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " pi "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "epsilon",
                  "qualified_name": "Float.epsilon",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The smallest interval between two representable numbers."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "largestValue",
                  "qualified_name": "Float.largestValue",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The largest (furthest from zero) representable positive "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "largest_value",
                  "qualified_name": "Float.largest_value",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "smallestValue",
                  "qualified_name": "Float.smallestValue",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The smallest representable positive "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": ". The closest to zero without actually being zero."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "smallest_value",
                  "qualified_name": "Float.smallest_value",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximumSafeInteger",
                  "qualified_name": "Float.maximumSafeInteger",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "For floats greater than "
                        },
                        {
                          "tag": "Code",
                          "value": "maximumSafeInteger"
                        },
                        {
                          "tag": "Raw",
                          "value": ", it no longer holds that "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.(n + 1.) > n"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum_safe_integer",
                  "qualified_name": "Float.maximum_safe_integer",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimumSafeInteger",
                  "qualified_name": "Float.minimumSafeInteger",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "For floats less than "
                        },
                        {
                          "tag": "Code",
                          "value": "minimumSafeInteger"
                        },
                        {
                          "tag": "Raw",
                          "value": ", it no longer holds that "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.(n - 1.) < n"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum_safe_integer",
                  "qualified_name": "Float.minimum_safe_integer",
                  "type": {
                    "rendered": "Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromInt",
                  "qualified_name": "Float.fromInt",
                  "type": {
                    "rendered": "int -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.fromInt 5 = 5.0\n      Float.fromInt 0 = 0.0\n      Float.fromInt -7 = -7.0\n    ",
                            "reason": "Float.fromInt(5) == 5.0(Float.fromInt, 0) == 0.0(Float.fromInt)\n- 7 == (-7.0);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_int",
                  "qualified_name": "Float.from_int",
                  "type": {
                    "rendered": "int -> Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromString",
                  "qualified_name": "Float.fromString",
                  "type": {
                    "rendered": "string -> Float.t option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Parses "
                        },
                        {
                          "tag": "Code",
                          "value": "nan"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "infinity"
                        },
                        {
                          "tag": "Raw",
                          "value": " case-insensitive."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"4.667\" = Some 4.667",
                            "reason": "Float.fromString(\"4.667\") == Some(4.667);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"-4.667\" = Some (-4.667)",
                            "reason": "Float.fromString(\"-4.667\") == Some(-4.667);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"Hamster\" = None",
                            "reason": "Float.fromString(\"Hamster\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"NaN\" = Some Float.nan",
                            "reason": "Float.fromString(\"NaN\") == Some(Float.nan);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"nan\" = Some Float.nan",
                            "reason": "Float.fromString(\"nan\") == Some(Float.nan);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.fromString \"Infinity\" = Some Float.infinity",
                            "reason": "Float.fromString(\"Infinity\") == Some(Float.infinity);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_string",
                  "qualified_name": "Float.from_string",
                  "type": {
                    "rendered": "string -> Float.t option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic arithmetic and operators"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "add",
                  "qualified_name": "Float.add",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Addition for floating point numbers."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Although "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": "s and "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "s support many of the same basic operations such as\n    addition and subtraction you "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "cannot"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "add"
                        },
                        {
                          "tag": "Raw",
                          "value": " an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " and a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " directly which\n    means you need to use functions like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int.toFloat",
                            "reference": {
                              "kind": "VAL",
                              "target": "Int.toFloat",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int.toFloat"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to convert both values to the same type."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    So if you needed to add a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.length",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.length",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.length"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " for some reason, you\n    could:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.add 3.14 (Int.toFloat (List.length [1,2,3])) = 6.14",
                            "reason": "Float.add(3.14, Int.toFloat(List.length([(1, 2, 3)]))) == 6.14;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    or"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.roundToInt 3.14 + List.length [1,2,3] = 6",
                            "reason": "Float.roundToInt(3.14) + List.length([(1, 2, 3)]) == 6;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Languages like Java and JavaScript automatically convert "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " values\n    to "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " values when you mix and match. This can make it difficult to be sure\n    exactly what type of number you are dealing with and cause unexpected behavior."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    OCaml has opted for a design that makes all conversions explicit."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.add 3.14 3.14 = 6.28\n      Float.(3.14 + 3.14 = 6.28)\n    ",
                            "reason": "Float.add(3.14, 3.14) == 6.28(Float.(3.14 + 3.14 == 6.28));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(+)",
                  "qualified_name": "Float.(+)",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.add",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.add",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.add"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "subtract",
                  "qualified_name": "Float.subtract",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Subtract numbers"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "-"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.subtract 4.0 3.0 = 1.0",
                            "reason": "Float.subtract(4.0, 3.0) == 1.0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(4.0 - 3.0) = 1.0",
                            "reason": "Float.(4.0 - 3.0) == 1.0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(-)",
                  "qualified_name": "Float.(-)",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.subtract",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.subtract",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.subtract"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "multiply",
                  "qualified_name": "Float.multiply",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Multiply numbers"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "*"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.multiply 2.0 7.0 = 14.0",
                            "reason": "Float.multiply(2.0, 7.0) == 14.0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(2.0 * 7.0) = 14.0",
                            "reason": "Float.(2.0 * 7.0) == 14.0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "( * )",
                  "qualified_name": "Float.( * )",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.multiply",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.multiply",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.multiply"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "divide",
                  "qualified_name": "Float.divide",
                  "type": {
                    "rendered": "Float.t -> by:Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Floating-point division:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "/"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.divide 3.14 ~by:2.0 = 1.57",
                            "reason": "Float.divide(3.14, ~by=2.0) == 1.57;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(3.14 / 2.0) = 1.57",
                            "reason": "Float.(3.14 / 2.0) == 1.57;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(/)",
                  "qualified_name": "Float.(/)",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.divide",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.divide",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.divide"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "power",
                  "qualified_name": "Float.power",
                  "type": {
                    "rendered": "base:Float.t -> exponent:Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Exponentiation, takes the base first, then the exponent."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively the "
                        },
                        {
                          "tag": "Code",
                          "value": "**"
                        },
                        {
                          "tag": "Raw",
                          "value": " operator can be used"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.power ~base:7.0 ~exponent:3.0 = 343.0",
                            "reason": "Float.power(~base=7.0, ~exponent=3.0) == 343.0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(7.0 ** 3.0) = 343.0",
                            "reason": "Float.(7.0 ** 3.0) == 343.0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "( ** )",
                  "qualified_name": "Float.( ** )",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.power",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.power",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.power"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "negate",
                  "qualified_name": "Float.negate",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Flips the 'sign' of a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " so that positive floats become negative and negative integers become positive. Zero stays as it is."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Alternatively an operator is available"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(~- 4.0) = (-4.0)",
                            "reason": "Float.(- 4.0) == (-4.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.negate 8 = (-8)\n      Float.negate (-7) = 7\n      Float.negate 0 = 0\n    ",
                            "reason": "Float.negate(8) == (-8)(Float.negate, -7) == 7(Float.negate, 0) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(~-)",
                  "qualified_name": "Float.(~-)",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.negate",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.negate",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.negate"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "absolute",
                  "qualified_name": "Float.absolute",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Get the "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Absolute_value ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " absolute value"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " of a number."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.absolute 8. = 8.\n      Float.absolute (-7) = 7\n      Float.absolute 0 = 0\n    ",
                            "reason": "Float.absolute(8.) == 8.(Float.absolute, -7) == 7(Float.absolute, 0) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "maximum",
                  "qualified_name": "Float.maximum",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the larger of two "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "s, if both arguments are equal, returns the first argument"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If either (or both) of the arguments are "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": ", returns "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.maximum 7. 9. = 9.",
                            "reason": "Float.maximum(7., 9.) == 9.;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.maximum (-4.) (-1.) = (-1.)",
                            "reason": "Float.maximum(-4., -1.) == (-1.);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isNaN (maximum 7. nan)) = true",
                            "reason": "Float.(isNaN(maximum(7., nan))) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "minimum",
                  "qualified_name": "Float.minimum",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Returns the smaller of two "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "s, if both arguments are equal, returns the first argument"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If either (or both) of the arguments are "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": ", returns "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.minimum 7.0 9.0 = 7.0",
                            "reason": "Float.minimum(7.0, 9.0) == 7.0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.minimum (-4.0) (-1.0) = (-4.0)",
                            "reason": "Float.minimum(-4.0, -1.0) == (-4.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isNaN (minimum 7. nan)) = true",
                            "reason": "Float.(isNaN(minimum(7., nan))) == true;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "clamp",
                  "qualified_name": "Float.clamp",
                  "type": {
                    "rendered": "Float.t -> lower:Float.t -> upper:Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Clamps "
                        },
                        {
                          "tag": "Code",
                          "value": "n"
                        },
                        {
                          "tag": "Raw",
                          "value": " within the inclusive "
                        },
                        {
                          "tag": "Code",
                          "value": "lower"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "upper"
                        },
                        {
                          "tag": "Raw",
                          "value": " bounds."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Throws an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "lower > upper"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.clamp ~lower:0. ~upper:8. 5. = 5.",
                            "reason": "Float.clamp(~lower=0., ~upper=8., 5.) == 5.;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.clamp ~lower:0. ~upper:8. 9. = 8.",
                            "reason": "Float.clamp(~lower=0., ~upper=8., 9.) == 8.;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.clamp ~lower:(-10.) ~upper:(-5.) 5. = -5.",
                            "reason": "Float.clamp(~lower=-10., ~upper=-5., 5.) == (-5.);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Fancier math"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "squareRoot",
                  "qualified_name": "Float.squareRoot",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Take the square root of a number."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "squareRoot"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": " when its argument is negative. See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.nan",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.nan",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.nan"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for more."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.squareRoot 4.0 = 2.0",
                            "reason": "Float.squareRoot(4.0) == 2.0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.squareRoot 9.0 = 3.0",
                            "reason": "Float.squareRoot(9.0) == 3.0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "square_root",
                  "qualified_name": "Float.square_root",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "log",
                  "qualified_name": "Float.log",
                  "type": {
                    "rendered": "Float.t -> base:Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Calculate the logarithm of a number with a given base."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.log ~base:10. 100. = 2.",
                            "reason": "Float.log(~base=10., 100.) == 2.;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.log ~base:2. 256. = 8.",
                            "reason": "Float.log(~base=2., 256.) == 8.;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Query"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isNaN",
                  "qualified_name": "Float.isNaN",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine whether a float is an undefined or unrepresentable number."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " this function is more useful than it might seem since "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "does not "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " equal "
                        },
                        {
                          "tag": "Code",
                          "value": "Nan"
                        },
                        {
                          "tag": "Raw",
                          "value": ":"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(nan = nan) = false",
                            "reason": "Float.(nan == nan) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isNaN (0.0 / 0.0) = true",
                            "reason": "Float.isNaN(0.0 / 0.0) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isNaN (squareRoot (-1.0))) = true",
                            "reason": "Float.(isNaN(squareRoot(-1.0))) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isNaN (1.0 / 0.0) = false  (* Float.infinity {b is} a number *)",
                            "reason": "Float.isNaN(1.0 / 0.0) == false; /* Float.infinity {b is} a number */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isNaN 1. = false",
                            "reason": "Float.isNaN(1.) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_nan",
                  "qualified_name": "Float.is_nan",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isFinite",
                  "qualified_name": "Float.isFinite",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine whether a float is finite number. True for any float except "
                        },
                        {
                          "tag": "Code",
                          "value": "Infinity"
                        },
                        {
                          "tag": "Raw",
                          "value": ", "
                        },
                        {
                          "tag": "Code",
                          "value": "-Infinity"
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Notice that "
                        },
                        {
                          "tag": "Code",
                          "value": "NaN"
                        },
                        {
                          "tag": "Raw",
                          "value": " is not finite!"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isFinite (0. / 0.) = false",
                            "reason": "Float.isFinite(0. / 0.) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isFinite (squareRoot (-1.))) = false",
                            "reason": "Float.(isFinite(squareRoot(-1.))) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isFinite (1. / 0.) = false",
                            "reason": "Float.isFinite(1. / 0.) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isFinite 1. = true",
                            "reason": "Float.isFinite(1.) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isFinite nan) = false",
                            "reason": "Float.(isFinite(nan)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_finite",
                  "qualified_name": "Float.is_finite",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isInfinite",
                  "qualified_name": "Float.isInfinite",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine whether a float is positive or negative infinity."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isInfinite (0. / 0.) = false",
                            "reason": "Float.isInfinite(0. / 0.) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isInfinite (squareRoot (-1.))) = false",
                            "reason": "Float.(isInfinite(squareRoot(-1.))) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isInfinite (1. / 0.) = true",
                            "reason": "Float.isInfinite(1. / 0.) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isInfinite 1. = false",
                            "reason": "Float.isInfinite(1.) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isInfinite nan) = false",
                            "reason": "Float.(isInfinite(nan)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_infinite",
                  "qualified_name": "Float.is_infinite",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isInteger",
                  "qualified_name": "Float.isInteger",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine whether the passed value is an integer."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isInteger 4.0 = true",
                            "reason": "Float.isInteger(4.0) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isInteger Float.pi = false",
                            "reason": "Float.isInteger(Float.pi) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_integer",
                  "qualified_name": "Float.is_integer",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "isSafeInteger",
                  "qualified_name": "Float.isSafeInteger",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Determine whether the passed value is a safe integer (number between -(2**53 - 1) and 2**53 - 1)."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isSafeInteger 4.0 = true",
                            "reason": "Float.isSafeInteger(4.0) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.isSafeInteger Float.pi = false",
                            "reason": "Float.isSafeInteger(Float.pi) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(isSafeInteger (maximumSafeInteger + 1.)) = false",
                            "reason": "Float.(isSafeInteger(maximumSafeInteger + 1.)) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "is_safe_integer",
                  "qualified_name": "Float.is_safe_integer",
                  "type": {
                    "rendered": "Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "inRange",
                  "qualified_name": "Float.inRange",
                  "type": {
                    "rendered": "Float.t -> lower:Float.t -> upper:Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Checks if a float is between "
                        },
                        {
                          "tag": "Code",
                          "value": "lower"
                        },
                        {
                          "tag": "Raw",
                          "value": " and up to, but not including, "
                        },
                        {
                          "tag": "Code",
                          "value": "upper"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If "
                        },
                        {
                          "tag": "Code",
                          "value": "lower"
                        },
                        {
                          "tag": "Raw",
                          "value": " is not specified, it's set to to "
                        },
                        {
                          "tag": "Code",
                          "value": "0.0"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Exceptions"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Throws an "
                        },
                        {
                          "tag": "Code",
                          "value": "Invalid_argument"
                        },
                        {
                          "tag": "Raw",
                          "value": " exception if "
                        },
                        {
                          "tag": "Code",
                          "value": "lower > upper"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.inRange ~lower:2. ~upper:4. 3. = true",
                            "reason": "Float.inRange(~lower=2., ~upper=4., 3.) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.inRange ~lower:1. ~upper:2. 2. = false",
                            "reason": "Float.inRange(~lower=1., ~upper=2., 2.) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.inRange ~lower:5.2 ~upper:7.9 9.6 = false",
                            "reason": "Float.inRange(~lower=5.2, ~upper=7.9, 9.6) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "in_range",
                  "qualified_name": "Float.in_range",
                  "type": {
                    "rendered": "Float.t -> lower:Float.t -> upper:Float.t -> bool"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Angles"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "radians",
                  "parameters": "",
                  "is_private": false,
                  "father": "Float",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This type is just an alias for "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Its purpose is to make understanding the signatures of the following\n    functions a little easier."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "float"
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This type is just an alias for "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Its purpose is to make understanding the signatures of the following\n    functions a little easier."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "hypotenuse",
                  "qualified_name": "Float.hypotenuse",
                  "type": {
                    "rendered": "Float.t -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Code",
                          "value": "hypotenuse x y"
                        },
                        {
                          "tag": "Raw",
                          "value": " returns the length of the hypotenuse of a right-angled triangle with sides of length "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "y"
                        },
                        {
                          "tag": "Raw",
                          "value": ", or, equivalently, the distance of the point "
                        },
                        {
                          "tag": "Code",
                          "value": "(x, y)"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(0, 0)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.hypotenuse 3. 4. = 5.",
                            "reason": "Float.hypotenuse(3., 4.) == 5.;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "degrees",
                  "qualified_name": "Float.degrees",
                  "type": {
                    "rendered": "Float.t -> Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts an angle in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Degree_(angle) ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " degrees"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.radians",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.radians",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.radians"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.degrees 180. = Float.pi",
                            "reason": "Float.degrees(180.) == Float.pi;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.degrees 360. = Float.pi * 2.",
                            "reason": "Float.degrees(360.) == Float.pi * 2.;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.degrees 90. = Float.pi /. 2.",
                            "reason": "Float.degrees(90.) == Float.pi /. 2.;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "radians",
                  "qualified_name": "Float.radians",
                  "type": {
                    "rendered": "Float.t -> Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.t",
                            "reference": {
                              "kind": "TYPE",
                              "target": "Float.t",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.t"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Radian ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " radians "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "Note "
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " This function doesn't actually do anything to its argument, but can be useful to indicate intent when inter-mixing angles of different units within the same function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(radians pi) = 3.141592653589793",
                            "reason": "Float.(radians(pi)) == 3.141592653589793;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "turns",
                  "qualified_name": "Float.turns",
                  "type": {
                    "rendered": "Float.t -> Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an angle in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Turn_(geometry) ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " turns"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.radians",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.radians",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.radians"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    One turn is equal to 360 degrees."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(turns (1. / 2.)) = pi",
                            "reason": "Float.(turns(1. / 2.)) == pi;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(turns 1. = degrees 360.)",
                            "reason": "Float.(turns(1.) == degrees(360.));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Polar coordinates"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromPolar",
                  "qualified_name": "Float.fromPolar",
                  "type": {
                    "rendered": "float * Float.radians -> float * float"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Polar_coordinate_system ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " polar coordinates "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " (radius, radians) to "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Cartesian_coordinate_system ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " Cartesian coordinates "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " (x,y)."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(fromPolar (squareRoot 2., degrees 45.)) = (1., 1.)",
                            "reason": "Float.(fromPolar((squareRoot(2.), degrees(45.)))) == (1., 1.);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_polar",
                  "qualified_name": "Float.from_polar",
                  "type": {
                    "rendered": "float * Float.radians -> float * float"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toPolar",
                  "qualified_name": "Float.toPolar",
                  "type": {
                    "rendered": "float * float -> float * Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Cartesian_coordinate_system ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " Cartesian coordinates "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "(x, y)"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Polar_coordinate_system ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " polar coordinates "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Code",
                          "value": "(radius, radians)"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.toPolar (-1.0, 0.0) = (1.0, Float.pi)",
                            "reason": "Float.toPolar(((-1.0), 0.0)) == (1.0, Float.pi);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.toPolar (3.0, 4.0) = (5.0, 0.9272952180016122)",
                            "reason": "Float.toPolar((3.0, 4.0)) == (5.0, 0.9272952180016122);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.toPolar (5.0, 12.0) = (13.0, 1.1760052070951352)",
                            "reason": "Float.toPolar((5.0, 12.0)) == (13.0, 1.1760052070951352);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_polar",
                  "qualified_name": "Float.to_polar",
                  "type": {
                    "rendered": "float * float -> float * Float.radians"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "cos",
                  "qualified_name": "Float.cos",
                  "type": {
                    "rendered": "Float.radians -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Figure out the cosine given an angle in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Radian ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " radians "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(cos (degrees 60.)) = 0.5000000000000001",
                            "reason": "Float.(cos(degrees(60.))) == 0.5000000000000001;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(cos (radians (pi / 3.))) = 0.5000000000000001",
                            "reason": "Float.(cos(radians(pi / 3.))) == 0.5000000000000001;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "acos",
                  "qualified_name": "Float.acos",
                  "type": {
                    "rendered": "Float.radians -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Figure out the arccosine for "
                        },
                        {
                          "tag": "Code",
                          "value": "adjacent / hypotenuse"
                        },
                        {
                          "tag": "Raw",
                          "value": " in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Radian ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " radians "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ":"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(acos (radians 1.0 / 2.0)) = Float.radians 1.0471975511965979 (* 60 degrees or pi/3 radians *)",
                            "reason": "Float.(acos(radians(1.0) / 2.0)) == Float.radians(1.0471975511965979); /* 60 degrees or pi/3 radians */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "sin",
                  "qualified_name": "Float.sin",
                  "type": {
                    "rendered": "Float.radians -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Figure out the sine given an angle in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Radian ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " radians "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(sin (degrees 30.)) = 0.49999999999999994",
                            "reason": "Float.(sin(degrees(30.))) == 0.49999999999999994;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(sin (radians (pi / 6.))) = 0.49999999999999994",
                            "reason": "Float.(sin(radians(pi / 6.))) == 0.49999999999999994;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "asin",
                  "qualified_name": "Float.asin",
                  "type": {
                    "rendered": "Float.radians -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Figure out the arcsine for "
                        },
                        {
                          "tag": "Code",
                          "value": "opposite / hypotenuse"
                        },
                        {
                          "tag": "Raw",
                          "value": " in "
                        },
                        {
                          "tag": "Link",
                          "value": {
                            "target": " https://en.wikipedia.org/wiki/Radian ",
                            "content": [
                              {
                                "tag": "Raw",
                                "value": " radians "
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": ":"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(asin (1.0 / 2.0)) = 0.5235987755982989 (* 30 degrees or pi / 6 radians *)",
                            "reason": "Float.(asin(1.0 / 2.0)) == 0.5235987755982989; /* 30 degrees or pi / 6 radians */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "tan",
                  "qualified_name": "Float.tan",
                  "type": {
                    "rendered": "Float.radians -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Figure out the tangent given an angle in radians."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(tan (degrees 45.)) = 0.9999999999999999",
                            "reason": "Float.(tan(degrees(45.))) == 0.9999999999999999;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(tan (radians (pi / 4.))) = 0.9999999999999999",
                            "reason": "Float.(tan(radians(pi / 4.))) == 0.9999999999999999;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(tan (pi / 4.)) = 0.9999999999999999",
                            "reason": "Float.(tan(pi / 4.)) == 0.9999999999999999;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "atan",
                  "qualified_name": "Float.atan",
                  "type": {
                    "rendered": "Float.t -> Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This helps you find the angle (in radians) to an "
                        },
                        {
                          "tag": "Code",
                          "value": "(x, y)"
                        },
                        {
                          "tag": "Raw",
                          "value": " coordinate, but\n    in a way that is rarely useful in programming."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "You probably want"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.atan2",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.atan2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.atan2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " instead!"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This version takes "
                        },
                        {
                          "tag": "Code",
                          "value": "y / x"
                        },
                        {
                          "tag": "Raw",
                          "value": " as its argument, so there is no way to know whether\n    the negative signs comes from the "
                        },
                        {
                          "tag": "Code",
                          "value": "y"
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " value. So as we go counter-clockwise\n    around the origin from point "
                        },
                        {
                          "tag": "Code",
                          "value": "(1, 1)"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(1, -1)"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(-1,-1)"
                        },
                        {
                          "tag": "Raw",
                          "value": " to "
                        },
                        {
                          "tag": "Code",
                          "value": "(-1,1)"
                        },
                        {
                          "tag": "Raw",
                          "value": " we do\n    not get angles that go in the full circle:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Notice that everything is between "
                        },
                        {
                          "tag": "Code",
                          "value": "pi / 2"
                        },
                        {
                          "tag": "Raw",
                          "value": " and "
                        },
                        {
                          "tag": "Code",
                          "value": "-pi/2"
                        },
                        {
                          "tag": "Raw",
                          "value": ". That is pretty useless\n    for figuring out angles in any sort of visualization, so again, check out\n    "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.atan2",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.atan2",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.atan2"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " instead!"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan (1. /. 1.) = 0.7853981633974483  (* 45 degrees or pi/4 radians *)",
                            "reason": "Float.atan(1. /. 1.) == 0.7853981633974483; /* 45 degrees or pi/4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan (1. /. -1.) = -0.7853981633974483  (* 315 degrees or 7 * pi / 4 radians *)",
                            "reason": "Float.atan(1. /. (-1.)) == (-0.7853981633974483); /* 315 degrees or 7 * pi / 4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan (-1. /. -1.) = 0.7853981633974483 (* 45 degrees or pi/4 radians *)",
                            "reason": "Float.atan((-1.) /. (-1.)) == 0.7853981633974483; /* 45 degrees or pi/4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan (-1. /.  1.) = -0.7853981633974483 (* 315 degrees or 7 * pi/4 radians *)",
                            "reason": "Float.atan((-1.) /. 1.) == (-0.7853981633974483); /* 315 degrees or 7 * pi/4 radians */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "atan2",
                  "qualified_name": "Float.atan2",
                  "type": {
                    "rendered": "y:Float.t -> x:Float.t -> Float.radians"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This helps you find the angle (in radians) to an "
                        },
                        {
                          "tag": "Code",
                          "value": "(x, y)"
                        },
                        {
                          "tag": "Raw",
                          "value": " coordinate."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    So rather than "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.(atan (y / x))"
                        },
                        {
                          "tag": "Raw",
                          "value": " you can "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.atan2 ~y ~x"
                        },
                        {
                          "tag": "Raw",
                          "value": " and you can get a full range of angles:"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan2 ~y:1. ~x:1. = 0.7853981633974483  (* 45 degrees or pi/4 radians *)",
                            "reason": "Float.atan2(~y=1., ~x=1.) == 0.7853981633974483; /* 45 degrees or pi/4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan2 ~y:1. ~x:(-1.) = 2.3561944901923449  (* 135 degrees or 3 * pi/4 radians *)",
                            "reason": "Float.atan2(~y=1., ~x=-1.) == 2.3561944901923449; /* 135 degrees or 3 * pi/4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan2 ~y:(-1.) ~x:(-1.) = -(2.3561944901923449) (* 225 degrees or 5 * pi/4 radians *)",
                            "reason": "Float.atan2(~y=-1., ~x=-1.) == (-2.3561944901923449); /* 225 degrees or 5 * pi/4 radians */\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.atan2 ~y:(-1.) ~x:1. = -(0.7853981633974483) (* 315 degrees or 7 * pi/4 radians *)",
                            "reason": "Float.atan2(~y=-1., ~x=1.) == (-0.7853981633974483); /* 315 degrees or 7 * pi/4 radians */\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Rounding"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "direction",
                  "parameters": "",
                  "is_private": false,
                  "father": "Float",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The possible "
                        },
                        {
                          "tag": "Code",
                          "value": "direction"
                        },
                        {
                          "tag": "Raw",
                          "value": "s availible when doing "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.round",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.round",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.round"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.round",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.round",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.round"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for what each variant represents."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "[ `AwayFromZero\n  | `Closest of [ `AwayFromZero | `Down | `ToEven | `Up | `Zero ]\n  | `Down\n  | `Up\n  | `Zero ]"
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The possible "
                        },
                        {
                          "tag": "Code",
                          "value": "direction"
                        },
                        {
                          "tag": "Raw",
                          "value": "s availible when doing "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.round",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.round",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.round"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.round",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.round",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.round"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for what each variant represents."
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "round",
                  "qualified_name": "Float.round",
                  "type": {
                    "rendered": "?direction:Float.direction -> Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Round a number, by default to the to the closest "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " with halves rounded "
                        },
                        {
                          "tag": "Code",
                          "value": "`Up"
                        },
                        {
                          "tag": "Raw",
                          "value": " (towards positive infinity)"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Other rounding strategies are available by using the optional "
                        },
                        {
                          "tag": "Code",
                          "value": "~direction"
                        },
                        {
                          "tag": "Raw",
                          "value": " labelelled."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.round 1.2 = 1.0\n      Float.round 1.5 = 2.0\n      Float.round 1.8 = 2.0\n      Float.round -1.2 = -1.0\n      Float.round -1.5 = -1.0\n      Float.round -1.8 = -2.0\n    ",
                            "reason": "Float.round(1.2) == 1.0(Float.round, 1.5) == 2.0(Float.round, 1.8)\n== 2.0(Float.round)\n- 1.2 == - 1.0(Float.round)\n- 1.5 == - 1.0(Float.round)\n- 1.8 == (-2.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Towards zero"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.round ~direction:`Zero 1.2 = 1.0\n      Float.round ~direction:`Zero 1.5 = 1.0\n      Float.round ~direction:`Zero 1.8 = 1.0\n      Float.round ~direction:`Zero (-1.2) = -1.0\n      Float.round ~direction:`Zero (-1.5) = -1.0\n      Float.round ~direction:`Zero (-1.8) = -1.0\n    ",
                            "reason": "Float.round(~direction=`Zero, 1.2) == 1.0(Float.round, ~direction=`Zero, 1.5)\n== 1.0(Float.round, ~direction=`Zero, 1.8)\n== 1.0(Float.round, ~direction=`Zero, -1.2)\n== - 1.0(Float.round, ~direction=`Zero, -1.5)\n== - 1.0(Float.round, ~direction=`Zero, -1.8)\n== (-1.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Away from zero"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.round ~direction:`AwayFromZero 1.2 = 1.0\n      Float.round ~direction:`AwayFromZero 1.5 = 1.0\n      Float.round ~direction:`AwayFromZero 1.8 = 1.0\n      Float.round ~direction:`AwayFromZero (-1.2) = -1.0\n      Float.round ~direction:`AwayFromZero (-1.5) = -1.0\n      Float.round ~direction:`AwayFromZero (-1.8) = -1.0\n    ",
                            "reason": "Float.round(~direction=`AwayFromZero, 1.2)\n== 1.0(Float.round, ~direction=`AwayFromZero, 1.5)\n== 1.0(Float.round, ~direction=`AwayFromZero, 1.8)\n== 1.0(Float.round, ~direction=`AwayFromZero, -1.2)\n== - 1.0(Float.round, ~direction=`AwayFromZero, -1.5)\n== - 1.0(Float.round, ~direction=`AwayFromZero, -1.8)\n== (-1.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Towards infinity"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This is also known as "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.ceiling",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.ceiling",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.ceiling"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.round ~direction:`Up 1.2 = 1.0\n      Float.round ~direction:`Up 1.5 = 1.0\n      Float.round ~direction:`Up 1.8 = 1.0\n      Float.round ~direction:`Up (-1.2) = -1.0\n      Float.round ~direction:`Up (-1.5) = -1.0\n      Float.round ~direction:`Up (-1.8) = -1.0\n    ",
                            "reason": "Float.round(~direction=`Up, 1.2) == 1.0(Float.round, ~direction=`Up, 1.5)\n== 1.0(Float.round, ~direction=`Up, 1.8)\n== 1.0(Float.round, ~direction=`Up, -1.2)\n== - 1.0(Float.round, ~direction=`Up, -1.5)\n== - 1.0(Float.round, ~direction=`Up, -1.8)\n== (-1.0);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Towards negative infinity"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This is also known as "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.floor",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.floor",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.floor"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map  ~f:(Float.round ~direction:`Down) [-1.8; -1.5; -1.2; 1.2; 1.5; 1.8] = [-2.0; -2.0; -2.0; 1.0 1.0 1.0]",
                            "reason": "List.map(\n  ~f=Float.round(~direction=`Down),\n  [(-1.8), (-1.5), (-1.2), 1.2, 1.5, 1.8],\n)\n== [(-2.0), (-2.0), (-2.0), 1.0(1.0, 1.0)];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 3,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "To the closest integer"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Rounding a number "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " to the closest integer requires some tie-breaking for when the "
                        },
                        {
                          "tag": "Code",
                          "value": "fraction"
                        },
                        {
                          "tag": "Raw",
                          "value": " part of "
                        },
                        {
                          "tag": "Code",
                          "value": "x"
                        },
                        {
                          "tag": "Raw",
                          "value": " is exactly "
                        },
                        {
                          "tag": "Code",
                          "value": "0.5"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 4,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Halves rounded towards zero"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map  ~f:(Float.round ~direction:(`Closest `AwayFromZero)) [-1.8; -1.5; -1.2; 1.2; 1.5; 1.8] = [-2.0; -1.0; -1.0; 1.0 1.0 2.0]",
                            "reason": "List.map(\n  ~f=Float.round(~direction=`Closest(`AwayFromZero)),\n  [(-1.8), (-1.5), (-1.2), 1.2, 1.5, 1.8],\n)\n== [(-2.0), (-1.0), (-1.0), 1.0(1.0, 2.0)];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 4,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Halves rounded away from zero"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This method is often known as "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "commercial rounding "
                            }
                          ]
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map  ~f:(Float.round ~direction:(`Closest `AwayFromZero)) [-1.8; -1.5; -1.2; 1.2; 1.5; 1.8] = [-2.0; -2.0; -1.0; 1.0 2.0 2.0]",
                            "reason": "List.map(\n  ~f=Float.round(~direction=`Closest(`AwayFromZero)),\n  [(-1.8), (-1.5), (-1.2), 1.2, 1.5, 1.8],\n)\n== [(-2.0), (-2.0), (-1.0), 1.0(2.0, 2.0)];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 4,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Halves rounded down"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "List.map  ~f:(Float.round ~direction:(`Closest `Down)) [-1.8; -1.5; -1.2; 1.2; 1.5; 1.8] = [-2.0; -2.0; -1.0; 1.0 1.0 2.0]",
                            "reason": "List.map(\n  ~f=Float.round(~direction=`Closest(`Down)),\n  [(-1.8), (-1.5), (-1.2), 1.2, 1.5, 1.8],\n)\n== [(-2.0), (-2.0), (-1.0), 1.0(1.0, 2.0)];\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 4,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Halves rounded up"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    This is the default."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.round 1.5"
                        },
                        {
                          "tag": "Raw",
                          "value": " is the same as "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.round ~direction:(`Closest `Up) 1.5"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 4,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Halves rounded towards the closest even number"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.round ~direction:(`Closest `ToEven) -1.5 = -2.0\n      Float.round ~direction:(`Closest `ToEven) -2.5 = -2.0\n    ",
                            "reason": "Float.round(~direction=`Closest(`ToEven))\n- 1.5 == - 2.0(Float.round, ~direction=`Closest(`ToEven))\n- 2.5 == (-2.0);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "floor",
                  "qualified_name": "Float.floor",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Floor function, equivalent to "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.round ~direction:`Down"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.floor 1.2 = 1.0\n      Float.floor 1.5 = 1.0\n      Float.floor 1.8 = 1.0\n      Float.floor -1.2 = -2.0\n      Float.floor -1.5 = -2.0\n      Float.floor -1.8 = -2.0\n    ",
                            "reason": "Float.floor(1.2) == 1.0(Float.floor, 1.5) == 1.0(Float.floor, 1.8)\n== 1.0(Float.floor)\n- 1.2 == - 2.0(Float.floor)\n- 1.5 == - 2.0(Float.floor)\n- 1.8 == (-2.0);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "ceiling",
                  "qualified_name": "Float.ceiling",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Ceiling function, equivalent to "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.round ~direction:`Up"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.ceiling 1.2 = 2.0\n      Float.ceiling 1.5 = 2.0\n      Float.ceiling 1.8 = 2.0\n      Float.ceiling -1.2 = (-1.0)\n      Float.ceiling -1.5 = (-1.0)\n      Float.ceiling -1.8 = (-1.0)\n    ",
                            "reason": "Float.ceiling(1.2) == 2.0(Float.ceiling, 1.5) == 2.0(Float.ceiling, 1.8)\n== 2.0(Float.ceiling)\n- 1.2 == (-1.0)(Float.ceiling)\n- 1.5 == (-1.0)(Float.ceiling)\n- 1.8 == (-1.0);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "truncate",
                  "qualified_name": "Float.truncate",
                  "type": {
                    "rendered": "Float.t -> Float.t"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Ceiling function, equivalent to "
                        },
                        {
                          "tag": "Code",
                          "value": "Float.round ~direction:`Zero"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      Float.truncate 1.0 = 1.\n      Float.truncate 1.2 = 1.\n      Float.truncate 1.5 = 1.\n      Float.truncate 1.8 = 1.\n      Float.truncate (-1.2) = -1.\n      Float.truncate (-1.5) = -1.\n      Float.truncate (-1.8) = -1.\n    ",
                            "reason": "Float.truncate(1.0) == 1.(Float.truncate, 1.2) == 1.(Float.truncate, 1.5)\n== 1.(Float.truncate, 1.8)\n== 1.(Float.truncate, -1.2)\n== - 1.(Float.truncate, -1.5)\n== - 1.(Float.truncate, -1.8)\n== (-1.);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toInt",
                  "qualified_name": "Float.toInt",
                  "type": {
                    "rendered": "Float.t -> int option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Converts a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " to an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " by "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "ignoring the decimal portion"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": ". See "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.truncate",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.truncate",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.truncate"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " for examples."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "None"
                        },
                        {
                          "tag": "Raw",
                          "value": " when trying to round a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " which can't be represented as an "
                        },
                        {
                          "tag": "Code",
                          "value": "int"
                        },
                        {
                          "tag": "Raw",
                          "value": " such as "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.nan",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.nan",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.nan"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.infinity",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.infinity",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.infinity"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or numbers which are too large or small."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    You probably want to use some form of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Float.round",
                            "reference": {
                              "kind": "VAL",
                              "target": "Float.round",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Float.round"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " prior to using this function."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(toInt 1.6) = (Some 1)",
                            "reason": "Float.(toInt(1.6)) == Some(1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(toInt 2.0) = (Some 2)",
                            "reason": "Float.(toInt(2.0)) == Some(2);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(toInt 5.683) = (Some 5)",
                            "reason": "Float.(toInt(5.683)) == Some(5);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(toInt nan) = None",
                            "reason": "Float.(toInt(nan)) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(toInt infinity) = None",
                            "reason": "Float.(toInt(infinity)) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Float.(round 1.6 |> toInt) = Some 2",
                            "reason": "Float.(round(1.6) |> toInt) == Some(2);\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_int",
                  "qualified_name": "Float.to_int",
                  "type": {
                    "rendered": "Float.t -> int option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toString",
                  "qualified_name": "Float.toString",
                  "type": {
                    "rendered": "Float.t -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Code",
                          "value": "float"
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    The behaviour of this function is platform specific"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_string",
                  "qualified_name": "Float.to_string",
                  "type": {
                    "rendered": "Float.t -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "Float.equal",
                  "type": {
                    "rendered": "Float.t -> Float.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test two floats for equality"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "Float.compare",
                  "type": {
                    "rendered": "Float.t -> Float.t -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two floats"
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Container": {
        "tag": "Module",
        "value": {
          "name": "Container",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "ModuleType",
                "value": {
                  "name": "Sum",
                  "target": "MODULETYPESum",
                  "kind": {
                    "tag": "ModuleTypeStruct",
                    "value": "Container.Sum"
                  },
                  "info": null,
                  "signature": "sig\n  type t\n  val zero : Container.Sum.t\n  val add : Container.Sum.t -> Container.Sum.t -> Container.Sum.t\nend",
                  "elements": [
                    {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Modules which conform to this signature can be used with functions like\n      "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Array.sum",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Array.sum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Array.sum"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "List.sum",
                            "reference": {
                              "kind": "Unknown",
                              "target": "List.sum",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "List.sum"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    {
                      "tag": "Type",
                      "value": {
                        "name": "t",
                        "parameters": "",
                        "is_private": false,
                        "father": "Container.Sum",
                        "field_comment": null,
                        "kind": {
                          "tag": "TypeAbstract",
                          "value": null
                        },
                        "manifest": null,
                        "info": null
                      }
                    },
                    {
                      "tag": "Value",
                      "value": {
                        "name": "zero",
                        "qualified_name": "Container.Sum.zero",
                        "type": {
                          "rendered": "Container.Sum.t"
                        },
                        "info": null,
                        "parameters": {
                          "tag": "DescribedParameterList",
                          "value": [
                          ]
                        }
                      }
                    },
                    {
                      "tag": "Value",
                      "value": {
                        "name": "add",
                        "qualified_name": "Container.Sum.add",
                        "type": {
                          "rendered": "Container.Sum.t -> Container.Sum.t -> Container.Sum.t"
                        },
                        "info": null,
                        "parameters": {
                          "tag": "DescribedParameterList",
                          "value": [
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": {
              "tag": "Text",
              "value": [
                {
                  "tag": "Raw",
                  "value": "This module contains module signatures which are used in functions which\n    accept first class modules."
                }
              ]
            },
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Comparator": {
        "tag": "Module",
        "value": {
          "name": "Comparator",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Comparator provide a way for custom data structures to be used with "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Map",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Map",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Map"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "s and "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": "s"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Say we have a module "
                  },
                  {
                    "tag": "Code",
                    "value": "Book"
                  },
                  {
                    "tag": "Raw",
                    "value": " which we want to be able to create a "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Set",
                      "reference": {
                        "kind": "Unknown",
                        "target": "Set",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Set"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " of"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      module Book = struct\n        type t = {\n          isbn: string;\n          title: string;\n        }\n\n        let compare bookA bookB =\n          String.compare bookA.isbn bookb.isbn\n      end\n    ",
                      "reason": "module Book = {\n  type t = {\n    isbn: string,\n    title: string,\n  };\n\n  let compare = (bookA, bookB) => String.compare(bookA.isbn, bookb.isbn);\n};\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    First we need to make our module conform to the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.S",
                      "reference": {
                        "kind": "MODULETYPE",
                        "target": "Comparator.S",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.S"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " signature."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    This can be done by using the "
                  },
                  {
                    "tag": "Ref",
                    "value": {
                      "name": "Comparator.Make",
                      "reference": {
                        "kind": "MODULE",
                        "target": "Comparator.Make",
                        "content": [
                          {
                            "tag": "Code",
                            "value": "Comparator.Make"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "tag": "Raw",
                    "value": " functor."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      module Book = struct\n        type t = {\n          isbn: string;\n          title: string;\n        }\n\n        let compare bookA bookB =\n          String.compare bookA.isbn bookb.isbn\n        \n        include Comparator.Make(struct \n          type nonrec t = t\n\n          let compare = compare\n        end)\n      end\n    ",
                      "reason": "module Book = {\n  type t = {\n    isbn: string,\n    title: string,\n  };\n\n  let compare = (bookA, bookB) => String.compare(bookA.isbn, bookb.isbn);\n\n  include Comparator.Make({\n    type nonrec t = t;\n\n    let compare = compare;\n  });\n};\n"
                    }
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Now we can create a Set of books"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      Set.fromList (module Book) [\n        { isbn=\"9788460767923\"; title=\"Moby Dick or The Whale\" }\n      ]\n    ",
                      "reason": "Set.fromList(\n  (module Book),\n  [{isbn: \"9788460767923\", title: \"Moby Dick or The Whale\"}],\n);\n"
                    }
                  }
                ]
              },
              {
                "tag": "ModuleType",
                "value": {
                  "name": "T",
                  "target": "MODULETYPET",
                  "kind": {
                    "tag": "ModuleTypeStruct",
                    "value": "Comparator.T"
                  },
                  "info": null,
                  "signature": "sig type nonrec t val compare : Comparator.T.t -> Comparator.T.t -> int end",
                  "elements": [
                    {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "T represents the input for the "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator.Make",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator.Make",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator.Make"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " functor"
                        }
                      ]
                    },
                    {
                      "tag": "Type",
                      "value": {
                        "name": "t",
                        "parameters": "",
                        "is_private": false,
                        "father": "Comparator.T",
                        "field_comment": null,
                        "kind": {
                          "tag": "TypeAbstract",
                          "value": null
                        },
                        "manifest": null,
                        "info": null
                      }
                    },
                    {
                      "tag": "Value",
                      "value": {
                        "name": "compare",
                        "qualified_name": "Comparator.T.compare",
                        "type": {
                          "rendered": "Comparator.T.t -> Comparator.T.t -> int"
                        },
                        "info": null,
                        "parameters": {
                          "tag": "DescribedParameterList",
                          "value": [
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "('a, 'identity)",
                  "is_private": false,
                  "father": "Comparator",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": null,
                  "info": null
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "comparator",
                  "parameters": "('a, 'identity)",
                  "is_private": false,
                  "father": "Comparator",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This just is an alias for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator.t",
                            "reference": {
                              "kind": "TYPE",
                              "target": "Comparator.t",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator.t"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "('a, 'identity) Comparator.t"
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "This just is an alias for "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator.t",
                            "reference": {
                              "kind": "TYPE",
                              "target": "Comparator.t",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator.t"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "ModuleType",
                "value": {
                  "name": "S",
                  "target": "MODULETYPES",
                  "kind": {
                    "tag": "ModuleTypeStruct",
                    "value": "Comparator.S"
                  },
                  "info": null,
                  "signature": "sig\n  type t\n  type identity\n  val comparator :\n    (Comparator.S.t, Comparator.S.identity) Comparator.comparator\nend",
                  "elements": [
                    {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The output type of "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator.Make",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Comparator.Make",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator.Make"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        }
                      ]
                    },
                    {
                      "tag": "Type",
                      "value": {
                        "name": "t",
                        "parameters": "",
                        "is_private": false,
                        "father": "Comparator.S",
                        "field_comment": null,
                        "kind": {
                          "tag": "TypeAbstract",
                          "value": null
                        },
                        "manifest": null,
                        "info": null
                      }
                    },
                    {
                      "tag": "Type",
                      "value": {
                        "name": "identity",
                        "parameters": "",
                        "is_private": false,
                        "father": "Comparator.S",
                        "field_comment": null,
                        "kind": {
                          "tag": "TypeAbstract",
                          "value": null
                        },
                        "manifest": null,
                        "info": null
                      }
                    },
                    {
                      "tag": "Value",
                      "value": {
                        "name": "comparator",
                        "qualified_name": "Comparator.S.comparator",
                        "type": {
                          "rendered": "(Comparator.S.t, Comparator.S.identity) Comparator.comparator"
                        },
                        "info": null,
                        "parameters": {
                          "tag": "DescribedParameterList",
                          "value": [
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "tag": "Type",
                "value": {
                  "name": "s",
                  "parameters": "('a, 'identity)",
                  "is_private": false,
                  "father": "Comparator",
                  "field_comment": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A type alias that is useful typing functions which accept first class modules like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Map.empty",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Map.empty",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Map.empty"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Set.fromArray",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Set.fromArray",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Set.fromArray"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "(module Comparator.S with type identity = 'identity and type t = 'a)"
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "A type alias that is useful typing functions which accept first class modules like "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Map.empty",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Map.empty",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Map.empty"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " or "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Set.fromArray",
                            "reference": {
                              "kind": "Unknown",
                              "target": "Set.fromArray",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Set.fromArray"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              },
              {
                "tag": "Module",
                "value": {
                  "name": "Make",
                  "kind": {
                    "tag": "ModuleFunctor",
                    "value": {
                      "parameter": {
                        "tag": "ModuleParameter",
                        "value": {
                          "name": "M",
                          "kind": {
                            "tag": "ModuleTypeAlias",
                            "value": "Comparator.T"
                          }
                        }
                      },
                      "result": {
                        "tag": "ModuleWith",
                        "value": {
                          "kind": {
                            "tag": "ModuleTypeAlias",
                            "value": "Comparator.S"
                          },
                          "s": " with type t := M.t"
                        }
                      }
                    }
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Create a new comparator by providing a module which satisifies "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Comparator.T",
                            "reference": {
                              "kind": "MODULETYPE",
                              "target": "Comparator.T",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Comparator.T"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "\n      module Book = struct\n        module T = struct\n          type t = {\n            isbn: string;\n            title: string;\n          }\n          let compare bookA bookB =\n            String.compare bookA.isbn bookB.isbn\n        end\n\n        include T\n        include Comparator.Make(T)\n      end\n\n      let books = Set.empty (module Book)\n    ",
                            "reason": "module Book = {\n  module T = {\n    type t = {\n      isbn: string,\n      title: string,\n    };\n    let compare = (bookA, bookB) => String.compare(bookA.isbn, bookB.isbn);\n  };\n\n  include T;\n  include Comparator.Make(T);\n};\n\nlet books = Set.empty((module Book));\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      },
      "Bool": {
        "tag": "Module",
        "value": {
          "name": "Bool",
          "kind": {
            "tag": "ModuleStruct",
            "value": [
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Raw",
                    "value": "Functions for working with boolean values."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Booleans in OCaml / Reason are represented by the "
                  },
                  {
                    "tag": "Code",
                    "value": "true"
                  },
                  {
                    "tag": "Raw",
                    "value": " and "
                  },
                  {
                    "tag": "Code",
                    "value": "false"
                  },
                  {
                    "tag": "Raw",
                    "value": " literals."
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    Whilst a bool isnt a variant, you will get warnings if you haven't\n    exhaustively pattern match on them:"
                  },
                  {
                    "tag": "Newline",
                    "value": "\n"
                  },
                  {
                    "tag": "Raw",
                    "value": "\n    "
                  },
                  {
                    "tag": "CodePre",
                    "value": {
                      "ocaml": "\n      let bool = false\n      let string =\n        match bool with\n        | false -> \"false\"\n      (*\n        Warning 8: this pattern-matching is not exhaustive.\n        Here is an example of a case that is not matched:\n        true\n      *)\n    ",
                      "reason": "let bool = false;\nlet string =\n  switch (bool) {\n  | false => \"false\"\n  };\n/*\n   Warning 8: this pattern-matching is not exhaustive.\n   Here is an example of a case that is not matched:\n   true\n */\n"
                    }
                  }
                ]
              },
              {
                "tag": "Type",
                "value": {
                  "name": "t",
                  "parameters": "",
                  "is_private": false,
                  "father": "Bool",
                  "field_comment": null,
                  "kind": {
                    "tag": "TypeAbstract",
                    "value": null
                  },
                  "manifest": {
                    "tag": "Other",
                    "value": {
                      "rendered": "bool"
                    }
                  },
                  "info": null
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Create"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromInt",
                  "qualified_name": "Bool.fromInt",
                  "type": {
                    "rendered": "int -> bool option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Bool",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Bool",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Bool"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.ofInt 0 = Some false",
                            "reason": "Bool.ofInt(0) == Some(false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.ofInt 1 = Some true",
                            "reason": "Bool.ofInt(1) == Some(true);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.ofInt 8 = None",
                            "reason": "Bool.ofInt(8) == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.ofInt (-3) = None",
                            "reason": "Bool.ofInt(-3) == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_int",
                  "qualified_name": "Bool.from_int",
                  "type": {
                    "rendered": "int -> bool option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "fromString",
                  "qualified_name": "Bool.fromString",
                  "type": {
                    "rendered": "string -> bool option"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": " into a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Bool",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Bool",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Bool"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"true\" = Some true",
                            "reason": "Bool.fromString(\"true\") == Some(true);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"false\" = Some false",
                            "reason": "Bool.fromString(\"false\") == Some(false);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"True\" = None",
                            "reason": "Bool.fromString(\"True\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"False\" = None",
                            "reason": "Bool.fromString(\"False\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"0\" = None",
                            "reason": "Bool.fromString(\"0\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"1\" = None",
                            "reason": "Bool.fromString(\"1\") == None;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.fromString \"Not even close\" = None",
                            "reason": "Bool.fromString(\"Not even close\") == None;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "from_string",
                  "qualified_name": "Bool.from_string",
                  "type": {
                    "rendered": "string -> bool option"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Basic operations"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(&&)",
                  "qualified_name": "Bool.(&&)",
                  "type": {
                    "rendered": "bool -> bool -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The lazy logical AND operator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " if both of its operands evaluate to "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the 'left' operand evaluates to "
                        },
                        {
                          "tag": "Code",
                          "value": "false"
                        },
                        {
                          "tag": "Raw",
                          "value": ", the 'right' operand is not evaluated."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(true && true) = true",
                            "reason": "Bool.(true && true) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(true && false) = false",
                            "reason": "Bool.(true && false) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(false && true) = false",
                            "reason": "Bool.(false && true) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(false && false) = false",
                            "reason": "Bool.(false && false) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "(||)",
                  "qualified_name": "Bool.(||)",
                  "type": {
                    "rendered": "bool -> bool -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The lazy logical OR operator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " if one of its operands evaluates to "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    If the 'left' operand evaluates to "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": ", the 'right' operand is not evaluated."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(true || true) = true",
                            "reason": "Bool.(true || true) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(true || false) = true",
                            "reason": "Bool.(true || false) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(false || true) = true",
                            "reason": "Bool.(false || true) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.(false || false) = false",
                            "reason": "Bool.(false || false) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "xor",
                  "qualified_name": "Bool.xor",
                  "type": {
                    "rendered": "bool -> bool -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "The exclusive or operator."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    Returns "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": " if "
                        },
                        {
                          "tag": "Bold",
                          "value": [
                            {
                              "tag": "Raw",
                              "value": "exactly one"
                            }
                          ]
                        },
                        {
                          "tag": "Raw",
                          "value": " of its operands is "
                        },
                        {
                          "tag": "Code",
                          "value": "true"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.xor true true  = false",
                            "reason": "Bool.xor(true, true) == false;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.xor true false = true",
                            "reason": "Bool.xor(true, false) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.xor false true  = true",
                            "reason": "Bool.xor(false, true) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.xor false false = false",
                            "reason": "Bool.xor(false, false) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "not",
                  "qualified_name": "Bool.not",
                  "type": {
                    "rendered": "Bool.t -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Negate a "
                        },
                        {
                          "tag": "Code",
                          "value": "bool"
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.not false = true",
                            "reason": "Bool.(!)(false) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.not true = false",
                            "reason": "Bool.(!)(true) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Convert"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toString",
                  "qualified_name": "Bool.toString",
                  "type": {
                    "rendered": "bool -> string"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Code",
                          "value": "bool"
                        },
                        {
                          "tag": "Raw",
                          "value": " to a "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "String",
                            "reference": {
                              "kind": "Unknown",
                              "target": "String",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "String"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.toString true = \"true\"",
                            "reason": "Bool.toString(true) == \"true\";\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.toString false = \"false\"",
                            "reason": "Bool.toString(false) == \"false\";\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_string",
                  "qualified_name": "Bool.to_string",
                  "type": {
                    "rendered": "bool -> string"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "toInt",
                  "qualified_name": "Bool.toInt",
                  "type": {
                    "rendered": "bool -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Convert a "
                        },
                        {
                          "tag": "Code",
                          "value": "bool"
                        },
                        {
                          "tag": "Raw",
                          "value": " to an "
                        },
                        {
                          "tag": "Ref",
                          "value": {
                            "name": "Int",
                            "reference": {
                              "kind": "MODULE",
                              "target": "Int",
                              "content": [
                                {
                                  "tag": "Code",
                                  "value": "Int"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "tag": "Raw",
                          "value": "."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.toInt true = 1",
                            "reason": "Bool.toInt(true) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.toInt false = 0",
                            "reason": "Bool.toInt(false) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "to_int",
                  "qualified_name": "Bool.to_int",
                  "type": {
                    "rendered": "bool -> int"
                  },
                  "info": null,
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Text",
                "value": [
                  {
                    "tag": "Title",
                    "value": {
                      "size": 1,
                      "label": null,
                      "content": [
                        {
                          "tag": "Raw",
                          "value": "Compare"
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "tag": "Value",
                "value": {
                  "name": "equal",
                  "qualified_name": "Bool.equal",
                  "type": {
                    "rendered": "bool -> bool -> bool"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Test for the equality of two "
                        },
                        {
                          "tag": "Code",
                          "value": "bool"
                        },
                        {
                          "tag": "Raw",
                          "value": " values."
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.equal true true = true",
                            "reason": "Bool.equal(true, true) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.equal false false = true",
                            "reason": "Bool.equal(false, false) == true;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.equal false true = false",
                            "reason": "Bool.equal(false, true) == false;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              },
              {
                "tag": "Value",
                "value": {
                  "name": "compare",
                  "qualified_name": "Bool.compare",
                  "type": {
                    "rendered": "bool -> bool -> int"
                  },
                  "info": {
                    "deprecated": null,
                    "description": {
                      "tag": "Text",
                      "value": [
                        {
                          "tag": "Raw",
                          "value": "Compare two boolean values"
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "Title",
                          "value": {
                            "size": 2,
                            "label": null,
                            "content": [
                              {
                                "tag": "Raw",
                                "value": "Examples"
                              }
                            ]
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.compare true false = 1",
                            "reason": "Bool.compare(true, false) == 1;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.compare false true = -1",
                            "reason": "Bool.compare(false, true) == (-1);\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.compare true true = 0",
                            "reason": "Bool.compare(true, true) == 0;\n"
                          }
                        },
                        {
                          "tag": "Newline",
                          "value": "\n"
                        },
                        {
                          "tag": "Raw",
                          "value": "\n    "
                        },
                        {
                          "tag": "CodePre",
                          "value": {
                            "ocaml": "Bool.compare false false = 0",
                            "reason": "Bool.compare(false, false) == 0;\n"
                          }
                        }
                      ]
                    },
                    "version": null,
                    "before": [
                    ],
                    "since": null,
                    "exceptions": [
                    ],
                    "return": null,
                    "see": [
                    ],
                    "custom": [
                    ]
                  },
                  "parameters": {
                    "tag": "DescribedParameterList",
                    "value": [
                    ]
                  }
                }
              }
            ]
          },
          "info": {
            "deprecated": null,
            "description": null,
            "version": null,
            "before": [
            ],
            "since": null,
            "exceptions": [
            ],
            "return": null,
            "see": [
            ],
            "custom": [
            ]
          }
        }
      }
    }
  }